{"ast":null,"code":"const fetchWaxUsd = require('../../core/fetchWaxUsd');\nconst _ = require('lodash');\nconst fetchAtomichub = require('../utils/fetchAtomichub');\nconst API_ENDPOINTS = require('../consts/API_ENGPOINTS');\nconst SALES_LIMIT = 100;\nconst formatPrice = ({\n  currency,\n  price\n}) => {\n  if (currency === 'USD') {\n    return price / 100;\n  }\n  if (currency === 'WAX') {\n    return price / 100000000;\n  }\n  throw new Error(`formatPrice: ${currency} is not identified`);\n};\nconst convertToWaxPrice = ({\n  currency,\n  price,\n  waxUsdPrice\n}) => {\n  const _price = formatPrice({\n    currency,\n    price\n  });\n  if (currency === 'USD') {\n    return _price / waxUsdPrice;\n  }\n  if (currency == 'WAX') {\n    return _price;\n  }\n  throw new Error(`convertToWaxPrice: ${currency} is not identified`);\n};\nconst fetchSales = async ({\n  params,\n  customProcessor = () => {}\n}) => {\n  let page = 1;\n  let sales = [];\n  const waxUsdPrice = await fetchWaxUsd();\n  while (true) {\n    const data = await fetchAtomichub({\n      type: API_ENDPOINTS.SALES,\n      params: {\n        state: 1,\n        max_assets: 1,\n        show_seller_contracts: true,\n        symbol: 'WAX',\n        limit: SALES_LIMIT,\n        order: 'desc',\n        sort: 'created',\n        page,\n        ...params\n      }\n    });\n    const pageSales = _(data.data).map(sale => {\n      const asset = sale.assets[0];\n      return {\n        id: sale.sale_id,\n        assetId: asset.asset_id,\n        saleId: sale.sale_id,\n        offerId: sale.offer_id,\n        mintId: asset.template_mint,\n        updatedAt: sale.updated_at_time,\n        seller: sale.seller,\n        price: formatPrice({\n          currency: sale.listing_symbol,\n          price: Number(sale.listing_price)\n        }),\n        waxPrice: convertToWaxPrice({\n          currency: sale.listing_symbol,\n          price: Number(sale.listing_price),\n          waxUsdPrice\n        }),\n        tokenSymbol: sale.listing_symbol,\n        listingPrice: sale.listing_price,\n        collectionName: sale.collection_name,\n        schemaName: asset.schema.schema_name,\n        templateId: asset.template.template_id,\n        name: asset.name,\n        params: {\n          collectionName: sale.collection_name,\n          schemaName: asset.schema.schema_name,\n          templateId: Number(asset.template.template_id),\n          ...asset.data\n        },\n        ...customProcessor({\n          sale\n        })\n      };\n    }).value();\n    sales = [...sales, ...pageSales];\n    if (pageSales.length < SALES_LIMIT) {\n      break;\n    }\n    page++;\n  }\n  return sales;\n};\nmodule.exports = fetchSales;","map":{"version":3,"names":["fetchWaxUsd","require","_","fetchAtomichub","API_ENDPOINTS","SALES_LIMIT","formatPrice","currency","price","Error","convertToWaxPrice","waxUsdPrice","_price","fetchSales","params","customProcessor","page","sales","data","type","SALES","state","max_assets","show_seller_contracts","symbol","limit","order","sort","pageSales","map","sale","asset","assets","id","sale_id","assetId","asset_id","saleId","offerId","offer_id","mintId","template_mint","updatedAt","updated_at_time","seller","listing_symbol","Number","listing_price","waxPrice","tokenSymbol","listingPrice","collectionName","collection_name","schemaName","schema","schema_name","templateId","template","template_id","name","value","length","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/api/fetchSales.js"],"sourcesContent":["const fetchWaxUsd = require('../../core/fetchWaxUsd');\nconst _ = require('lodash');\nconst fetchAtomichub = require('../utils/fetchAtomichub');\nconst API_ENDPOINTS = require('../consts/API_ENGPOINTS');\n\nconst SALES_LIMIT = 100;\n\nconst formatPrice = ({\n    currency,\n    price,\n}) => {\n    if (currency === 'USD') {\n        return price / 100;\n    }\n\n    if (currency === 'WAX') {\n        return price / 100000000;\n    }\n\n    throw new Error(`formatPrice: ${currency} is not identified`);\n}\n\nconst convertToWaxPrice = ({\n    currency,\n    price,\n    waxUsdPrice,\n}) => {\n    const _price = formatPrice({\n        currency,\n        price,\n    });\n    if (currency === 'USD') {\n        return _price / waxUsdPrice;\n    }\n\n    if (currency == 'WAX') {\n        return _price;\n    }\n    \n    throw new Error(`convertToWaxPrice: ${currency} is not identified`);\n};\n\nconst fetchSales = async ({\n    params,\n    customProcessor = () => {},\n}) => {\n  let page = 1;\n  let sales = [];\n  const waxUsdPrice = await fetchWaxUsd();\n\n  while (true) {\n    const data = await fetchAtomichub({\n        type: API_ENDPOINTS.SALES,\n        params: {\n            state: 1,\n            max_assets: 1,\n            show_seller_contracts: true,\n            symbol: 'WAX',\n            limit: SALES_LIMIT,\n            order: 'desc',\n            sort: 'created',\n            page,\n            ...params,\n        },\n    });\n\n    const pageSales = _(data.data)\n        .map((sale) => {\n            const asset = sale.assets[0];\n\n            return {\n                id: sale.sale_id,\n                assetId: asset.asset_id,\n                saleId: sale.sale_id,\n                offerId: sale.offer_id,\n                mintId: asset.template_mint,\n                updatedAt: sale.updated_at_time,\n                seller: sale.seller,\n                price: formatPrice({\n                    currency: sale.listing_symbol,\n                    price: Number(sale.listing_price),\n                }),\n                waxPrice: convertToWaxPrice({\n                    currency: sale.listing_symbol,\n                    price: Number(sale.listing_price),\n                    waxUsdPrice,\n                }),\n                tokenSymbol: sale.listing_symbol,\n                listingPrice: sale.listing_price,\n                collectionName: sale.collection_name,\n                schemaName: asset.schema.schema_name,\n                templateId: asset.template.template_id,\n                name: asset.name,\n                params: {\n                    collectionName: sale.collection_name,\n                    schemaName: asset.schema.schema_name,\n                    templateId: Number(asset.template.template_id),\n                    ...asset.data,\n                },\n                ...customProcessor({\n                    sale\n                }),\n            };\n        })\n        .value();\n\n        sales = [\n            ...sales,\n            ...pageSales,\n        ];\n        if (pageSales.length < SALES_LIMIT) {\n            break;\n        }\n        page++;\n  }\n\n  return sales;\n};\n\nmodule.exports = fetchSales;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}