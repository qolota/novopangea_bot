{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProofWaxRequiredKeys = void 0;\nconst getProofWaxRequiredKeys = rpcUrl => __awaiter(void 0, void 0, void 0, function* () {\n  const response = yield fetch(`${rpcUrl}/v1/chain/get_account`, {\n    body: JSON.stringify({\n      account_name: \"proof.wax\"\n    }),\n    method: \"POST\"\n  });\n  if (!response.ok) {\n    // Handle non-successful HTTP responses (e.g., 404 Not Found, 500 Internal Server Error)\n    console.error(`HTTP error! Status: ${response.status}`);\n  } else {\n    const responseData = yield response.json();\n    if (responseData.permissions) {\n      for (const perm of responseData.permissions) {\n        if (perm.perm_name === \"active\") {\n          return perm.required_auth.keys[0].key;\n        }\n      }\n    }\n  }\n  throw new Error('Unable to retrieve the WAX proof key for account verification');\n});\nexports.getProofWaxRequiredKeys = getProofWaxRequiredKeys;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","getProofWaxRequiredKeys","rpcUrl","response","fetch","body","JSON","stringify","account_name","method","ok","console","error","status","responseData","json","permissions","perm","perm_name","required_auth","keys","key","Error"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/@waxio/waxjs/dist/helpers.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getProofWaxRequiredKeys = void 0;\nconst getProofWaxRequiredKeys = (rpcUrl) => __awaiter(void 0, void 0, void 0, function* () {\n    const response = yield fetch(`${rpcUrl}/v1/chain/get_account`, {\n        body: JSON.stringify({\n            account_name: \"proof.wax\",\n        }),\n        method: \"POST\",\n    });\n    if (!response.ok) {\n        // Handle non-successful HTTP responses (e.g., 404 Not Found, 500 Internal Server Error)\n        console.error(`HTTP error! Status: ${response.status}`);\n    }\n    else {\n        const responseData = yield response.json();\n        if (responseData.permissions) {\n            for (const perm of responseData.permissions) {\n                if (perm.perm_name === \"active\") {\n                    return perm.required_auth.keys[0].key;\n                }\n            }\n        }\n    }\n    throw (new Error('Unable to retrieve the WAX proof key for account verification'));\n});\nexports.getProofWaxRequiredKeys = getProofWaxRequiredKeys;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,SAASC,KAAKA,CAACC,KAAK,EAAE;IAAE,OAAOA,KAAK,YAAYH,CAAC,GAAGG,KAAK,GAAG,IAAIH,CAAC,CAAC,UAAUI,OAAO,EAAE;MAAEA,OAAO,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;EAAE;EAC3G,OAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAO,CAAC,EAAE,UAAUD,OAAO,EAAEE,MAAM,EAAE;IACvD,SAASC,SAASA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAACQ,IAAI,CAACN,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACR,KAAK,EAAE;MAAE,IAAI;QAAEK,IAAI,CAACP,SAAS,CAAC,OAAO,CAAC,CAACE,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOO,CAAC,EAAE;QAAEJ,MAAM,CAACI,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACT,KAAK,CAAC,GAAGD,KAAK,CAACU,MAAM,CAACT,KAAK,CAAC,CAACW,IAAI,CAACP,SAAS,EAAEI,QAAQ,CAAC;IAAE;IAC7GH,IAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAK,CAACjB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAEU,IAAI,CAAC,CAAC,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACDO,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEf,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7De,OAAO,CAACC,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAMA,uBAAuB,GAAIC,MAAM,IAAKvB,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;EACvF,MAAMwB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEF,MAAO,uBAAsB,EAAE;IAC3DG,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,YAAY,EAAE;IAClB,CAAC,CAAC;IACFC,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;IACd;IACAC,OAAO,CAACC,KAAK,CAAE,uBAAsBT,QAAQ,CAACU,MAAO,EAAC,CAAC;EAC3D,CAAC,MACI;IACD,MAAMC,YAAY,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAC1C,IAAID,YAAY,CAACE,WAAW,EAAE;MAC1B,KAAK,MAAMC,IAAI,IAAIH,YAAY,CAACE,WAAW,EAAE;QACzC,IAAIC,IAAI,CAACC,SAAS,KAAK,QAAQ,EAAE;UAC7B,OAAOD,IAAI,CAACE,aAAa,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG;QACzC;MACJ;IACJ;EACJ;EACA,MAAO,IAAIC,KAAK,CAAC,+DAA+D,CAAC;AACrF,CAAC,CAAC;AACFtB,OAAO,CAACC,uBAAuB,GAAGA,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}