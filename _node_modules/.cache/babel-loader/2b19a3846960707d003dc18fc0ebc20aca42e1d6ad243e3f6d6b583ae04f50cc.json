{"ast":null,"code":"const _ = require('lodash');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst fetchAccountAssetsWaxData = require('../atomicassets/api/fetchAccountAssetsWaxData');\nconst fetchSales = require('../atomicassets/api/fetchSales');\nconst filterStaleSales = require('./utils/filterStaleSales');\nconst cancelSales = require('./actions/cancelSales');\nconst announceSales = require('./actions/announceSales');\nconst calcDiscountPrice = ({\n  otherSalesLowestWaxPrice,\n  sellSettings\n}) => {\n  let comparePrice = otherSalesLowestWaxPrice;\n  if (comparePrice == null || sellSettings.maxPrice < comparePrice) {\n    comparePrice = sellSettings.maxPrice;\n  }\n  if (sellSettings.minPrice > comparePrice) {\n    comparePrice = sellSettings.minPrice;\n  }\n  return (1 - sellSettings.discountPriceRate) * comparePrice;\n};\n// let nextSaleIndex = 0;\nconst announceSaleIterCalcNextAction2 = async ({\n  accountName\n}) => {\n  const sellAssetsList = ACCOUNT_CAPABILITIES[accountName].atomichub_sell_assets_list2 || [];\n  const accountSales = _(await fetchSales({\n    params: {\n      seller: accountName\n    }\n  })).filter(sale => sale.mintId !== '1').sortBy(sale => sale.waxPrice).value();\n  const accountAssets = _(await fetchAccountAssetsWaxData({\n    accountName,\n    assetParams: _(sellAssetsList).map(sellSettings => ({\n      key: sellSettings.name,\n      params: sellSettings.params\n    })).value()\n  })).map((assets, key) => {\n    const settings = sellAssetsList.find(sellSettings => sellSettings.name === key);\n    return {\n      key,\n      settings,\n      assets: _(assets).filter(asset => asset.mintId !== '1').value(),\n      sales: _(accountSales).filter(sale => _.isMatch(sale.params, settings.params)).value(),\n      otherSalesLowestWaxPrice: null\n    };\n  }).value();\n  // no asset, need to remove settings from config file or buy more\n  const inactiveAccountAssets = _(accountAssets).filter(asset => asset.assets.length === 0).value();\n\n  // assets to sell on the market\n  const activeAccountAssets = _(accountAssets).filter(asset => asset.assets.length > 0).value();\n  for (let i = 0; i < activeAccountAssets.length; i++) {\n    const asset = activeAccountAssets[i];\n    const sellSettings = asset.settings.sellSettings;\n\n    // find other lowest price\n    const otherSales = await fetchSales({\n      params: {\n        collection_name: asset.settings.params.collectionName,\n        schema_name: asset.settings.params.schemaName,\n        template_id: asset.settings.params.templateId,\n        seller_blacklist: accountName,\n        ..._(_.omit(asset.settings.params, ['collectionName', 'schemaName', 'templateId', 'params'])).mapKeys((_value, key) => `data:text.${key}`).value(),\n        limit: 1,\n        order: 'asc',\n        sort: 'price'\n      }\n    });\n    const otherLowestSale = otherSales[0];\n    let otherSalesLowestWaxPrice = null;\n    if (otherLowestSale != null) {\n      otherSalesLowestWaxPrice = otherLowestSale.waxPrice;\n    }\n\n    // find all stale sales\n    const staleAccountSales = filterStaleSales({\n      sales: asset.sales,\n      otherSalesLowestWaxPrice,\n      sellSettings\n    });\n\n    // calculate sales count\n    const maxSalesCount = _.min([sellSettings.maxSaleCount, _.max([0, asset.assets.length - sellSettings.targetAssetsCount])]);\n    const newSalesCount = _.max([0, maxSalesCount - asset.sales.length + staleAccountSales.length]);\n\n    // calculate discount price\n    const discountPrice = _.round(calcDiscountPrice({\n      otherSalesLowestWaxPrice,\n      sellSettings\n    }), 8);\n    asset.otherSalesLowestWaxPrice = otherSalesLowestWaxPrice;\n    asset.staleAccountSales = staleAccountSales;\n    asset.maxSalesCount = maxSalesCount;\n    asset.newSalesCount = newSalesCount;\n    asset.discountPrice = discountPrice;\n    asset.availableAssets = _(asset.assets).filter(_asset => {\n      const isOnMarket = asset.sales.find(sale => sale.assetId === _asset.id);\n      if (!isOnMarket) {\n        return true;\n      }\n      const isStaleSale = staleAccountSales.find(sale => sale.assetId === _asset.id);\n      return isStaleSale;\n    }).value();\n  }\n  const transactions = _(activeAccountAssets).map(asset => {\n    return [...cancelSales({\n      sales: asset.staleAccountSales\n    }), ...announceSales({\n      assets: _.sampleSize(asset.availableAssets, asset.newSalesCount),\n      price: asset.discountPrice\n    })];\n  }).filter(transactions => transactions.length > 0).value();\n  if (transactions.length === 0) {\n    return {\n      action: 'wait',\n      message: 'No sales in the list'\n    };\n  }\n  return {\n    action: 'announce_sales',\n    isMultipleTransactions: true,\n    message: `\n            Announce new sales for ${transactions.length} assets.\n        `,\n    actions: transactions\n  };\n};\n\n// announceSaleIterCalcNextAction2({\n//     accountName: '5oyiw.wam',\n// });\n\nmodule.exports = announceSaleIterCalcNextAction2;","map":{"version":3,"names":["_","require","ACCOUNT_CAPABILITIES","fetchAccountAssetsWaxData","fetchSales","filterStaleSales","cancelSales","announceSales","calcDiscountPrice","otherSalesLowestWaxPrice","sellSettings","comparePrice","maxPrice","minPrice","discountPriceRate","announceSaleIterCalcNextAction2","accountName","sellAssetsList","atomichub_sell_assets_list2","accountSales","params","seller","filter","sale","mintId","sortBy","waxPrice","value","accountAssets","assetParams","map","key","name","assets","settings","find","asset","sales","isMatch","inactiveAccountAssets","length","activeAccountAssets","i","otherSales","collection_name","collectionName","schema_name","schemaName","template_id","templateId","seller_blacklist","omit","mapKeys","_value","limit","order","sort","otherLowestSale","staleAccountSales","maxSalesCount","min","maxSaleCount","max","targetAssetsCount","newSalesCount","discountPrice","round","availableAssets","_asset","isOnMarket","assetId","id","isStaleSale","transactions","sampleSize","price","action","message","isMultipleTransactions","actions","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/announceSaleIterCalcNextAction2.js"],"sourcesContent":["const _ = require('lodash');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst fetchAccountAssetsWaxData = require('../atomicassets/api/fetchAccountAssetsWaxData');\nconst fetchSales = require('../atomicassets/api/fetchSales');\nconst filterStaleSales = require('./utils/filterStaleSales');\nconst cancelSales = require('./actions/cancelSales');\nconst announceSales = require('./actions/announceSales');\n\nconst calcDiscountPrice = ({\n    otherSalesLowestWaxPrice,\n    sellSettings,\n}) => {\n    let comparePrice = otherSalesLowestWaxPrice;\n    if (comparePrice == null || sellSettings.maxPrice < comparePrice) {\n        comparePrice = sellSettings.maxPrice;\n    }\n\n    if (sellSettings.minPrice > comparePrice) {\n        comparePrice = sellSettings.minPrice;\n    }\n\n    return (1 - sellSettings.discountPriceRate) * comparePrice;\n}\n// let nextSaleIndex = 0;\nconst announceSaleIterCalcNextAction2 = async ({\n    accountName,\n}) => {\n    const sellAssetsList = ACCOUNT_CAPABILITIES[accountName].atomichub_sell_assets_list2 || [];\n    const accountSales = _(await fetchSales({\n        params: {\n            seller: accountName,\n        },\n    }))\n        .filter(sale => sale.mintId !== '1')\n        .sortBy(sale => sale.waxPrice)\n        .value();\n    const accountAssets = _(await fetchAccountAssetsWaxData({\n        accountName,\n        assetParams: _(sellAssetsList)\n            .map(sellSettings => ({\n                key: sellSettings.name,\n                params: sellSettings.params,\n            }))\n            .value(),\n    }))\n        .map((assets, key) => {\n            const settings = sellAssetsList.find(sellSettings => sellSettings.name === key);\n\n            return {\n                key,\n                settings,\n                assets: _(assets)\n                    .filter(asset => asset.mintId !== '1')\n                    .value(),\n                sales: _(accountSales)\n                    .filter(sale => _.isMatch(sale.params, settings.params))\n                    .value(),\n                otherSalesLowestWaxPrice: null,\n            };\n        })\n        .value();\n    // no asset, need to remove settings from config file or buy more\n    const inactiveAccountAssets = _(accountAssets)\n        .filter(asset => asset.assets.length === 0)\n        .value();\n\n    // assets to sell on the market\n    const activeAccountAssets = _(accountAssets)\n        .filter(asset => asset.assets.length > 0)\n        .value();\n\n    for (let i = 0; i < activeAccountAssets.length; i++) {\n        const asset = activeAccountAssets[i];\n        const sellSettings = asset.settings.sellSettings;\n\n        // find other lowest price\n        const otherSales = await fetchSales({\n            params: {\n                collection_name: asset.settings.params.collectionName,\n                schema_name: asset.settings.params.schemaName,\n                template_id: asset.settings.params.templateId,\n                seller_blacklist: accountName,\n                ..._(_.omit(asset.settings.params, ['collectionName', 'schemaName', 'templateId', 'params']))\n                    .mapKeys((_value, key) => `data:text.${key}`)\n                    .value(),\n                limit: 1,\n                order: 'asc',\n                sort: 'price',\n            },\n        });\n        const otherLowestSale = otherSales[0];\n        let otherSalesLowestWaxPrice = null;\n        if (otherLowestSale != null) {\n            otherSalesLowestWaxPrice = otherLowestSale.waxPrice;\n        }\n\n        // find all stale sales\n        const staleAccountSales = filterStaleSales({\n            sales: asset.sales,\n            otherSalesLowestWaxPrice,\n            sellSettings,\n        });\n\n        // calculate sales count\n        const maxSalesCount = _.min([\n            sellSettings.maxSaleCount,\n            _.max([\n                0,\n                asset.assets.length - sellSettings.targetAssetsCount,\n            ]),\n        ]);\n        const newSalesCount = _.max([\n            0,\n            (maxSalesCount - asset.sales.length + staleAccountSales.length),\n        ]);\n\n        // calculate discount price\n        const discountPrice = _.round(calcDiscountPrice({\n            otherSalesLowestWaxPrice,\n            sellSettings,\n        }), 8);\n\n        asset.otherSalesLowestWaxPrice = otherSalesLowestWaxPrice;\n        asset.staleAccountSales = staleAccountSales;\n        asset.maxSalesCount = maxSalesCount;\n        asset.newSalesCount = newSalesCount;\n        asset.discountPrice = discountPrice;\n        asset.availableAssets = _(asset.assets)\n            .filter(_asset =>  {\n                const isOnMarket = asset.sales.find(sale => sale.assetId === _asset.id);\n\n                if (!isOnMarket) {\n                    return true;\n                }\n\n                const isStaleSale = staleAccountSales.find(sale => sale.assetId === _asset.id);\n                return isStaleSale;\n            })\n            .value();\n    }\n\n    const transactions = _(activeAccountAssets)\n        .map(asset => {\n            return [\n                ...cancelSales({\n                    sales: asset.staleAccountSales,\n                }),\n                ...announceSales({\n                    assets: _.sampleSize(asset.availableAssets, asset.newSalesCount),\n                    price: asset.discountPrice,\n                })\n            ]\n        })\n        .filter(transactions => transactions.length > 0)\n        .value();\n    \n    if (transactions.length === 0) {\n        return {\n            action: 'wait',\n            message: 'No sales in the list',\n        };\n    }\n\n    return {\n        action: 'announce_sales',\n        isMultipleTransactions: true,\n        message: `\n            Announce new sales for ${transactions.length} assets.\n        `,\n        actions: transactions,\n    };\n};\n\n// announceSaleIterCalcNextAction2({\n//     accountName: '5oyiw.wam',\n// });\n\nmodule.exports = announceSaleIterCalcNextAction2;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}