{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Serialization_1 = require(\"../../Serialization\");\nconst Schema_1 = __importDefault(require(\"./Schema\"));\nclass RpcTemplate {\n  constructor(api, collection, id, data, schema, cache = true) {\n    this.api = api;\n    this.collection = collection;\n    this.id = id;\n    this._data = new Promise(async (resolve, reject) => {\n      if (data) {\n        resolve(data);\n      } else {\n        try {\n          resolve(await api.queue.fetchTemplate(collection, id, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n    this._schema = new Promise(async (resolve, reject) => {\n      if (schema) {\n        resolve(schema);\n      } else {\n        try {\n          const row = await this._data;\n          resolve(new Schema_1.default(this.api, collection, row.schema_name, undefined, cache));\n        } catch (e) {\n          reject(e);\n        }\n      }\n    });\n  }\n  async schema() {\n    return await this._schema;\n  }\n  async immutableData() {\n    const schema = await this._schema;\n    return (0, Serialization_1.deserialize)((await this._data).immutable_serialized_data, await schema.format());\n  }\n  async isTransferable() {\n    return (await this._data).transferable;\n  }\n  async isBurnable() {\n    return (await this._data).burnable;\n  }\n  async maxSupply() {\n    return (await this._data).max_supply;\n  }\n  async circulation() {\n    return (await this._data).issued_supply;\n  }\n  async toObject() {\n    return {\n      collection_name: this.collection,\n      template_id: this.id,\n      schema: await (await this.schema()).toObject(),\n      immutableData: await this.immutableData(),\n      transferable: await this.isTransferable(),\n      burnable: await this.isBurnable(),\n      maxSupply: await this.maxSupply(),\n      circulation: await this.circulation()\n    };\n  }\n}\nexports.default = RpcTemplate;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Serialization_1","require","Schema_1","RpcTemplate","constructor","api","collection","id","data","schema","cache","_data","Promise","resolve","reject","queue","fetchTemplate","e","_schema","row","default","schema_name","undefined","immutableData","deserialize","immutable_serialized_data","format","isTransferable","transferable","isBurnable","burnable","maxSupply","max_supply","circulation","issued_supply","toObject","collection_name","template_id"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/API/Rpc/Template.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Serialization_1 = require(\"../../Serialization\");\nconst Schema_1 = __importDefault(require(\"./Schema\"));\nclass RpcTemplate {\n    constructor(api, collection, id, data, schema, cache = true) {\n        this.api = api;\n        this.collection = collection;\n        this.id = id;\n        this._data = new Promise(async (resolve, reject) => {\n            if (data) {\n                resolve(data);\n            }\n            else {\n                try {\n                    resolve(await api.queue.fetchTemplate(collection, id, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n        this._schema = new Promise(async (resolve, reject) => {\n            if (schema) {\n                resolve(schema);\n            }\n            else {\n                try {\n                    const row = await this._data;\n                    resolve(new Schema_1.default(this.api, collection, row.schema_name, undefined, cache));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            }\n        });\n    }\n    async schema() {\n        return await this._schema;\n    }\n    async immutableData() {\n        const schema = await this._schema;\n        return (0, Serialization_1.deserialize)((await this._data).immutable_serialized_data, await schema.format());\n    }\n    async isTransferable() {\n        return (await this._data).transferable;\n    }\n    async isBurnable() {\n        return (await this._data).burnable;\n    }\n    async maxSupply() {\n        return (await this._data).max_supply;\n    }\n    async circulation() {\n        return (await this._data).issued_supply;\n    }\n    async toObject() {\n        return {\n            collection_name: this.collection,\n            template_id: this.id,\n            schema: await (await this.schema()).toObject(),\n            immutableData: await this.immutableData(),\n            transferable: await this.isTransferable(),\n            burnable: await this.isBurnable(),\n            maxSupply: await this.maxSupply(),\n            circulation: await this.circulation()\n        };\n    }\n}\nexports.default = RpcTemplate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}