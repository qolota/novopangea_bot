{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PrivateKey = void 0;\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\nvar eosjs_key_conversions_1 = require(\"./eosjs-key-conversions\");\n/** Represents/stores a private key and provides easy conversion for use with `elliptic` lib */\nvar PrivateKey = /** @class */function () {\n  function PrivateKey(key, ec) {\n    this.key = key;\n    this.ec = ec;\n  }\n  /** Instantiate private key from an `elliptic`-format private key */\n  PrivateKey.fromElliptic = function (privKey, keyType, ec) {\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(keyType);\n    }\n    return new PrivateKey({\n      type: keyType,\n      data: privKey.getPrivate().toArrayLike(Buffer, 'be', 32)\n    }, ec);\n  };\n  /** Instantiate private key from an EOSIO-format private key */\n  PrivateKey.fromString = function (keyString, ec) {\n    var privateKey = eosjs_numeric_1.stringToPrivateKey(keyString);\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(privateKey.type);\n    }\n    return new PrivateKey(privateKey, ec);\n  };\n  /** Export private key as `elliptic`-format private key */\n  PrivateKey.prototype.toElliptic = function () {\n    return this.ec.keyFromPrivate(this.key.data);\n  };\n  PrivateKey.prototype.toLegacyString = function () {\n    return eosjs_numeric_1.privateKeyToLegacyString(this.key);\n  };\n  /** Export private key as EOSIO-format private key */\n  PrivateKey.prototype.toString = function () {\n    return eosjs_numeric_1.privateKeyToString(this.key);\n  };\n  /** Get key type from key */\n  PrivateKey.prototype.getType = function () {\n    return this.key.type;\n  };\n  /** Retrieve the public key from a private key */\n  PrivateKey.prototype.getPublicKey = function () {\n    var ellipticPrivateKey = this.toElliptic();\n    return eosjs_key_conversions_1.PublicKey.fromElliptic(ellipticPrivateKey, this.getType(), this.ec);\n  };\n  /** Sign a message or hashed message digest with private key */\n  PrivateKey.prototype.sign = function (data, shouldHash, encoding) {\n    var _this = this;\n    if (shouldHash === void 0) {\n      shouldHash = true;\n    }\n    if (encoding === void 0) {\n      encoding = 'utf8';\n    }\n    if (shouldHash) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, encoding);\n      }\n      data = this.ec.hash().update(data).digest();\n    }\n    var tries = 0;\n    var signature;\n    var isCanonical = function isCanonical(sigData) {\n      return !(sigData[1] & 0x80) && !(sigData[1] === 0 && !(sigData[2] & 0x80)) && !(sigData[33] & 0x80) && !(sigData[33] === 0 && !(sigData[34] & 0x80));\n    };\n    var constructSignature = function constructSignature(options) {\n      var ellipticPrivateKey = _this.toElliptic();\n      var ellipticSignature = ellipticPrivateKey.sign(data, options);\n      return eosjs_key_conversions_1.Signature.fromElliptic(ellipticSignature, _this.getType(), _this.ec);\n    };\n    if (this.key.type === eosjs_numeric_1.KeyType.k1) {\n      do {\n        signature = constructSignature({\n          canonical: true,\n          pers: [++tries]\n        });\n      } while (!isCanonical(signature.toBinary()));\n    } else {\n      signature = constructSignature({\n        canonical: true\n      });\n    }\n    return signature;\n  };\n  /** Validate a private key */\n  PrivateKey.prototype.isValid = function () {\n    try {\n      var ellipticPrivateKey = this.toElliptic();\n      var validationObj = ellipticPrivateKey.validate();\n      return validationObj.result;\n    } catch (_a) {\n      return false;\n    }\n  };\n  return PrivateKey;\n}();\nexports.PrivateKey = PrivateKey;","map":{"version":3,"names":["eosjs_numeric_1","require","eosjs_key_conversions_1","PrivateKey","key","ec","fromElliptic","privKey","keyType","constructElliptic","type","data","getPrivate","toArrayLike","Buffer","fromString","keyString","privateKey","stringToPrivateKey","prototype","toElliptic","keyFromPrivate","toLegacyString","privateKeyToLegacyString","toString","privateKeyToString","getType","getPublicKey","ellipticPrivateKey","PublicKey","sign","shouldHash","encoding","_this","from","hash","update","digest","tries","signature","isCanonical","sigData","constructSignature","options","ellipticSignature","Signature","KeyType","k1","canonical","pers","toBinary","isValid","validationObj","validate","result","_a","exports"],"sources":["../src/PrivateKey.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}