{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nclass RpcQueue {\n  constructor(api, requestLimit = 4) {\n    this.api = api;\n    this.requestLimit = requestLimit;\n    this.elements = [];\n    this.interval = null;\n    this.preloadedCollections = {};\n  }\n  async fetchAsset(owner, assetID, useCache = true) {\n    return await this.fetch_single_row('assets', owner, assetID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getAsset(assetID, data) : null;\n    });\n  }\n  async fetchAccountAssets(account) {\n    const rows = await this.fetch_all_rows('assets', account, 'asset_id');\n    return rows.map(asset => {\n      return this.api.cache.getAsset(asset.asset_id, asset);\n    });\n  }\n  async fetchTemplate(collectionName, templateID, useCache = true) {\n    return await this.fetch_single_row('templates', collectionName, templateID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getTemplate(collectionName, templateID, data) : null;\n    });\n  }\n  async fetchSchema(collectionName, schemaName, useCache = true) {\n    return await this.fetch_single_row('schemas', collectionName, schemaName, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getSchema(collectionName, schemaName, data) : null;\n    });\n  }\n  async fetchCollection(collectionName, useCache = true) {\n    return await this.fetch_single_row('collections', this.api.contract, collectionName, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getCollection(collectionName, data) : null;\n    });\n  }\n  async fetchCollectionSchemas(collectionName) {\n    const rows = await this.fetch_all_rows('schemas', collectionName, 'schema_name');\n    return rows.map(schema => {\n      return this.api.cache.getSchema(collectionName, schema.schema_name, schema);\n    });\n  }\n  async fetchCollectionTemplates(collectionName) {\n    const rows = await this.fetch_all_rows('templates', collectionName, 'template_id');\n    return rows.map(template => {\n      return this.api.cache.getTemplate(collectionName, String(template.template_id), template);\n    });\n  }\n  async preloadCollection(collectionName, useCache = true) {\n    if (!useCache || !this.preloadedCollections[collectionName] || this.preloadedCollections[collectionName] + 15 * 60 * 1000 < Date.now()) {\n      await this.fetchCollectionSchemas(collectionName);\n      await this.fetchCollectionTemplates(collectionName);\n    }\n  }\n  async fetchOffer(offerID, useCache = true) {\n    return await this.fetch_single_row('offers', this.api.contract, offerID, data => {\n      return useCache || typeof data !== 'undefined' ? this.api.cache.getOffer(offerID, data) : null;\n    });\n  }\n  async fetchAccountOffers(account) {\n    const rows = await Promise.all([this.fetch_all_rows('offers', this.api.contract, 'offer_sender', account, account, 2, 'name'), this.fetch_all_rows('offers', this.api.contract, 'offer_recipient', account, account, 3, 'name')]);\n    const offers = rows[0].concat(rows[1]);\n    return offers.map(offer => {\n      return this.api.cache.getOffer(offer.offer_id, offer);\n    });\n  }\n  dequeue() {\n    if (this.interval) {\n      return;\n    }\n    this.interval = setInterval(async () => {\n      if (this.elements.length > 0) {\n        this.elements.shift()();\n      } else {\n        clearInterval(this.interval);\n        this.interval = null;\n      }\n    }, Math.ceil(1000 / this.requestLimit));\n  }\n  async fetch_single_row(table, scope, match, cacheFn, indexPosition = 1, keyType = '') {\n    return new Promise((resolve, reject) => {\n      let data = cacheFn();\n      if (data !== null) {\n        return resolve(data);\n      }\n      this.elements.push(async () => {\n        data = cacheFn();\n        if (data !== null) {\n          return resolve(data);\n        }\n        try {\n          const options = {\n            code: this.api.contract,\n            table,\n            scope,\n            limit: 1,\n            lower_bound: match,\n            upper_bound: match,\n            index_position: indexPosition,\n            key_type: keyType\n          };\n          const resp = await this.api.getTableRows(options);\n          if (resp.rows.length === 0) {\n            return reject(new Error('Row not found for ' + JSON.stringify(options)));\n          }\n          return resolve(cacheFn(resp.rows[0]));\n        } catch (e) {\n          return reject(e);\n        }\n      });\n      this.dequeue();\n    });\n  }\n  async fetch_all_rows(table, scope, tableKey, lowerBound = '', upperBound = '', indexPosition = 1, keyType = '') {\n    return new Promise(async (resolve, reject) => {\n      this.elements.push(async () => {\n        const resp = await this.api.getTableRows({\n          code: this.api.contract,\n          scope,\n          table,\n          lower_bound: lowerBound,\n          upper_bound: upperBound,\n          limit: 1000,\n          index_position: indexPosition,\n          key_type: keyType\n        });\n        if (resp.more && indexPosition === 1) {\n          this.elements.unshift(async () => {\n            try {\n              const next = await this.fetch_all_rows(table, scope, tableKey, resp.rows[resp.rows.length - 1][tableKey], upperBound, indexPosition, keyType);\n              if (next.length > 0) {\n                next.shift();\n              }\n              resolve(resp.rows.concat(next));\n            } catch (e) {\n              reject(e);\n            }\n          });\n          this.dequeue();\n        } else {\n          resolve(resp.rows);\n        }\n      });\n      this.dequeue();\n    });\n  }\n}\nexports.default = RpcQueue;","map":{"version":3,"names":["Object","defineProperty","exports","value","RpcQueue","constructor","api","requestLimit","elements","interval","preloadedCollections","fetchAsset","owner","assetID","useCache","fetch_single_row","data","cache","getAsset","fetchAccountAssets","account","rows","fetch_all_rows","map","asset","asset_id","fetchTemplate","collectionName","templateID","getTemplate","fetchSchema","schemaName","getSchema","fetchCollection","contract","getCollection","fetchCollectionSchemas","schema","schema_name","fetchCollectionTemplates","template","String","template_id","preloadCollection","Date","now","fetchOffer","offerID","getOffer","fetchAccountOffers","Promise","all","offers","concat","offer","offer_id","dequeue","setInterval","length","shift","clearInterval","Math","ceil","table","scope","match","cacheFn","indexPosition","keyType","resolve","reject","push","options","code","limit","lower_bound","upper_bound","index_position","key_type","resp","getTableRows","Error","JSON","stringify","e","tableKey","lowerBound","upperBound","more","unshift","next","default"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/API/Rpc/Queue.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RpcQueue {\n    constructor(api, requestLimit = 4) {\n        this.api = api;\n        this.requestLimit = requestLimit;\n        this.elements = [];\n        this.interval = null;\n        this.preloadedCollections = {};\n    }\n    async fetchAsset(owner, assetID, useCache = true) {\n        return await this.fetch_single_row('assets', owner, assetID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getAsset(assetID, data) : null;\n        });\n    }\n    async fetchAccountAssets(account) {\n        const rows = await this.fetch_all_rows('assets', account, 'asset_id');\n        return rows.map((asset) => {\n            return this.api.cache.getAsset(asset.asset_id, asset);\n        });\n    }\n    async fetchTemplate(collectionName, templateID, useCache = true) {\n        return await this.fetch_single_row('templates', collectionName, templateID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getTemplate(collectionName, templateID, data) : null;\n        });\n    }\n    async fetchSchema(collectionName, schemaName, useCache = true) {\n        return await this.fetch_single_row('schemas', collectionName, schemaName, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getSchema(collectionName, schemaName, data) : null;\n        });\n    }\n    async fetchCollection(collectionName, useCache = true) {\n        return await this.fetch_single_row('collections', this.api.contract, collectionName, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getCollection(collectionName, data) : null;\n        });\n    }\n    async fetchCollectionSchemas(collectionName) {\n        const rows = await this.fetch_all_rows('schemas', collectionName, 'schema_name');\n        return rows.map((schema) => {\n            return this.api.cache.getSchema(collectionName, schema.schema_name, schema);\n        });\n    }\n    async fetchCollectionTemplates(collectionName) {\n        const rows = await this.fetch_all_rows('templates', collectionName, 'template_id');\n        return rows.map((template) => {\n            return this.api.cache.getTemplate(collectionName, String(template.template_id), template);\n        });\n    }\n    async preloadCollection(collectionName, useCache = true) {\n        if (!useCache || !this.preloadedCollections[collectionName] || this.preloadedCollections[collectionName] + 15 * 60 * 1000 < Date.now()) {\n            await this.fetchCollectionSchemas(collectionName);\n            await this.fetchCollectionTemplates(collectionName);\n        }\n    }\n    async fetchOffer(offerID, useCache = true) {\n        return await this.fetch_single_row('offers', this.api.contract, offerID, (data) => {\n            return (useCache || typeof data !== 'undefined') ? this.api.cache.getOffer(offerID, data) : null;\n        });\n    }\n    async fetchAccountOffers(account) {\n        const rows = await Promise.all([\n            this.fetch_all_rows('offers', this.api.contract, 'offer_sender', account, account, 2, 'name'),\n            this.fetch_all_rows('offers', this.api.contract, 'offer_recipient', account, account, 3, 'name')\n        ]);\n        const offers = rows[0].concat(rows[1]);\n        return offers.map((offer) => {\n            return this.api.cache.getOffer(offer.offer_id, offer);\n        });\n    }\n    dequeue() {\n        if (this.interval) {\n            return;\n        }\n        this.interval = setInterval(async () => {\n            if (this.elements.length > 0) {\n                this.elements.shift()();\n            }\n            else {\n                clearInterval(this.interval);\n                this.interval = null;\n            }\n        }, Math.ceil(1000 / this.requestLimit));\n    }\n    async fetch_single_row(table, scope, match, cacheFn, indexPosition = 1, keyType = '') {\n        return new Promise((resolve, reject) => {\n            let data = cacheFn();\n            if (data !== null) {\n                return resolve(data);\n            }\n            this.elements.push(async () => {\n                data = cacheFn();\n                if (data !== null) {\n                    return resolve(data);\n                }\n                try {\n                    const options = {\n                        code: this.api.contract, table, scope,\n                        limit: 1, lower_bound: match, upper_bound: match,\n                        index_position: indexPosition, key_type: keyType\n                    };\n                    const resp = await this.api.getTableRows(options);\n                    if (resp.rows.length === 0) {\n                        return reject(new Error('Row not found for ' + JSON.stringify(options)));\n                    }\n                    return resolve(cacheFn(resp.rows[0]));\n                }\n                catch (e) {\n                    return reject(e);\n                }\n            });\n            this.dequeue();\n        });\n    }\n    async fetch_all_rows(table, scope, tableKey, lowerBound = '', upperBound = '', indexPosition = 1, keyType = '') {\n        return new Promise(async (resolve, reject) => {\n            this.elements.push(async () => {\n                const resp = await this.api.getTableRows({\n                    code: this.api.contract, scope, table,\n                    lower_bound: lowerBound, upper_bound: upperBound, limit: 1000,\n                    index_position: indexPosition, key_type: keyType\n                });\n                if (resp.more && indexPosition === 1) {\n                    this.elements.unshift(async () => {\n                        try {\n                            const next = await this.fetch_all_rows(table, scope, tableKey, resp.rows[resp.rows.length - 1][tableKey], upperBound, indexPosition, keyType);\n                            if (next.length > 0) {\n                                next.shift();\n                            }\n                            resolve(resp.rows.concat(next));\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                    });\n                    this.dequeue();\n                }\n                else {\n                    resolve(resp.rows);\n                }\n            });\n            this.dequeue();\n        });\n    }\n}\nexports.default = RpcQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}