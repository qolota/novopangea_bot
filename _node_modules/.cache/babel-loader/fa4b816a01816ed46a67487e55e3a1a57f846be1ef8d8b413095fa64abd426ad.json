{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst FixedParser_1 = __importDefault(require(\"./FixedParser\"));\nclass FixedIntegerParser extends FixedParser_1.default {\n  deserialize(state) {\n    const data = super.deserialize(state).reverse();\n    let n = (0, big_integer_1.default)(0);\n    for (const byte of data) {\n      n = n.shiftLeft(8);\n      n = n.plus(byte);\n    }\n    if (this.size <= 6) {\n      return n.toJSNumber();\n    }\n    return n.toString();\n  }\n  serialize(data) {\n    let n = (0, big_integer_1.default)(data);\n    const buffer = [];\n    for (let i = 0; i < this.size; i++) {\n      buffer.push(n.and(0xFF).toJSNumber());\n      n = n.shiftRight(8);\n    }\n    return super.serialize(new Uint8Array(buffer));\n  }\n}\nexports.default = FixedIntegerParser;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","big_integer_1","require","FixedParser_1","FixedIntegerParser","default","deserialize","state","data","reverse","n","byte","shiftLeft","plus","size","toJSNumber","toString","serialize","buffer","i","push","and","shiftRight","Uint8Array"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/Serialization/TypeParser/FixedIntegerParser.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst FixedParser_1 = __importDefault(require(\"./FixedParser\"));\nclass FixedIntegerParser extends FixedParser_1.default {\n    deserialize(state) {\n        const data = super.deserialize(state).reverse();\n        let n = (0, big_integer_1.default)(0);\n        for (const byte of data) {\n            n = n.shiftLeft(8);\n            n = n.plus(byte);\n        }\n        if (this.size <= 6) {\n            return n.toJSNumber();\n        }\n        return n.toString();\n    }\n    serialize(data) {\n        let n = (0, big_integer_1.default)(data);\n        const buffer = [];\n        for (let i = 0; i < this.size; i++) {\n            buffer.push(n.and(0xFF).toJSNumber());\n            n = n.shiftRight(8);\n        }\n        return super.serialize(new Uint8Array(buffer));\n    }\n}\nexports.default = FixedIntegerParser;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,aAAa,GAAGP,eAAe,CAACQ,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7D,MAAMC,aAAa,GAAGT,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/D,MAAME,kBAAkB,SAASD,aAAa,CAACE,OAAO,CAAC;EACnDC,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMC,IAAI,GAAG,KAAK,CAACF,WAAW,CAACC,KAAK,CAAC,CAACE,OAAO,CAAC,CAAC;IAC/C,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAET,aAAa,CAACI,OAAO,EAAE,CAAC,CAAC;IACrC,KAAK,MAAMM,IAAI,IAAIH,IAAI,EAAE;MACrBE,CAAC,GAAGA,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;MAClBF,CAAC,GAAGA,CAAC,CAACG,IAAI,CAACF,IAAI,CAAC;IACpB;IACA,IAAI,IAAI,CAACG,IAAI,IAAI,CAAC,EAAE;MAChB,OAAOJ,CAAC,CAACK,UAAU,CAAC,CAAC;IACzB;IACA,OAAOL,CAAC,CAACM,QAAQ,CAAC,CAAC;EACvB;EACAC,SAASA,CAACT,IAAI,EAAE;IACZ,IAAIE,CAAC,GAAG,CAAC,CAAC,EAAET,aAAa,CAACI,OAAO,EAAEG,IAAI,CAAC;IACxC,MAAMU,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,IAAI,EAAEK,CAAC,EAAE,EAAE;MAChCD,MAAM,CAACE,IAAI,CAACV,CAAC,CAACW,GAAG,CAAC,IAAI,CAAC,CAACN,UAAU,CAAC,CAAC,CAAC;MACrCL,CAAC,GAAGA,CAAC,CAACY,UAAU,CAAC,CAAC,CAAC;IACvB;IACA,OAAO,KAAK,CAACL,SAAS,CAAC,IAAIM,UAAU,CAACL,MAAM,CAAC,CAAC;EAClD;AACJ;AACAnB,OAAO,CAACM,OAAO,GAAGD,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}