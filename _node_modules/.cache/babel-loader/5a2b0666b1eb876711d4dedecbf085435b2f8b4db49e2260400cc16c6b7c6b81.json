{"ast":null,"code":"const _ = require('lodash');\nconst fetchAssets = require('../atomicassets/api/fetchAssets');\nconst fetchSampleAsset = require('../atomicassets/api/fetchSampleAsset');\nconst fetchAccountTokens = require('./api/fetchAccountTokens');\nconst fetchQueueV2Fast = require('./api/fetchQueueV2Fast');\nconst joinRaceV2 = require('./actions/joinRaceV2');\nconst RARITY_LEVELS = require('./consts/RARITY_LEVELS');\nconst fetchVehicleToMark = require('./api/fetchVehicleToMark');\nconst fetchLastWeekWinRaces = require('./api/fetchLastWeekWinRaces');\nconst fetchAccountAssetsWaxData = require('../atomicassets/api/fetchAccountAssetsWaxData');\nconst isDeathRallyPreparationTime = require('./utils/isDeathRallyPreparationTime');\nconst QUALITY_TOKENS = require('./consts/QUALITY_TOKENS');\nconst GEAR_PRICE = require('./consts/GEAR_PRICE');\nconst PROMOTION_POINTS_LIMITS = require('./consts/PROMOTION_POINTS_LIMITS');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst GAME_VALUES = require('./consts/GAME_VALUES');\nconst findCombinationAsset = ({\n  gear,\n  raceQuality,\n  allowedIDs,\n  allowedAssetNames,\n  allowedRarities,\n  allowedQualities,\n  allowedMarks,\n  seekPromo,\n  isRandom,\n  isTT,\n  assets,\n  queuedAssetIds,\n  winAssetIds\n}) => {\n  // searching by asset ID ignoring all other checks\n\n  let _assets = assets;\n\n  // filter out all assets which were used last day\n  if (gear === 0) {\n    _assets = _(assets).filter(asset => {\n      if (asset.lastFreeRaceDate == null) {\n        return true;\n      }\n      if (Date.now() / 1000 > asset.lastFreeRaceDate + GAME_VALUES.DAY) {\n        return true;\n      }\n      if (asset.freeRacesCounter < GAME_VALUES.FREE_RACES_PER_DAY) {\n        return true;\n      }\n      return false;\n    }).value();\n  }\n  if (allowedIDs != null) {\n    const qualifiedAssets = _(_assets).filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null).filter(asset => allowedIDs.includes(asset.id)).value();\n    if (qualifiedAssets.length === 0) {\n      return null;\n    }\n    return qualifiedAssets[0];\n  }\n\n  // searching for not promo seekers\n  if (!seekPromo) {\n    const qualifiedAssets = _(_assets).filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null).filter(asset => {\n      if (!isTT) {\n        return true;\n      }\n      return winAssetIds.find(wAssetId => wAssetId === asset.id) == null;\n    }).filter(asset => {\n      if (allowedAssetNames == null) {\n        return true;\n      }\n      return allowedAssetNames.includes(asset.name);\n    }).filter(asset => {\n      if (allowedRarities == null) {\n        return true;\n      }\n      return allowedRarities.includes(asset.rarity);\n    }).filter(asset => {\n      if (allowedMarks == null) {\n        return true;\n      }\n      return allowedMarks.includes(asset.mark);\n    }).filter(asset => {\n      if (allowedQualities == null) {\n        return true;\n      }\n      return allowedQualities.includes(asset.quality);\n    }).sortBy(asset => {\n      const qualityIndex = asset.quality === raceQuality ? 1000000 : 0;\n      const rarityIndex = RARITY_LEVELS[asset.rarity] * 100000;\n      return -(qualityIndex + rarityIndex + asset.promotionPoints);\n    }).value();\n    if (qualifiedAssets.length === 0) {\n      return null;\n    }\n    if (isRandom) {\n      return _.sample(qualifiedAssets);\n    }\n    return qualifiedAssets[0];\n  }\n  const qualifiedAssetsByRarity = _(_assets).filter(asset => asset.quality === raceQuality).filter(asset => {\n    if (allowedAssetNames == null) {\n      return true;\n    }\n    return allowedAssetNames.includes(asset.name);\n  }).filter(asset => {\n    if (allowedRarities == null) {\n      return true;\n    }\n    return allowedRarities.includes(asset.rarity);\n  }).filter(asset => {\n    if (allowedMarks == null) {\n      return true;\n    }\n    return allowedMarks.includes(asset.mark);\n  }).groupBy(asset => asset.rarity).map((assets, rarity) => {\n    const numPromotions = _.ceil(assets.length / GAME_VALUES.NUM_ASSETS_FOR_PROMO);\n    return {\n      rarity,\n      numPromotions,\n      assets: _(assets).sortBy(asset => -asset.promotionPoints).slice(0, numPromotions).filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null).filter(asset => asset.promotionPoints < PROMOTION_POINTS_LIMITS[raceQuality]).value()\n    };\n  }).reduce((groups, group) => {\n    groups[group.rarity] = group.assets;\n    return groups;\n  }, {});\n  if (allowedRarities != null) {\n    for (let i = 0; i < allowedRarities.length; i++) {\n      const nextRarity = allowedRarities[i];\n      const qualifiedAssets = qualifiedAssetsByRarity[nextRarity];\n      if (qualifiedAssets == null) {\n        continue;\n      }\n      if (qualifiedAssets.length === 0) {\n        continue;\n      }\n      return qualifiedAssets[0];\n    }\n  }\n  return null;\n};\nconst findCombination = ({\n  vehicles,\n  drivers,\n  allowedCombinations,\n  accountTokens,\n  winVehicleIds,\n  queuedDriverIds,\n  queuedVehicleIds\n}) => {\n  const sufficientCombinations = _(allowedCombinations).map(combinations => {\n    return _(combinations).filter(combination => {\n      const token = accountTokens.find(token => token.tokenName === combination.fuelToken);\n      if (combination.fuelPrice === 0) {\n        return true;\n      }\n      if (token == null) {\n        return false;\n      }\n      return token.amount >= combination.fuelPrice;\n    }).value();\n  }).filter(combinations => {\n    return combinations.length > 0;\n  }).value();\n  if (sufficientCombinations.length === 0) {\n    return {\n      action: 'wait',\n      message: '!!! No fuel !!!'\n    };\n  }\n  const combinations = _(sufficientCombinations).map(combinations => {\n    return _(combinations).map(combination => {\n      const vehicle = findCombinationAsset({\n        ...combination.vehicle,\n        gear: combination.gear,\n        raceQuality: combination.raceQuality,\n        assets: vehicles,\n        queuedAssetIds: queuedVehicleIds,\n        winAssetIds: winVehicleIds\n      });\n      if (vehicle == null) {\n        return null;\n      }\n      const firstDriver = findCombinationAsset({\n        ...combination.drivers[0],\n        gear: combination.gear,\n        raceQuality: combination.raceQuality,\n        assets: drivers,\n        queuedAssetIds: queuedDriverIds\n      });\n      if (firstDriver == null) {\n        return null;\n      }\n      const secondDriver = findCombinationAsset({\n        ...combination.drivers[1],\n        gear: combination.gear,\n        raceQuality: combination.raceQuality,\n        assets: drivers,\n        queuedAssetIds: queuedDriverIds\n      });\n      if (secondDriver == null) {\n        return null;\n      }\n      return {\n        vehicle,\n        drivers: [firstDriver, secondDriver],\n        gear: combination.gear,\n        raceQuality: combination.raceQuality,\n        useBoost: combination.useBoost || false,\n        combination\n      };\n    }).compact().sample();\n  }).compact().value();\n  if (combinations.length === 0) {\n    if (queuedDriverIds.length > 0) {\n      return {\n        action: 'wait',\n        message: 'Teams queued'\n      };\n    }\n    return {\n      action: 'wait',\n      message: '!!! No combinations. Please add more combinations !!!'\n    };\n  }\n  return {\n    action: 'join',\n    combination: combinations[0]\n  };\n};\nconst joinRaceCalcNextActionV2 = async ({\n  accountName\n}) => {\n  const allowedCombinations = _(ACCOUNT_CAPABILITIES[accountName].novarally_race_combinations() || []).map(combination => {\n    let combinations;\n    if (Array.isArray(combination)) {\n      combinations = combination;\n    } else {\n      combinations = [combination];\n    }\n    return _(combinations).map(combination => ({\n      ...combination,\n      fuelToken: QUALITY_TOKENS[combination.raceQuality],\n      fuelPrice: combination.gear === 0 ? 0 : GEAR_PRICE[combination.raceQuality][combination.gear - 1]\n    })).value();\n  }).value();\n  const vehicleToMark = await fetchVehicleToMark();\n  const {\n    requests: queueRequests\n  } = await fetchQueueV2Fast();\n  const queuedDriverIds = _(queueRequests).filter(request => request.player === accountName).map(request => request.driverIds).flatten().value();\n  const queuedVehicleIds = _(queueRequests).filter(request => request.player === accountName).map(request => request.vehicleId).flatten().value();\n  if (queuedVehicleIds.length === GAME_VALUES.MAX_NUM_RACES) {\n    return {\n      action: 'wait',\n      message: `${GAME_VALUES.MAX_NUM_RACES} teams limit`\n    };\n  }\n  let {\n    drivers,\n    vehicles,\n    boosts\n  } = await fetchAccountAssetsWaxData({\n    accountName,\n    assetParams: [{\n      key: 'drivers',\n      params: {\n        collectionName: 'novarallywax',\n        schemaName: 'drivers'\n      },\n      customProcessor: ({\n        asset\n      }) => ({\n        rarity: asset.params.Rarity,\n        quality: asset.params.Quality,\n        promotionPoints: asset.params[\"Promotion Points\"] == null ? 0 : Number(asset.params[\"Promotion Points\"]),\n        isAvailableForDR: asset.params['Available for Death Rally'] === '1' ? true : false\n      })\n    }, {\n      key: 'vehicles',\n      params: {\n        collectionName: 'novarallywax',\n        schemaName: 'vehicles'\n      },\n      customProcessor: ({\n        asset\n      }) => ({\n        rarity: asset.params.Rarity,\n        quality: asset.params.Quality,\n        mark: vehicleToMark[asset.params.name],\n        promotionPoints: asset.params[\"Promotion Points\"] == null ? 0 : Number(asset.params[\"Promotion Points\"]),\n        freeRacesCounter: asset.params['Free Races Counter'] == null ? 0 : Number(asset.params['Free Races Counter']),\n        lastFreeRaceDate: asset.params['Last Free Race Date'] == null ? 0 : Number(asset.params['Last Free Race Date']),\n        isDamaged: asset.params['Damaged'] === '1' ? true : false,\n        isAvailableForDR: asset.params['Available for Death Rally'] === '1' ? true : false\n      })\n    }, {\n      key: 'boosts',\n      params: {\n        collectionName: 'novarallywax',\n        schemaName: 'boost'\n      }\n    }]\n  });\n  vehicles = _(vehicles).filter(vehicle => !vehicle.isDamaged).value();\n\n  // turn on this check when you start using ROKIE CLASSIC cars again\n  // don't use classic cars when it's DR time\n  // if (isDeathRallyPreparationTime()) {\n  //     console.log('DR time!!!!');\n  //     vehicles = _(vehicles)\n  //         .filter(vehicle => vehicle.rarity !== 'Classic')\n  //         .value();\n  // }\n\n  // Time Trail challenge was canceled\n  // uncomment when you need filtering out winning combinations\n  // const winVehicleIds = _(await fetchLastWeekWinRaces({\n  //     winnerAccountName: accountName,\n  // }))\n  //     .map(race => race.vehicleAssetId)\n  //     .uniqBy()\n  //     .value();\n  // console.log('Number of won vehicles this week:', winVehicleIds.length);\n\n  const accountTokens = await fetchAccountTokens({\n    accountName\n  });\n  const nextCombinations = [];\n  while (true) {\n    const nextSignal = findCombination({\n      vehicles,\n      drivers,\n      allowedCombinations,\n      accountTokens,\n      winVehicleIds: [],\n      queuedDriverIds,\n      queuedVehicleIds\n    });\n    if (nextSignal.action === 'wait') {\n      break;\n    }\n    const nextCombination = nextSignal.combination;\n    nextCombinations.push(nextCombination);\n    accountTokens.find(token => token.tokenName === nextCombination.combination.fuelToken).amount -= nextCombination.combination.fuelPrice;\n    vehicles = _(vehicles).filter(vehicle => vehicle.id !== nextCombination.vehicle.id).value();\n    drivers = _(drivers).filter(driver => !nextCombination.drivers.find(nextDriver => nextDriver.id === driver.id)).value();\n\n    // if in total with new combination there are more than 15 teams, stop searching new teams\n    if (nextCombinations.length + queuedVehicleIds.length === GAME_VALUES.MAX_NUM_RACES) {\n      break;\n    }\n  }\n  if (nextCombinations.length === 0) {\n    return {\n      action: 'wait',\n      message: 'no combinations'\n    };\n  }\n  return {\n    action: 'join_race',\n    actions: _(nextCombinations).map(nextCombination => joinRaceV2({\n      accountName,\n      vehicleId: nextCombination.vehicle.id,\n      driverIds: _.map(nextCombination.drivers, driver => driver.id),\n      gear: nextCombination.gear,\n      raceQuality: nextCombination.raceQuality,\n      useBoost: nextCombination.useBoost,\n      boost: _.sample(boosts)\n    })).flatten().value()\n  };\n};\nmodule.exports = joinRaceCalcNextActionV2;","map":{"version":3,"names":["_","require","fetchAssets","fetchSampleAsset","fetchAccountTokens","fetchQueueV2Fast","joinRaceV2","RARITY_LEVELS","fetchVehicleToMark","fetchLastWeekWinRaces","fetchAccountAssetsWaxData","isDeathRallyPreparationTime","QUALITY_TOKENS","GEAR_PRICE","PROMOTION_POINTS_LIMITS","ACCOUNT_CAPABILITIES","GAME_VALUES","findCombinationAsset","gear","raceQuality","allowedIDs","allowedAssetNames","allowedRarities","allowedQualities","allowedMarks","seekPromo","isRandom","isTT","assets","queuedAssetIds","winAssetIds","_assets","filter","asset","lastFreeRaceDate","Date","now","DAY","freeRacesCounter","FREE_RACES_PER_DAY","value","qualifiedAssets","find","qAssetId","id","includes","length","wAssetId","name","rarity","mark","quality","sortBy","qualityIndex","rarityIndex","promotionPoints","sample","qualifiedAssetsByRarity","groupBy","map","numPromotions","ceil","NUM_ASSETS_FOR_PROMO","slice","reduce","groups","group","i","nextRarity","findCombination","vehicles","drivers","allowedCombinations","accountTokens","winVehicleIds","queuedDriverIds","queuedVehicleIds","sufficientCombinations","combinations","combination","token","tokenName","fuelToken","fuelPrice","amount","action","message","vehicle","firstDriver","secondDriver","useBoost","compact","joinRaceCalcNextActionV2","accountName","novarally_race_combinations","Array","isArray","vehicleToMark","requests","queueRequests","request","player","driverIds","flatten","vehicleId","MAX_NUM_RACES","boosts","assetParams","key","params","collectionName","schemaName","customProcessor","Rarity","Quality","Number","isAvailableForDR","isDamaged","nextCombinations","nextSignal","nextCombination","push","driver","nextDriver","actions","boost","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novarallywax/joinRaceCalcNextActionV2.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAssets = require('../atomicassets/api/fetchAssets');\nconst fetchSampleAsset = require('../atomicassets/api/fetchSampleAsset');\nconst fetchAccountTokens = require('./api/fetchAccountTokens');\nconst fetchQueueV2Fast = require('./api/fetchQueueV2Fast');\nconst joinRaceV2 = require('./actions/joinRaceV2');\nconst RARITY_LEVELS = require('./consts/RARITY_LEVELS');\nconst fetchVehicleToMark = require('./api/fetchVehicleToMark');\nconst fetchLastWeekWinRaces = require('./api/fetchLastWeekWinRaces');\nconst fetchAccountAssetsWaxData = require('../atomicassets/api/fetchAccountAssetsWaxData');\nconst isDeathRallyPreparationTime = require('./utils/isDeathRallyPreparationTime');\nconst QUALITY_TOKENS = require('./consts/QUALITY_TOKENS');\nconst GEAR_PRICE = require('./consts/GEAR_PRICE');\nconst PROMOTION_POINTS_LIMITS = require('./consts/PROMOTION_POINTS_LIMITS');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst GAME_VALUES = require('./consts/GAME_VALUES');\n\nconst findCombinationAsset = ({\n    gear,\n    raceQuality,\n    allowedIDs,\n    allowedAssetNames,\n    allowedRarities,\n    allowedQualities,\n    allowedMarks,\n    seekPromo,\n    isRandom,\n    isTT,\n    assets,\n    queuedAssetIds,\n    winAssetIds,\n}) => {\n    // searching by asset ID ignoring all other checks\n\n    let _assets = assets;\n\n    // filter out all assets which were used last day\n    if (gear === 0) {\n        _assets = _(assets)\n            .filter(asset => {\n                if (asset.lastFreeRaceDate == null) {\n                    return true;\n                }\n\n                if ((Date.now() / 1000) > asset.lastFreeRaceDate + GAME_VALUES.DAY) {\n                    return true;\n                }\n\n                if (asset.freeRacesCounter < GAME_VALUES.FREE_RACES_PER_DAY) {\n                    return true;\n                }\n\n                return false;\n            })\n            .value();\n    }\n\n    if (allowedIDs != null) {\n        const qualifiedAssets = _(_assets)\n            .filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null)\n            .filter(asset => allowedIDs.includes(asset.id))\n            .value();\n        \n        if (qualifiedAssets.length === 0) {\n            return null;\n        }\n\n        return qualifiedAssets[0];\n    }\n\n    // searching for not promo seekers\n    if (!seekPromo) {\n        const qualifiedAssets = _(_assets)\n            .filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null)\n            .filter(asset => {\n                if (!isTT) {\n                    return true;\n                }\n\n                return winAssetIds.find(wAssetId => wAssetId === asset.id) == null;\n            })\n            .filter(asset => {\n                if (allowedAssetNames == null) {\n                    return true;\n                }\n\n                return allowedAssetNames.includes(asset.name);\n            })\n            .filter(asset => {\n                if (allowedRarities == null) {\n                    return true;\n                }\n\n                return allowedRarities.includes(asset.rarity);\n            })\n            .filter(asset => {\n                if (allowedMarks == null) {\n                    return true;\n                }\n\n                return allowedMarks.includes(asset.mark);\n            })\n            .filter(asset => {\n                if (allowedQualities == null) {\n                    return true;\n                }\n\n                return allowedQualities.includes(asset.quality);\n            })\n            .sortBy(asset => {\n                const qualityIndex = asset.quality === raceQuality\n                    ? 1000000\n                    : 0;\n                const rarityIndex = RARITY_LEVELS[asset.rarity] * 100000;\n\n                return -(qualityIndex + rarityIndex + asset.promotionPoints);\n            })\n            .value();\n        \n        if (qualifiedAssets.length === 0) {\n            return null;\n        }\n\n        if (isRandom) {\n            return _.sample(qualifiedAssets);\n        }\n\n        return qualifiedAssets[0];\n    }\n\n    const qualifiedAssetsByRarity = _(_assets)\n        .filter(asset => asset.quality === raceQuality)\n        .filter(asset => {\n            if (allowedAssetNames == null) {\n                return true;\n            }\n\n            return allowedAssetNames.includes(asset.name);\n        })\n        .filter(asset => {\n            if (allowedRarities == null) {\n                return true;\n            }\n\n            return allowedRarities.includes(asset.rarity);\n        })\n        .filter(asset => {\n            if (allowedMarks == null) {\n                return true;\n            }\n\n            return allowedMarks.includes(asset.mark);\n        })\n        .groupBy(asset => asset.rarity)\n        .map((assets, rarity) => {\n            const numPromotions = _.ceil(assets.length / GAME_VALUES.NUM_ASSETS_FOR_PROMO);\n\n            return {\n                rarity,\n                numPromotions,\n                assets: _(assets)\n                    .sortBy(asset => -asset.promotionPoints)\n                    .slice(0, numPromotions)\n                    .filter(asset => queuedAssetIds.find(qAssetId => qAssetId === asset.id) == null)\n                    .filter(asset => asset.promotionPoints < PROMOTION_POINTS_LIMITS[raceQuality])\n                    .value(),\n            };\n        })\n        .reduce((groups, group) => {\n            groups[group.rarity] = group.assets;\n            return groups;\n        }, {});\n\n    if (allowedRarities != null) {\n        for (let i = 0; i < allowedRarities.length; i++) {\n            const nextRarity = allowedRarities[i];\n            const qualifiedAssets = qualifiedAssetsByRarity[nextRarity];\n    \n            if (qualifiedAssets == null) {\n                continue;\n            }\n    \n            if (qualifiedAssets.length === 0) {\n                continue;\n            }\n    \n            return qualifiedAssets[0];\n        }\n    }\n\n    return null;\n};\n\nconst findCombination = ({\n    vehicles,\n    drivers,\n    allowedCombinations,\n    accountTokens,\n    winVehicleIds,\n    queuedDriverIds,\n    queuedVehicleIds,\n}) => {\n    const sufficientCombinations = _(allowedCombinations)\n        .map(combinations => {\n            return _(combinations)\n                .filter(combination => {\n                    const token = accountTokens.find(token => token.tokenName === combination.fuelToken);\n\n                    if (combination.fuelPrice === 0) {\n                        return true;\n                    }\n\n                    if (token == null) {\n                        return false;\n                    }\n\n                    return token.amount >= combination.fuelPrice;\n                })\n                .value();\n        })\n        .filter(combinations => {\n            return combinations.length > 0;\n        })\n        .value();\n\n    if (sufficientCombinations.length === 0) {\n        return {\n            action: 'wait',\n            message: '!!! No fuel !!!',\n        };\n    }\n    \n    const combinations = _(sufficientCombinations)\n        .map(combinations => {\n            return _(combinations)\n                .map((combination) => {\n                    const vehicle = findCombinationAsset({\n                        ...combination.vehicle,\n                        gear: combination.gear,\n                        raceQuality: combination.raceQuality,\n                        assets: vehicles,\n                        queuedAssetIds: queuedVehicleIds,\n                        winAssetIds: winVehicleIds,\n                    });\n        \n                    if (vehicle == null) {\n                        return null;\n                    }\n        \n                    const firstDriver = findCombinationAsset({\n                        ...combination.drivers[0],\n                        gear: combination.gear,\n                        raceQuality: combination.raceQuality,\n                        assets: drivers,\n                        queuedAssetIds: queuedDriverIds,\n                    });\n        \n                    if (firstDriver == null) {\n                        return null;\n                    }\n        \n                    const secondDriver = findCombinationAsset({\n                        ...combination.drivers[1],\n                        gear: combination.gear,\n                        raceQuality: combination.raceQuality,\n                        assets: drivers,\n                        queuedAssetIds: queuedDriverIds,\n                    });\n        \n                    if (secondDriver == null) {\n                        return null;\n                    }\n        \n                    return {\n                        vehicle,\n                        drivers: [firstDriver, secondDriver],\n                        gear: combination.gear,\n                        raceQuality: combination.raceQuality,\n                        useBoost: combination.useBoost || false,\n                        combination,\n                    };\n                })\n                .compact()\n                .sample();\n        })\n        .compact()\n        .value();\n    \n    if (combinations.length === 0) {\n        if (queuedDriverIds.length > 0) {\n            return {\n                action: 'wait',\n                message: 'Teams queued',\n            };\n        }\n\n        return {\n            action: 'wait',\n            message: '!!! No combinations. Please add more combinations !!!',\n        };\n    }\n\n    return {\n        action: 'join',\n        combination: combinations[0],\n    };\n};\n\n\nconst joinRaceCalcNextActionV2 = async ({\n    accountName,\n}) => {\n    const allowedCombinations = _(ACCOUNT_CAPABILITIES[accountName].novarally_race_combinations() || [])\n        .map(combination => {\n            let combinations;\n            if (Array.isArray(combination)) {\n                combinations = combination;\n            } else {\n                combinations = [combination];\n            }\n\n            return _(combinations)\n                .map(combination => ({\n                    ...combination,\n                    fuelToken: QUALITY_TOKENS[combination.raceQuality],\n                    fuelPrice: combination.gear === 0\n                        ? 0\n                        : GEAR_PRICE[combination.raceQuality][combination.gear - 1],\n                }))\n                .value();\n        })\n        .value();\n    const vehicleToMark = await fetchVehicleToMark();\n    const {\n        requests: queueRequests,\n    } = await fetchQueueV2Fast();\n    const queuedDriverIds = _(queueRequests)\n        .filter(request => request.player === accountName)\n        .map(request => request.driverIds)\n        .flatten()\n        .value();\n    const queuedVehicleIds = _(queueRequests)\n        .filter(request => request.player === accountName)\n        .map(request => request.vehicleId)\n        .flatten()\n        .value();\n\n    if (queuedVehicleIds.length === GAME_VALUES.MAX_NUM_RACES) {\n        return {\n            action: 'wait',\n            message: `${GAME_VALUES.MAX_NUM_RACES} teams limit`,\n        };\n    }\n\n    let {\n        drivers,\n        vehicles,\n        boosts,\n    } = await fetchAccountAssetsWaxData({\n        accountName,\n        assetParams: [\n            {\n                key: 'drivers',\n                params: {\n                    collectionName: 'novarallywax',\n                    schemaName: 'drivers',\n                },\n                customProcessor: ({asset}) => ({\n                    rarity: asset.params.Rarity,\n                    quality: asset.params.Quality,\n                    promotionPoints: asset.params[\"Promotion Points\"] == null\n                        ? 0\n                        : Number(asset.params[\"Promotion Points\"]),\n                    isAvailableForDR: asset.params['Available for Death Rally'] === '1'\n                        ? true\n                        : false,\n                }),\n            },\n            {\n                key: 'vehicles',\n                params: {\n                    collectionName: 'novarallywax',\n                    schemaName: 'vehicles',\n                },\n                customProcessor: ({asset}) => ({\n                    rarity: asset.params.Rarity,\n                    quality: asset.params.Quality,\n                    mark: vehicleToMark[asset.params.name],\n                    promotionPoints: asset.params[\"Promotion Points\"] == null\n                        ? 0\n                        : Number(asset.params[\"Promotion Points\"]),\n                    freeRacesCounter: asset.params['Free Races Counter'] == null\n                        ? 0\n                        : Number(asset.params['Free Races Counter']),\n                    lastFreeRaceDate: asset.params['Last Free Race Date'] == null\n                        ? 0\n                        : Number(asset.params['Last Free Race Date']),\n                    isDamaged: asset.params['Damaged'] === '1'\n                        ? true\n                        : false,\n                    isAvailableForDR: asset.params['Available for Death Rally'] === '1'\n                        ? true\n                        : false,\n                }),\n            },\n            {\n                key: 'boosts',\n                params: {\n                    collectionName: 'novarallywax',\n                    schemaName: 'boost',\n                },\n            },\n        ],\n    });\n    vehicles = _(vehicles)\n        .filter(vehicle => !vehicle.isDamaged)\n        .value();\n\n    // turn on this check when you start using ROKIE CLASSIC cars again\n    // don't use classic cars when it's DR time\n    // if (isDeathRallyPreparationTime()) {\n    //     console.log('DR time!!!!');\n    //     vehicles = _(vehicles)\n    //         .filter(vehicle => vehicle.rarity !== 'Classic')\n    //         .value();\n    // }\n\n    // Time Trail challenge was canceled\n    // uncomment when you need filtering out winning combinations\n    // const winVehicleIds = _(await fetchLastWeekWinRaces({\n    //     winnerAccountName: accountName,\n    // }))\n    //     .map(race => race.vehicleAssetId)\n    //     .uniqBy()\n    //     .value();\n    // console.log('Number of won vehicles this week:', winVehicleIds.length);\n    \n    const accountTokens = await fetchAccountTokens({accountName});\n    const nextCombinations = [];\n    \n    while (true) {\n        const nextSignal = findCombination({\n            vehicles,\n            drivers,\n            allowedCombinations,\n            accountTokens,\n            winVehicleIds: [],\n            queuedDriverIds,\n            queuedVehicleIds,\n        });\n    \n        if (nextSignal.action === 'wait') {\n            break;\n        }\n        const nextCombination = nextSignal.combination;\n        nextCombinations.push(nextCombination);\n\n        accountTokens.find(token => token.tokenName === nextCombination.combination.fuelToken).amount -= nextCombination.combination.fuelPrice;\n        vehicles = _(vehicles)\n            .filter(vehicle => vehicle.id !== nextCombination.vehicle.id)\n            .value();\n        drivers = _(drivers)\n            .filter(driver => !nextCombination.drivers.find(nextDriver => nextDriver.id === driver.id))\n            .value();\n\n        // if in total with new combination there are more than 15 teams, stop searching new teams\n        if ((nextCombinations.length + queuedVehicleIds.length) === GAME_VALUES.MAX_NUM_RACES) {\n            break;\n        }\n    }\n\n    if (nextCombinations.length === 0) {\n        return {\n            action: 'wait',\n            message: 'no combinations',\n        };\n    }\n\n    return {\n        action: 'join_race',\n        actions: _(nextCombinations)\n            .map(nextCombination => joinRaceV2({\n                accountName,\n                vehicleId: nextCombination.vehicle.id,\n                driverIds: _.map(nextCombination.drivers, driver => driver.id),\n                gear: nextCombination.gear,\n                raceQuality: nextCombination.raceQuality,\n                useBoost: nextCombination.useBoost,\n                boost: _.sample(boosts),\n            }))\n            .flatten()\n            .value(),\n    };\n};\n\nmodule.exports = joinRaceCalcNextActionV2;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}