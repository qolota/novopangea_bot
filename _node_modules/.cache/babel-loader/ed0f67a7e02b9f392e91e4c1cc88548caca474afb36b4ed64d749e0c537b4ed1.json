{"ast":null,"code":"const _ = require('lodash');\nconst fetchBuildings = require(\"./fetchBuildings\");\nconst SHIFT_TIME_MS = 12 * 60 * 60 * 1000;\nconst equalizeResources = require('../utils/equalizeResources');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst sumResources = require('../utils/sumResources');\nconst multiplyResources = require('../utils/multiplyResources');\nconst BUILDINGS_TO_TOWNHALL = require('../consts/BUILDINGS_TO_TOWNHALL');\nconst fetchAccountBuildings = async ({\n  accountName,\n  cache = {}\n}) => {\n  const now = Date.now();\n  const buildings = cache.buildings || (await fetchBuildings({}));\n  const workerConfigs = cache.workerConfigs || (await fetchWorkerConfigs({}));\n  const ownBuildingsWithoutWageSet = _(buildings).filter(building => building.owner === accountName).filter(building => building.contractWage.waxCost === 0).filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level]).value();\n  const ownBuildingsExpiredRentSet = _(buildings).filter(building => building.owner === accountName).filter(building => building.land.owner === accountName).filter(building => building.land.rentExpireTime - now < SHIFT_TIME_MS).filter(building => building.numWorkers === 0).filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level]).value();\n  const ownBuildingsExpiredExternalRentSet = _(buildings).filter(building => building.owner === accountName).filter(building => building.land.owner !== accountName).filter(building => building.land.rentExpireTime < now).filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level]).filter(building => building.numWorkers === 0).value();\n  const ownStaleBuildings = _(buildings).filter(building => building.owner === accountName).filter(building => building.district.level < BUILDINGS_TO_TOWNHALL[building.level]).filter(building => building.numWorkers === 0).value();\n  const sets = _(buildings).groupBy(building => building.district.realm.name).map((buildings, realmName) => ({\n    realmName,\n    buildings: _(_.range(1, 6)).map(level => {\n      const workerConfig = workerConfigs.find(config => config.level === level);\n      const leveledResourceBuildings = _(buildings).filter(building => building.config.resourceType !== 'rest').filter(building => building.level >= level && building.minWorkerLevel <= level).filter(building => building.land.rentExpireTime - now > SHIFT_TIME_MS).filter(building => building.contractWage.waxCost > 0).filter(building => building.numWorkers < building.config.workerCapacity).value();\n\n      // job buildings\n      const externalJobsAvailable = _(leveledResourceBuildings).filter(building => building.owner !== accountName).filter(building => !building.isOnlyOwnWorkersAllowed).sortBy(building => -building.contractWage.waxCost).groupBy(building => {\n        const targetWage = multiplyResources({\n          resources: building.contractWage.costs,\n          multiplier: workerConfig.wageMultiplier\n        });\n        const targetResources = sumResources({\n          resources: multiplyResources({\n            resources: [...workerConfig.shiftCost.costs, ...targetWage],\n            multiplier: 6\n          })\n        });\n        const requestedResources = equalizeResources({\n          targetResources,\n          currentResources: building.account.balances\n        });\n\n        // console.log(building.district.realm.name, building.owner, building.account.balances, requestedResources, targetResources);\n        // console.log(workerConfig.shiftCost.costs, workerConfig.wageMultiplier, targetWage);\n\n        return requestedResources.length === 0 ? 'enoughResources' : 'notEnoughResources';\n      }).value();\n      const ownJobsAvailable = _(leveledResourceBuildings).filter(building => building.owner === accountName).filter(building => -building.config.shiftYield.waxCost).value();\n      const bestJobBuildings = _([...(externalJobsAvailable.enoughResources || []), ...ownJobsAvailable]).map(building => {\n        if (building.owner === accountName) {\n          if (building.resourceType === 'food') {\n            return {\n              ...building,\n              jobProfitObsd: 1\n            };\n          }\n          return {\n            ...building,\n            jobProfitObsd: building.yieldsObsd[level - 1]\n          };\n        }\n        return {\n          ...building,\n          jobProfitObsd: building.wagesObsd[level - 1]\n        };\n      }).sortBy(building => building.jobProfitObsd).value();\n\n      // rest buildings\n      const restBuildings = _(buildings).filter(building => building.config.resourceType === 'rest').filter(building => building.land.rentExpireTime - now > SHIFT_TIME_MS).filter(building => building.numWorkers < building.config.workerCapacity).filter(building => building.contractWage.waxCost > 0).value();\n      const externalRestAvailable = _(restBuildings).filter(building => building.owner !== accountName).filter(building => !building.isOnlyOwnWorkersAllowed).sortBy(building => building.nRestPrice).groupBy(building => {\n        const requestedResources = equalizeResources({\n          targetResources: multiplyResources({\n            resources: building.config.shiftCost.costs,\n            multiplier: 6\n          }),\n          currentResources: building.account.balances\n        });\n        return requestedResources.length === 0 ? 'enoughResources' : 'notEnoughResources';\n      }).value();\n      const ownRestAvailable = _(restBuildings).filter(building => building.owner === accountName).sortBy(building => building.nOwnRestPrice).value();\n      const bestRestBuildings = _([...(externalRestAvailable.enoughResources || []), ...ownRestAvailable]).map(building => {\n        if (building.owner === accountName) {\n          return {\n            ...building,\n            restCostObsd: building.ownRestsObsd[level - 1]\n          };\n        }\n        return {\n          ...building,\n          restCostObsd: building.externalRestsObsd[level - 1]\n        };\n      }).sortBy(building => -building.restCostObsd).value();\n      const bestUnskilledRestBuildings = _(bestRestBuildings).filter(building => {\n        if (building.owner === accountName) {\n          return building.level < 3;\n        }\n        return true;\n      }).sortBy(building => -building.restCostObsd).value();\n      return {\n        // jobs\n        externalJobsAvailable: externalJobsAvailable.enoughResources || [],\n        ownJobsAvailable,\n        bestJobBuildings,\n        // rest\n        externalRestAvailable: externalRestAvailable.enoughResources || [],\n        ownRestAvailable,\n        bestRestBuildings,\n        bestUnskilledRestBuildings,\n        // not enough resources\n        externalJobsUnavailable: externalJobsAvailable.notEnoughResources || [],\n        externalRestUnavailable: externalRestAvailable.notEnoughResources || []\n      };\n    }).value()\n  })).value();\n  const unskilledJobBuildings = _(sets).map(realm => realm.buildings[0].bestJobBuildings).flatten().filter(building => {\n    if (building.owner === accountName) {\n      return building.level < 3;\n    }\n    return true;\n  }).sortBy(building => building.jobProfitObsd).value();\n  const unskilledRestBuildings = _(sets).map(realm => realm.buildings[0].bestRestBuildings).flatten().filter(building => {\n    if (building.owner === accountName) {\n      return building.level < 3;\n    }\n    return true;\n  }).sortBy(building => -building.restCostObsd).value();\n  // console.log(sets[3].buildings[4].bestExternalJob);\n  // console.log(sets[3].buildings[4].bestExternalRest);\n  // console.log(sets[3].buildings[4].bestOwnJob);\n  // console.log(sets[3].buildings[4].bestOwnRest);\n\n  return {\n    buildings: sets,\n    ownBuildingsWithoutWageSet,\n    ownBuildingsExpiredRentSet,\n    ownBuildingsExpiredExternalRentSet,\n    unskilledJobBuildings,\n    unskilledRestBuildings,\n    ownStaleBuildings\n  };\n};\nmodule.exports = fetchAccountBuildings;","map":{"version":3,"names":["_","require","fetchBuildings","SHIFT_TIME_MS","equalizeResources","fetchWorkerConfigs","sumResources","multiplyResources","BUILDINGS_TO_TOWNHALL","fetchAccountBuildings","accountName","cache","now","Date","buildings","workerConfigs","ownBuildingsWithoutWageSet","filter","building","owner","contractWage","waxCost","district","level","value","ownBuildingsExpiredRentSet","land","rentExpireTime","numWorkers","ownBuildingsExpiredExternalRentSet","ownStaleBuildings","sets","groupBy","realm","name","map","realmName","range","workerConfig","find","config","leveledResourceBuildings","resourceType","minWorkerLevel","workerCapacity","externalJobsAvailable","isOnlyOwnWorkersAllowed","sortBy","targetWage","resources","costs","multiplier","wageMultiplier","targetResources","shiftCost","requestedResources","currentResources","account","balances","length","ownJobsAvailable","shiftYield","bestJobBuildings","enoughResources","jobProfitObsd","yieldsObsd","wagesObsd","restBuildings","externalRestAvailable","nRestPrice","ownRestAvailable","nOwnRestPrice","bestRestBuildings","restCostObsd","ownRestsObsd","externalRestsObsd","bestUnskilledRestBuildings","externalJobsUnavailable","notEnoughResources","externalRestUnavailable","unskilledJobBuildings","flatten","unskilledRestBuildings","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountBuildings.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchBuildings = require(\"./fetchBuildings\");\nconst SHIFT_TIME_MS = 12 * 60 * 60 * 1000;\nconst equalizeResources = require('../utils/equalizeResources');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst sumResources = require('../utils/sumResources');\nconst multiplyResources = require('../utils/multiplyResources');\nconst BUILDINGS_TO_TOWNHALL = require('../consts/BUILDINGS_TO_TOWNHALL');\n\nconst fetchAccountBuildings = async ({\n    accountName,\n    cache = {},\n}) => {\n    const now = Date.now();\n    const buildings = cache.buildings || await fetchBuildings({});\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const ownBuildingsWithoutWageSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.contractWage.waxCost === 0)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .value();\n    const ownBuildingsExpiredRentSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.land.owner === accountName)\n        .filter(building => (building.land.rentExpireTime - now) < SHIFT_TIME_MS)\n        .filter(building => building.numWorkers === 0)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .value();\n    const ownBuildingsExpiredExternalRentSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.land.owner !== accountName)\n        .filter(building => building.land.rentExpireTime < now)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .filter(building => building.numWorkers === 0)\n        .value();\n    const ownStaleBuildings = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.district.level < BUILDINGS_TO_TOWNHALL[building.level])\n        .filter(building => building.numWorkers === 0)\n        .value();\n    const sets = _(buildings)\n        .groupBy(building => building.district.realm.name)\n        .map((buildings, realmName) => ({\n            realmName,\n            buildings: _(_.range(1, 6))\n                .map(level => {\n                    const workerConfig = workerConfigs.find(config => config.level === level);\n\n                    const leveledResourceBuildings = _(buildings)\n                        .filter(building => building.config.resourceType !== 'rest')\n                        .filter(building => building.level >= level && building.minWorkerLevel <= level)\n                        .filter(building => (building.land.rentExpireTime - now) > SHIFT_TIME_MS)\n                        .filter(building => building.contractWage.waxCost > 0)\n                        .filter(building => building.numWorkers < building.config.workerCapacity)\n                        .value();\n                    \n                    // job buildings\n                    const externalJobsAvailable = _(leveledResourceBuildings)\n                        .filter(building => building.owner !== accountName)\n                        .filter(building => !building.isOnlyOwnWorkersAllowed)\n                        .sortBy(building => -building.contractWage.waxCost)\n                        .groupBy(building => {\n                            const targetWage = multiplyResources({\n                                resources: building.contractWage.costs,\n                                multiplier: workerConfig.wageMultiplier,\n                            });\n                            const targetResources = sumResources({\n                                resources: multiplyResources({\n                                    resources: [\n                                        ...workerConfig.shiftCost.costs,\n                                        ...targetWage,\n                                    ],\n                                    multiplier: 6,\n                                }),\n                            });\n                            \n                            const requestedResources = equalizeResources({\n                                targetResources,\n                                currentResources: building.account.balances,\n                            });\n\n                            // console.log(building.district.realm.name, building.owner, building.account.balances, requestedResources, targetResources);\n                            // console.log(workerConfig.shiftCost.costs, workerConfig.wageMultiplier, targetWage);\n                \n                            return requestedResources.length === 0\n                                ? 'enoughResources'\n                                : 'notEnoughResources';\n                        })\n                        .value();\n                    const ownJobsAvailable = _(leveledResourceBuildings)\n                        .filter(building => building.owner === accountName)\n                        .filter(building => -building.config.shiftYield.waxCost)\n                        .value();\n                    const bestJobBuildings = _([\n                        ...externalJobsAvailable.enoughResources || [],\n                        ...ownJobsAvailable,\n                    ])\n                        .map(building => {\n                            if (building.owner === accountName) {\n                                if (building.resourceType === 'food') {\n                                    return {\n                                        ...building,\n                                        jobProfitObsd: 1,\n                                    };\n                                }\n\n                                return {\n                                    ...building,\n                                    jobProfitObsd: building.yieldsObsd[level - 1],\n                                };\n                            }\n\n                            return {\n                                ...building,\n                                jobProfitObsd: building.wagesObsd[level - 1],\n                            };\n                        })\n                        .sortBy(building => building.jobProfitObsd)\n                        .value();\n\n                    // rest buildings\n                    const restBuildings = _(buildings)\n                        .filter(building => building.config.resourceType === 'rest')\n                        .filter(building => (building.land.rentExpireTime - now) > SHIFT_TIME_MS)\n                        .filter(building => building.numWorkers < building.config.workerCapacity)\n                        .filter(building => building.contractWage.waxCost > 0)\n                        .value();\n                    const externalRestAvailable = _(restBuildings)\n                        .filter(building => building.owner !== accountName)\n                        .filter(building => !building.isOnlyOwnWorkersAllowed)\n                        .sortBy(building => building.nRestPrice)\n                        .groupBy(building => {\n                            const requestedResources = equalizeResources({\n                                targetResources: multiplyResources({\n                                    resources: building.config.shiftCost.costs,\n                                    multiplier: 6,\n                                }),\n                                currentResources: building.account.balances,\n                            });\n\n                            return requestedResources.length === 0\n                                ? 'enoughResources'\n                                : 'notEnoughResources';\n                        })\n                        .value();\n                    const ownRestAvailable = _(restBuildings)\n                        .filter(building => building.owner === accountName)\n                        .sortBy(building => building.nOwnRestPrice)\n                        .value();\n                    const bestRestBuildings = _([\n                        ...externalRestAvailable.enoughResources || [],\n                        ...ownRestAvailable,\n                    ])\n                        .map(building => {\n                            if (building.owner === accountName) {\n                                return {\n                                    ...building,\n                                    restCostObsd: building.ownRestsObsd[level - 1],\n                                };\n                            }\n\n                            return {\n                                ...building,\n                                restCostObsd: building.externalRestsObsd[level - 1],\n                            };\n                        })\n                        .sortBy(building => -building.restCostObsd)\n                        .value();\n                    const bestUnskilledRestBuildings = _(bestRestBuildings)\n                        .filter(building => {\n                            if (building.owner === accountName) {\n                                return building.level < 3;\n                            }\n                \n                            return true;\n                        })\n                        .sortBy(building => -building.restCostObsd)\n                        .value();\n\n                    return {\n                        // jobs\n                        externalJobsAvailable: externalJobsAvailable.enoughResources || [],\n                        ownJobsAvailable,\n                        bestJobBuildings,\n\n                        // rest\n                        externalRestAvailable: externalRestAvailable.enoughResources || [],\n                        ownRestAvailable,\n                        bestRestBuildings,\n                        bestUnskilledRestBuildings,\n\n                        // not enough resources\n                        externalJobsUnavailable: externalJobsAvailable.notEnoughResources || [],\n                        externalRestUnavailable: externalRestAvailable.notEnoughResources || [],\n                    };\n                })\n                .value(),\n        }))\n        .value();\n    \n    const unskilledJobBuildings = _(sets)\n        .map(realm => realm.buildings[0].bestJobBuildings)\n        .flatten()\n        .filter(building => {\n            if (building.owner === accountName) {\n                return building.level < 3;\n            }\n\n            return true;\n        })\n        .sortBy(building => building.jobProfitObsd)\n        .value();\n    const unskilledRestBuildings = _(sets)\n        .map(realm => realm.buildings[0].bestRestBuildings)\n        .flatten()\n        .filter(building => {\n            if (building.owner === accountName) {\n                return building.level < 3;\n            }\n\n            return true;\n        })\n        .sortBy(building => -building.restCostObsd)\n        .value();\n    // console.log(sets[3].buildings[4].bestExternalJob);\n    // console.log(sets[3].buildings[4].bestExternalRest);\n    // console.log(sets[3].buildings[4].bestOwnJob);\n    // console.log(sets[3].buildings[4].bestOwnRest);\n\n    return {\n        buildings: sets,\n        ownBuildingsWithoutWageSet,\n        ownBuildingsExpiredRentSet,\n        ownBuildingsExpiredExternalRentSet,\n        unskilledJobBuildings,\n        unskilledRestBuildings,\n        ownStaleBuildings,\n    };\n};\n\nmodule.exports = fetchAccountBuildings;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAME,aAAa,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AACzC,MAAMC,iBAAiB,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAC/D,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMK,YAAY,GAAGL,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAMM,iBAAiB,GAAGN,OAAO,CAAC,4BAA4B,CAAC;AAC/D,MAAMO,qBAAqB,GAAGP,OAAO,CAAC,iCAAiC,CAAC;AAExE,MAAMQ,qBAAqB,GAAG,MAAAA,CAAO;EACjCC,WAAW;EACXC,KAAK,GAAG,CAAC;AACb,CAAC,KAAK;EACF,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,SAAS,GAAGH,KAAK,CAACG,SAAS,KAAI,MAAMZ,cAAc,CAAC,CAAC,CAAC,CAAC;EAC7D,MAAMa,aAAa,GAAGJ,KAAK,CAACI,aAAa,KAAI,MAAMV,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACzE,MAAMW,0BAA0B,GAAGhB,CAAC,CAACc,SAAS,CAAC,CAC1CG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACE,YAAY,CAACC,OAAO,KAAK,CAAC,CAAC,CACvDJ,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,CAACC,KAAK,IAAIf,qBAAqB,CAACU,QAAQ,CAACK,KAAK,CAAC,CAAC,CACpFC,KAAK,CAAC,CAAC;EACZ,MAAMC,0BAA0B,GAAGzB,CAAC,CAACc,SAAS,CAAC,CAC1CG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,CAACP,KAAK,KAAKT,WAAW,CAAC,CACvDO,MAAM,CAACC,QAAQ,IAAKA,QAAQ,CAACQ,IAAI,CAACC,cAAc,GAAGf,GAAG,GAAIT,aAAa,CAAC,CACxEc,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACU,UAAU,KAAK,CAAC,CAAC,CAC7CX,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,CAACC,KAAK,IAAIf,qBAAqB,CAACU,QAAQ,CAACK,KAAK,CAAC,CAAC,CACpFC,KAAK,CAAC,CAAC;EACZ,MAAMK,kCAAkC,GAAG7B,CAAC,CAACc,SAAS,CAAC,CAClDG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,CAACP,KAAK,KAAKT,WAAW,CAAC,CACvDO,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACQ,IAAI,CAACC,cAAc,GAAGf,GAAG,CAAC,CACtDK,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,CAACC,KAAK,IAAIf,qBAAqB,CAACU,QAAQ,CAACK,KAAK,CAAC,CAAC,CACpFN,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACU,UAAU,KAAK,CAAC,CAAC,CAC7CJ,KAAK,CAAC,CAAC;EACZ,MAAMM,iBAAiB,GAAG9B,CAAC,CAACc,SAAS,CAAC,CACjCG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,CAACC,KAAK,GAAGf,qBAAqB,CAACU,QAAQ,CAACK,KAAK,CAAC,CAAC,CACnFN,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACU,UAAU,KAAK,CAAC,CAAC,CAC7CJ,KAAK,CAAC,CAAC;EACZ,MAAMO,IAAI,GAAG/B,CAAC,CAACc,SAAS,CAAC,CACpBkB,OAAO,CAACd,QAAQ,IAAIA,QAAQ,CAACI,QAAQ,CAACW,KAAK,CAACC,IAAI,CAAC,CACjDC,GAAG,CAAC,CAACrB,SAAS,EAAEsB,SAAS,MAAM;IAC5BA,SAAS;IACTtB,SAAS,EAAEd,CAAC,CAACA,CAAC,CAACqC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACtBF,GAAG,CAACZ,KAAK,IAAI;MACV,MAAMe,YAAY,GAAGvB,aAAa,CAACwB,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACjB,KAAK,KAAKA,KAAK,CAAC;MAEzE,MAAMkB,wBAAwB,GAAGzC,CAAC,CAACc,SAAS,CAAC,CACxCG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACsB,MAAM,CAACE,YAAY,KAAK,MAAM,CAAC,CAC3DzB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACK,KAAK,IAAIA,KAAK,IAAIL,QAAQ,CAACyB,cAAc,IAAIpB,KAAK,CAAC,CAC/EN,MAAM,CAACC,QAAQ,IAAKA,QAAQ,CAACQ,IAAI,CAACC,cAAc,GAAGf,GAAG,GAAIT,aAAa,CAAC,CACxEc,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACE,YAAY,CAACC,OAAO,GAAG,CAAC,CAAC,CACrDJ,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACU,UAAU,GAAGV,QAAQ,CAACsB,MAAM,CAACI,cAAc,CAAC,CACxEpB,KAAK,CAAC,CAAC;;MAEZ;MACA,MAAMqB,qBAAqB,GAAG7C,CAAC,CAACyC,wBAAwB,CAAC,CACpDxB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAI,CAACA,QAAQ,CAAC4B,uBAAuB,CAAC,CACrDC,MAAM,CAAC7B,QAAQ,IAAI,CAACA,QAAQ,CAACE,YAAY,CAACC,OAAO,CAAC,CAClDW,OAAO,CAACd,QAAQ,IAAI;QACjB,MAAM8B,UAAU,GAAGzC,iBAAiB,CAAC;UACjC0C,SAAS,EAAE/B,QAAQ,CAACE,YAAY,CAAC8B,KAAK;UACtCC,UAAU,EAAEb,YAAY,CAACc;QAC7B,CAAC,CAAC;QACF,MAAMC,eAAe,GAAG/C,YAAY,CAAC;UACjC2C,SAAS,EAAE1C,iBAAiB,CAAC;YACzB0C,SAAS,EAAE,CACP,GAAGX,YAAY,CAACgB,SAAS,CAACJ,KAAK,EAC/B,GAAGF,UAAU,CAChB;YACDG,UAAU,EAAE;UAChB,CAAC;QACL,CAAC,CAAC;QAEF,MAAMI,kBAAkB,GAAGnD,iBAAiB,CAAC;UACzCiD,eAAe;UACfG,gBAAgB,EAAEtC,QAAQ,CAACuC,OAAO,CAACC;QACvC,CAAC,CAAC;;QAEF;QACA;;QAEA,OAAOH,kBAAkB,CAACI,MAAM,KAAK,CAAC,GAChC,iBAAiB,GACjB,oBAAoB;MAC9B,CAAC,CAAC,CACDnC,KAAK,CAAC,CAAC;MACZ,MAAMoC,gBAAgB,GAAG5D,CAAC,CAACyC,wBAAwB,CAAC,CAC/CxB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAI,CAACA,QAAQ,CAACsB,MAAM,CAACqB,UAAU,CAACxC,OAAO,CAAC,CACvDG,KAAK,CAAC,CAAC;MACZ,MAAMsC,gBAAgB,GAAG9D,CAAC,CAAC,CACvB,IAAG6C,qBAAqB,CAACkB,eAAe,IAAI,EAAE,GAC9C,GAAGH,gBAAgB,CACtB,CAAC,CACGzB,GAAG,CAACjB,QAAQ,IAAI;QACb,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,EAAE;UAChC,IAAIQ,QAAQ,CAACwB,YAAY,KAAK,MAAM,EAAE;YAClC,OAAO;cACH,GAAGxB,QAAQ;cACX8C,aAAa,EAAE;YACnB,CAAC;UACL;UAEA,OAAO;YACH,GAAG9C,QAAQ;YACX8C,aAAa,EAAE9C,QAAQ,CAAC+C,UAAU,CAAC1C,KAAK,GAAG,CAAC;UAChD,CAAC;QACL;QAEA,OAAO;UACH,GAAGL,QAAQ;UACX8C,aAAa,EAAE9C,QAAQ,CAACgD,SAAS,CAAC3C,KAAK,GAAG,CAAC;QAC/C,CAAC;MACL,CAAC,CAAC,CACDwB,MAAM,CAAC7B,QAAQ,IAAIA,QAAQ,CAAC8C,aAAa,CAAC,CAC1CxC,KAAK,CAAC,CAAC;;MAEZ;MACA,MAAM2C,aAAa,GAAGnE,CAAC,CAACc,SAAS,CAAC,CAC7BG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACsB,MAAM,CAACE,YAAY,KAAK,MAAM,CAAC,CAC3DzB,MAAM,CAACC,QAAQ,IAAKA,QAAQ,CAACQ,IAAI,CAACC,cAAc,GAAGf,GAAG,GAAIT,aAAa,CAAC,CACxEc,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACU,UAAU,GAAGV,QAAQ,CAACsB,MAAM,CAACI,cAAc,CAAC,CACxE3B,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACE,YAAY,CAACC,OAAO,GAAG,CAAC,CAAC,CACrDG,KAAK,CAAC,CAAC;MACZ,MAAM4C,qBAAqB,GAAGpE,CAAC,CAACmE,aAAa,CAAC,CACzClD,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDO,MAAM,CAACC,QAAQ,IAAI,CAACA,QAAQ,CAAC4B,uBAAuB,CAAC,CACrDC,MAAM,CAAC7B,QAAQ,IAAIA,QAAQ,CAACmD,UAAU,CAAC,CACvCrC,OAAO,CAACd,QAAQ,IAAI;QACjB,MAAMqC,kBAAkB,GAAGnD,iBAAiB,CAAC;UACzCiD,eAAe,EAAE9C,iBAAiB,CAAC;YAC/B0C,SAAS,EAAE/B,QAAQ,CAACsB,MAAM,CAACc,SAAS,CAACJ,KAAK;YAC1CC,UAAU,EAAE;UAChB,CAAC,CAAC;UACFK,gBAAgB,EAAEtC,QAAQ,CAACuC,OAAO,CAACC;QACvC,CAAC,CAAC;QAEF,OAAOH,kBAAkB,CAACI,MAAM,KAAK,CAAC,GAChC,iBAAiB,GACjB,oBAAoB;MAC9B,CAAC,CAAC,CACDnC,KAAK,CAAC,CAAC;MACZ,MAAM8C,gBAAgB,GAAGtE,CAAC,CAACmE,aAAa,CAAC,CACpClD,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,CAAC,CAClDqC,MAAM,CAAC7B,QAAQ,IAAIA,QAAQ,CAACqD,aAAa,CAAC,CAC1C/C,KAAK,CAAC,CAAC;MACZ,MAAMgD,iBAAiB,GAAGxE,CAAC,CAAC,CACxB,IAAGoE,qBAAqB,CAACL,eAAe,IAAI,EAAE,GAC9C,GAAGO,gBAAgB,CACtB,CAAC,CACGnC,GAAG,CAACjB,QAAQ,IAAI;QACb,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,EAAE;UAChC,OAAO;YACH,GAAGQ,QAAQ;YACXuD,YAAY,EAAEvD,QAAQ,CAACwD,YAAY,CAACnD,KAAK,GAAG,CAAC;UACjD,CAAC;QACL;QAEA,OAAO;UACH,GAAGL,QAAQ;UACXuD,YAAY,EAAEvD,QAAQ,CAACyD,iBAAiB,CAACpD,KAAK,GAAG,CAAC;QACtD,CAAC;MACL,CAAC,CAAC,CACDwB,MAAM,CAAC7B,QAAQ,IAAI,CAACA,QAAQ,CAACuD,YAAY,CAAC,CAC1CjD,KAAK,CAAC,CAAC;MACZ,MAAMoD,0BAA0B,GAAG5E,CAAC,CAACwE,iBAAiB,CAAC,CAClDvD,MAAM,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,EAAE;UAChC,OAAOQ,QAAQ,CAACK,KAAK,GAAG,CAAC;QAC7B;QAEA,OAAO,IAAI;MACf,CAAC,CAAC,CACDwB,MAAM,CAAC7B,QAAQ,IAAI,CAACA,QAAQ,CAACuD,YAAY,CAAC,CAC1CjD,KAAK,CAAC,CAAC;MAEZ,OAAO;QACH;QACAqB,qBAAqB,EAAEA,qBAAqB,CAACkB,eAAe,IAAI,EAAE;QAClEH,gBAAgB;QAChBE,gBAAgB;QAEhB;QACAM,qBAAqB,EAAEA,qBAAqB,CAACL,eAAe,IAAI,EAAE;QAClEO,gBAAgB;QAChBE,iBAAiB;QACjBI,0BAA0B;QAE1B;QACAC,uBAAuB,EAAEhC,qBAAqB,CAACiC,kBAAkB,IAAI,EAAE;QACvEC,uBAAuB,EAAEX,qBAAqB,CAACU,kBAAkB,IAAI;MACzE,CAAC;IACL,CAAC,CAAC,CACDtD,KAAK,CAAC;EACf,CAAC,CAAC,CAAC,CACFA,KAAK,CAAC,CAAC;EAEZ,MAAMwD,qBAAqB,GAAGhF,CAAC,CAAC+B,IAAI,CAAC,CAChCI,GAAG,CAACF,KAAK,IAAIA,KAAK,CAACnB,SAAS,CAAC,CAAC,CAAC,CAACgD,gBAAgB,CAAC,CACjDmB,OAAO,CAAC,CAAC,CACThE,MAAM,CAACC,QAAQ,IAAI;IAChB,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,EAAE;MAChC,OAAOQ,QAAQ,CAACK,KAAK,GAAG,CAAC;IAC7B;IAEA,OAAO,IAAI;EACf,CAAC,CAAC,CACDwB,MAAM,CAAC7B,QAAQ,IAAIA,QAAQ,CAAC8C,aAAa,CAAC,CAC1CxC,KAAK,CAAC,CAAC;EACZ,MAAM0D,sBAAsB,GAAGlF,CAAC,CAAC+B,IAAI,CAAC,CACjCI,GAAG,CAACF,KAAK,IAAIA,KAAK,CAACnB,SAAS,CAAC,CAAC,CAAC,CAAC0D,iBAAiB,CAAC,CAClDS,OAAO,CAAC,CAAC,CACThE,MAAM,CAACC,QAAQ,IAAI;IAChB,IAAIA,QAAQ,CAACC,KAAK,KAAKT,WAAW,EAAE;MAChC,OAAOQ,QAAQ,CAACK,KAAK,GAAG,CAAC;IAC7B;IAEA,OAAO,IAAI;EACf,CAAC,CAAC,CACDwB,MAAM,CAAC7B,QAAQ,IAAI,CAACA,QAAQ,CAACuD,YAAY,CAAC,CAC1CjD,KAAK,CAAC,CAAC;EACZ;EACA;EACA;EACA;;EAEA,OAAO;IACHV,SAAS,EAAEiB,IAAI;IACff,0BAA0B;IAC1BS,0BAA0B;IAC1BI,kCAAkC;IAClCmD,qBAAqB;IACrBE,sBAAsB;IACtBpD;EACJ,CAAC;AACL,CAAC;AAEDqD,MAAM,CAACC,OAAO,GAAG3E,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}