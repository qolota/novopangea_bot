{"ast":null,"code":"const _ = require('lodash');\nconst fetchWaxData2 = require('./fetchWaxData2');\nconst DEFAULT_LIMIT = 1000;\nconst fetchAllWaxData2 = async ({\n  params,\n  customProcessor = async ({\n    row\n  }) => row,\n  ignoreHttpErrorStatuses = [],\n  customLowerBoundProcessor = ({\n    lowerBound\n  }) => lowerBound\n}) => {\n  let lowerBound = params.lower_bound || null;\n  let rows = [];\n  while (true) {\n    console.log(`Loading wax data ${params.code}:${params.table} from ${lowerBound} +${DEFAULT_LIMIT}`);\n    const data = await fetchWaxData2({\n      params: {\n        limit: DEFAULT_LIMIT,\n        lower_bound: lowerBound,\n        upper_bound: null,\n        show_payer: false,\n        reverse: false,\n        json: true,\n        key_type: \"\",\n        index_position: 1,\n        ..._.omit(params, ['limit', 'lower_bound', 'show_payer', 'reverse', 'json', 'key_type', 'index_position'])\n      },\n      ignoreHttpErrorStatuses\n    });\n    if (data.code == 'ignore_http_status') {\n      lowerBound = customLowerBoundProcessor({\n        lowerBound\n      });\n      continue;\n    }\n    const {\n      nextKey,\n      rows: nextRows\n    } = data;\n    if (nextRows.length === 0) {\n      return rows;\n    }\n    const processedNextRows = [];\n    for (let rowIndex = 0; rowIndex < nextRows.length; rowIndex++) {\n      const nextRow = nextRows[rowIndex];\n      const processedNextRow = await customProcessor({\n        row: nextRow\n      });\n      processedNextRows.push(processedNextRow);\n    }\n    rows = [...rows, ...processedNextRows];\n    if (nextKey == null) {\n      return rows;\n    }\n    lowerBound = nextKey;\n  }\n};\nmodule.exports = fetchAllWaxData2;","map":{"version":3,"names":["_","require","fetchWaxData2","DEFAULT_LIMIT","fetchAllWaxData2","params","customProcessor","row","ignoreHttpErrorStatuses","customLowerBoundProcessor","lowerBound","lower_bound","rows","console","log","code","table","data","limit","upper_bound","show_payer","reverse","json","key_type","index_position","omit","nextKey","nextRows","length","processedNextRows","rowIndex","nextRow","processedNextRow","push","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/core/fetchAllWaxData2.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchWaxData2 = require('./fetchWaxData2');\n\nconst DEFAULT_LIMIT = 1000;\n\nconst fetchAllWaxData2 = async ({\n    params,\n    customProcessor = async ({row}) => row,\n    ignoreHttpErrorStatuses = [],\n    customLowerBoundProcessor = ({lowerBound}) => lowerBound,\n}) => {\n    let lowerBound = params.lower_bound || null;\n    let rows = [];\n\n    while (true) {\n        console.log(`Loading wax data ${params.code}:${params.table} from ${lowerBound} +${DEFAULT_LIMIT}`);\n        const data = await fetchWaxData2({\n            params: {\n                limit: DEFAULT_LIMIT,\n                lower_bound: lowerBound,\n                upper_bound: null,\n                show_payer: false,\n                reverse: false,\n                json: true,\n                key_type: \"\",\n                index_position: 1,\n                ..._.omit(params, [\n                    'limit',\n                    'lower_bound',\n                    'show_payer',\n                    'reverse',\n                    'json',\n                    'key_type',\n                    'index_position',\n                ]),\n            },\n            ignoreHttpErrorStatuses,\n        });\n\n        if (data.code == 'ignore_http_status') {\n            lowerBound = customLowerBoundProcessor({\n                lowerBound,\n            });\n            continue;\n        }\n\n        const {\n            nextKey,\n            rows: nextRows,\n        } = data;\n\n        if (nextRows.length === 0) {\n            return rows;\n        }\n        const processedNextRows = [];\n\n        for (let rowIndex = 0; rowIndex < nextRows.length; rowIndex++) {\n            const nextRow = nextRows[rowIndex];\n            const processedNextRow = await customProcessor({row: nextRow});\n            processedNextRows.push(processedNextRow);\n        }\n        \n        rows = [\n            ...rows,\n            ...processedNextRows,\n        ];\n\n        if (nextKey == null) {\n            return rows;\n        }\n\n        lowerBound = nextKey;\n    }\n};\n\nmodule.exports = fetchAllWaxData2;\n\n\n\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAEhD,MAAME,aAAa,GAAG,IAAI;AAE1B,MAAMC,gBAAgB,GAAG,MAAAA,CAAO;EAC5BC,MAAM;EACNC,eAAe,GAAG,MAAAA,CAAO;IAACC;EAAG,CAAC,KAAKA,GAAG;EACtCC,uBAAuB,GAAG,EAAE;EAC5BC,yBAAyB,GAAGA,CAAC;IAACC;EAAU,CAAC,KAAKA;AAClD,CAAC,KAAK;EACF,IAAIA,UAAU,GAAGL,MAAM,CAACM,WAAW,IAAI,IAAI;EAC3C,IAAIC,IAAI,GAAG,EAAE;EAEb,OAAO,IAAI,EAAE;IACTC,OAAO,CAACC,GAAG,CAAE,oBAAmBT,MAAM,CAACU,IAAK,IAAGV,MAAM,CAACW,KAAM,SAAQN,UAAW,KAAIP,aAAc,EAAC,CAAC;IACnG,MAAMc,IAAI,GAAG,MAAMf,aAAa,CAAC;MAC7BG,MAAM,EAAE;QACJa,KAAK,EAAEf,aAAa;QACpBQ,WAAW,EAAED,UAAU;QACvBS,WAAW,EAAE,IAAI;QACjBC,UAAU,EAAE,KAAK;QACjBC,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,EAAE;QACZC,cAAc,EAAE,CAAC;QACjB,GAAGxB,CAAC,CAACyB,IAAI,CAACpB,MAAM,EAAE,CACd,OAAO,EACP,aAAa,EACb,YAAY,EACZ,SAAS,EACT,MAAM,EACN,UAAU,EACV,gBAAgB,CACnB;MACL,CAAC;MACDG;IACJ,CAAC,CAAC;IAEF,IAAIS,IAAI,CAACF,IAAI,IAAI,oBAAoB,EAAE;MACnCL,UAAU,GAAGD,yBAAyB,CAAC;QACnCC;MACJ,CAAC,CAAC;MACF;IACJ;IAEA,MAAM;MACFgB,OAAO;MACPd,IAAI,EAAEe;IACV,CAAC,GAAGV,IAAI;IAER,IAAIU,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACvB,OAAOhB,IAAI;IACf;IACA,MAAMiB,iBAAiB,GAAG,EAAE;IAE5B,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGH,QAAQ,CAACC,MAAM,EAAEE,QAAQ,EAAE,EAAE;MAC3D,MAAMC,OAAO,GAAGJ,QAAQ,CAACG,QAAQ,CAAC;MAClC,MAAME,gBAAgB,GAAG,MAAM1B,eAAe,CAAC;QAACC,GAAG,EAAEwB;MAAO,CAAC,CAAC;MAC9DF,iBAAiB,CAACI,IAAI,CAACD,gBAAgB,CAAC;IAC5C;IAEApB,IAAI,GAAG,CACH,GAAGA,IAAI,EACP,GAAGiB,iBAAiB,CACvB;IAED,IAAIH,OAAO,IAAI,IAAI,EAAE;MACjB,OAAOd,IAAI;IACf;IAEAF,UAAU,GAAGgB,OAAO;EACxB;AACJ,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAG/B,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}