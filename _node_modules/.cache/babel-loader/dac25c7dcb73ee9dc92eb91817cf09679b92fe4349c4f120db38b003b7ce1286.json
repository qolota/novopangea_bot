{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst ORDER_TYPES = require('../consts/ORDER_TYPES');\nconst ORDER_TABLES = require('../consts/ORDER_TABLES');\nconst fetchWaxData = require('../../core/fetchWaxData');\nconst formatMarketOrder = require('../utils/formatMarketOrder');\nconst _fetchMarketOrders = async ({\n  dexId,\n  orderType\n}) => {\n  let lowerBound = 0;\n  let orders = [];\n  while (true) {\n    const nextOrders = await fetchWaxData({\n      code: CONTRACTS.DEX,\n      index_position: 1,\n      json: true,\n      key_type: \"\",\n      limit: 1000,\n      reverse: false,\n      scope: dexId,\n      show_payer: false,\n      table: ORDER_TABLES[orderType],\n      table_key: \"\",\n      lower_bound: lowerBound\n    });\n    if (nextOrders.length === 0) {\n      if (orderType === ORDER_TYPES.BUY) {\n        return _(orders).sortBy(order => -order.unitPrice).value();\n      }\n      if (orderType === ORDER_TYPES.SELL) {\n        return _(orders).sortBy(order => order.unitPrice).value();\n      }\n      return orders;\n    }\n    lowerBound = nextOrders[nextOrders.length - 1].id + 1;\n    orders = [...orders, ..._(nextOrders).map(order => formatMarketOrder({\n      order,\n      dexId\n    })).value()];\n  }\n};\nconst fetchMarketOrders = async ({\n  dexId,\n  orderType\n}) => {\n  const orders = await _fetchMarketOrders({\n    dexId,\n    orderType\n  });\n  return orders;\n};\nmodule.exports = fetchMarketOrders;","map":{"version":3,"names":["_","require","CONTRACTS","ORDER_TYPES","ORDER_TABLES","fetchWaxData","formatMarketOrder","_fetchMarketOrders","dexId","orderType","lowerBound","orders","nextOrders","code","DEX","index_position","json","key_type","limit","reverse","scope","show_payer","table","table_key","lower_bound","length","BUY","sortBy","order","unitPrice","value","SELL","id","map","fetchMarketOrders","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/api/fetchMarketOrders.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst ORDER_TYPES = require('../consts/ORDER_TYPES');\nconst ORDER_TABLES = require('../consts/ORDER_TABLES');\nconst fetchWaxData = require('../../core/fetchWaxData');\nconst formatMarketOrder = require('../utils/formatMarketOrder');\n\nconst _fetchMarketOrders = async ({dexId, orderType}) => {\n    let lowerBound = 0;\n    let orders = [];\n\n    while (true) {\n        const nextOrders = await fetchWaxData({\n            code: CONTRACTS.DEX,\n            index_position: 1,\n            json: true,\n            key_type: \"\",\n            limit: 1000,\n            reverse: false,\n            scope: dexId,\n            show_payer: false,\n            table: ORDER_TABLES[orderType],\n            table_key: \"\",\n            lower_bound: lowerBound,\n        });\n\n        if (nextOrders.length === 0) {\n            if (orderType === ORDER_TYPES.BUY) {\n                return _(orders)\n                    .sortBy(order => -order.unitPrice)\n                    .value();\n            }\n\n            if (orderType === ORDER_TYPES.SELL) {\n                return _(orders)\n                    .sortBy(order => order.unitPrice)\n                    .value();\n            }\n            \n            return orders;\n        }\n\n        lowerBound = nextOrders[nextOrders.length - 1].id + 1;\n\n        orders = [\n            ...orders,\n            ..._(nextOrders)\n                .map(order => formatMarketOrder({order, dexId}))\n                .value(),\n        ];\n    }\n};\n\nconst fetchMarketOrders = async ({dexId, orderType}) => {\n    const orders = await _fetchMarketOrders({dexId, orderType});\n    return orders;\n};\n\nmodule.exports = fetchMarketOrders;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,WAAW,GAAGF,OAAO,CAAC,uBAAuB,CAAC;AACpD,MAAMG,YAAY,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMI,YAAY,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AACvD,MAAMK,iBAAiB,GAAGL,OAAO,CAAC,4BAA4B,CAAC;AAE/D,MAAMM,kBAAkB,GAAG,MAAAA,CAAO;EAACC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACrD,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,MAAM,GAAG,EAAE;EAEf,OAAO,IAAI,EAAE;IACT,MAAMC,UAAU,GAAG,MAAMP,YAAY,CAAC;MAClCQ,IAAI,EAAEX,SAAS,CAACY,GAAG;MACnBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEZ,KAAK;MACZa,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAElB,YAAY,CAACK,SAAS,CAAC;MAC9Bc,SAAS,EAAE,EAAE;MACbC,WAAW,EAAEd;IACjB,CAAC,CAAC;IAEF,IAAIE,UAAU,CAACa,MAAM,KAAK,CAAC,EAAE;MACzB,IAAIhB,SAAS,KAAKN,WAAW,CAACuB,GAAG,EAAE;QAC/B,OAAO1B,CAAC,CAACW,MAAM,CAAC,CACXgB,MAAM,CAACC,KAAK,IAAI,CAACA,KAAK,CAACC,SAAS,CAAC,CACjCC,KAAK,CAAC,CAAC;MAChB;MAEA,IAAIrB,SAAS,KAAKN,WAAW,CAAC4B,IAAI,EAAE;QAChC,OAAO/B,CAAC,CAACW,MAAM,CAAC,CACXgB,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,SAAS,CAAC,CAChCC,KAAK,CAAC,CAAC;MAChB;MAEA,OAAOnB,MAAM;IACjB;IAEAD,UAAU,GAAGE,UAAU,CAACA,UAAU,CAACa,MAAM,GAAG,CAAC,CAAC,CAACO,EAAE,GAAG,CAAC;IAErDrB,MAAM,GAAG,CACL,GAAGA,MAAM,EACT,GAAGX,CAAC,CAACY,UAAU,CAAC,CACXqB,GAAG,CAACL,KAAK,IAAItB,iBAAiB,CAAC;MAACsB,KAAK;MAAEpB;IAAK,CAAC,CAAC,CAAC,CAC/CsB,KAAK,CAAC,CAAC,CACf;EACL;AACJ,CAAC;AAED,MAAMI,iBAAiB,GAAG,MAAAA,CAAO;EAAC1B,KAAK;EAAEC;AAAS,CAAC,KAAK;EACpD,MAAME,MAAM,GAAG,MAAMJ,kBAAkB,CAAC;IAACC,KAAK;IAAEC;EAAS,CAAC,CAAC;EAC3D,OAAOE,MAAM;AACjB,CAAC;AAEDwB,MAAM,CAACC,OAAO,GAAGF,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}