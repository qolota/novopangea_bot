{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchDistricts = require('./fetchDistricts');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst fetchLandConfigs = require('./fetchLandConfigs');\nconst fetchRealms = require('./fetchRealms');\nconst fetchLands = async ({\n  cache = {}\n}) => {\n  const exchange = cache.exchange || (await fetchExchange());\n  const novoPrice = cache.novoPrice || (await fetchNovoPrice());\n  const realms = cache.realms || (await fetchRealms());\n  const districts = cache.districts || (await fetchDistricts({\n    cache: {\n      realms\n    }\n  }));\n  const landConfigs = cache.landConfigs || (await fetchLandConfigs({\n    cache: {\n      exchange,\n      novoPrice\n    }\n  }));\n  const lands = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'land'\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const config = landConfigs.find(config => config.id === row.config_id);\n      const rentCost = convertAllCosts({\n        costs: [row.rent === 0 ? `${row.rent} OBSD` : row.rent],\n        exchange,\n        novoPrice\n      });\n      return {\n        id: row.id,\n        assetId: row.asset_id,\n        owner: row.owner,\n        renter: row.renter === '' ? null : row.renter,\n        isOwnerOccupied: row.owner_occupied === 1,\n        isDistrictOwner: row.district_owned === 1,\n        isAvailableForRent: row.for_rent === 1,\n        lastStakeTime: row.last_stake * 1000,\n        rentExpireTime: row.rent_expire * 1000,\n        rentCost,\n        ownRentPriceObsd: config.plotRentAmount.obsdCost / config.rentTime,\n        externalRentPriceObsd: rentCost.obsdCost / config.rentTime,\n        config,\n        district: districts.find(district => district.id === row.district_id)\n      };\n    }\n  });\n  return lands;\n};\nmodule.exports = fetchLands;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","fetchDistricts","convertAllCosts","fetchExchange","fetchNovoPrice","fetchLandConfigs","fetchRealms","fetchLands","cache","exchange","novoPrice","realms","districts","landConfigs","lands","params","code","GAME","scope","table","customProcessor","row","config","find","id","config_id","rentCost","costs","rent","assetId","asset_id","owner","renter","isOwnerOccupied","owner_occupied","isDistrictOwner","district_owned","isAvailableForRent","for_rent","lastStakeTime","last_stake","rentExpireTime","rent_expire","ownRentPriceObsd","plotRentAmount","obsdCost","rentTime","externalRentPriceObsd","district","district_id","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchLands.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchDistricts = require('./fetchDistricts');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst fetchLandConfigs = require('./fetchLandConfigs');\nconst fetchRealms = require('./fetchRealms');\n\nconst fetchLands = async ({\n    cache = {},\n}) => {\n    const exchange = cache.exchange || await fetchExchange();\n    const novoPrice = cache.novoPrice || await fetchNovoPrice();\n    const realms = cache.realms || await fetchRealms();\n    const districts = cache.districts || await fetchDistricts({\n        cache: {\n            realms,\n        },\n    });\n    const landConfigs = cache.landConfigs || await fetchLandConfigs({\n        cache: {\n            exchange,\n            novoPrice,\n        },\n    });\n    const lands = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'land',\n        },\n        customProcessor: ({row}) => {\n            const config = landConfigs.find(config => config.id === row.config_id);\n            const rentCost = convertAllCosts({\n                costs: [row.rent === 0 ? `${row.rent} OBSD` : row.rent],\n                exchange,\n                novoPrice,\n            });\n            return {\n                id: row.id,\n                assetId: row.asset_id,\n                owner: row.owner,\n                renter: row.renter === ''\n                    ? null\n                    : row.renter,\n                isOwnerOccupied: row.owner_occupied === 1,\n                isDistrictOwner: row.district_owned === 1,\n                isAvailableForRent: row.for_rent === 1,\n                lastStakeTime: row.last_stake * 1000,\n                rentExpireTime: row.rent_expire * 1000,\n                rentCost,\n                ownRentPriceObsd: config.plotRentAmount.obsdCost / config.rentTime,\n                externalRentPriceObsd: rentCost.obsdCost / config.rentTime,\n                config,\n                district: districts.find(district => district.id === row.district_id),\n            };\n        },\n    });\n\n    return lands;\n};\n\nmodule.exports = fetchLands;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMI,eAAe,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAMK,aAAa,GAAGL,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMM,cAAc,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AACtD,MAAMQ,WAAW,GAAGR,OAAO,CAAC,eAAe,CAAC;AAE5C,MAAMS,UAAU,GAAG,MAAAA,CAAO;EACtBC,KAAK,GAAG,CAAC;AACb,CAAC,KAAK;EACF,MAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAQ,KAAI,MAAMN,aAAa,CAAC,CAAC;EACxD,MAAMO,SAAS,GAAGF,KAAK,CAACE,SAAS,KAAI,MAAMN,cAAc,CAAC,CAAC;EAC3D,MAAMO,MAAM,GAAGH,KAAK,CAACG,MAAM,KAAI,MAAML,WAAW,CAAC,CAAC;EAClD,MAAMM,SAAS,GAAGJ,KAAK,CAACI,SAAS,KAAI,MAAMX,cAAc,CAAC;IACtDO,KAAK,EAAE;MACHG;IACJ;EACJ,CAAC,CAAC;EACF,MAAME,WAAW,GAAGL,KAAK,CAACK,WAAW,KAAI,MAAMR,gBAAgB,CAAC;IAC5DG,KAAK,EAAE;MACHC,QAAQ;MACRC;IACJ;EACJ,CAAC,CAAC;EACF,MAAMI,KAAK,GAAG,MAAMf,gBAAgB,CAAC;IACjCgB,MAAM,EAAE;MACJC,IAAI,EAAEhB,SAAS,CAACiB,IAAI;MACpBC,KAAK,EAAElB,SAAS,CAACiB,IAAI;MACrBE,KAAK,EAAE;IACX,CAAC;IACDC,eAAe,EAAEA,CAAC;MAACC;IAAG,CAAC,KAAK;MACxB,MAAMC,MAAM,GAAGT,WAAW,CAACU,IAAI,CAACD,MAAM,IAAIA,MAAM,CAACE,EAAE,KAAKH,GAAG,CAACI,SAAS,CAAC;MACtE,MAAMC,QAAQ,GAAGxB,eAAe,CAAC;QAC7ByB,KAAK,EAAE,CAACN,GAAG,CAACO,IAAI,KAAK,CAAC,GAAI,GAAEP,GAAG,CAACO,IAAK,OAAM,GAAGP,GAAG,CAACO,IAAI,CAAC;QACvDnB,QAAQ;QACRC;MACJ,CAAC,CAAC;MACF,OAAO;QACHc,EAAE,EAAEH,GAAG,CAACG,EAAE;QACVK,OAAO,EAAER,GAAG,CAACS,QAAQ;QACrBC,KAAK,EAAEV,GAAG,CAACU,KAAK;QAChBC,MAAM,EAAEX,GAAG,CAACW,MAAM,KAAK,EAAE,GACnB,IAAI,GACJX,GAAG,CAACW,MAAM;QAChBC,eAAe,EAAEZ,GAAG,CAACa,cAAc,KAAK,CAAC;QACzCC,eAAe,EAAEd,GAAG,CAACe,cAAc,KAAK,CAAC;QACzCC,kBAAkB,EAAEhB,GAAG,CAACiB,QAAQ,KAAK,CAAC;QACtCC,aAAa,EAAElB,GAAG,CAACmB,UAAU,GAAG,IAAI;QACpCC,cAAc,EAAEpB,GAAG,CAACqB,WAAW,GAAG,IAAI;QACtChB,QAAQ;QACRiB,gBAAgB,EAAErB,MAAM,CAACsB,cAAc,CAACC,QAAQ,GAAGvB,MAAM,CAACwB,QAAQ;QAClEC,qBAAqB,EAAErB,QAAQ,CAACmB,QAAQ,GAAGvB,MAAM,CAACwB,QAAQ;QAC1DxB,MAAM;QACN0B,QAAQ,EAAEpC,SAAS,CAACW,IAAI,CAACyB,QAAQ,IAAIA,QAAQ,CAACxB,EAAE,KAAKH,GAAG,CAAC4B,WAAW;MACxE,CAAC;IACL;EACJ,CAAC,CAAC;EAEF,OAAOnC,KAAK;AAChB,CAAC;AAEDoC,MAAM,CAACC,OAAO,GAAG5C,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}