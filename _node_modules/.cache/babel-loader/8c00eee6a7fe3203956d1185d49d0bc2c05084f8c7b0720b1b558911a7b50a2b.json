{"ast":null,"code":"import _regeneratorRuntime from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _=require('lodash');var CONTRACTS=require('../consts/CONTRACTS');var fetchAllWaxData=require('../../core/fetchAllWaxData');var convertPool=function convertPool(pool){var _pool$quantity$split=pool.quantity.split(' '),_pool$quantity$split2=_slicedToArray(_pool$quantity$split,2),quantity=_pool$quantity$split2[0],symbol=_pool$quantity$split2[1];return{quantity:Number(quantity),symbol:symbol,contract:pool.contract,fullTokenName:\"\".concat(symbol,\"+\").concat(pool.contract)};};var groupPools=function groupPools(pools,index){return _(pools).groupBy(function(pool){return\"\".concat(pool.symbols[index].symbol,\"+\").concat(pool.symbols[index].contract);}).value();};var fetchSwapPools=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var pools,groupedPools;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchAllWaxData({params:{code:CONTRACTS.SWAP2,scope:CONTRACTS.SWAP2,table:\"pools\"},customProcessor:function(){var _customProcessor=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2){var row,pool;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:row=_ref2.row;pool={id:row.id,fee:row.fee/100,symbols:[convertPool(row.tokenA),convertPool(row.tokenB)]};pool.symbols=[_objectSpread(_objectSpread({},pool.symbols[0]),{},{price:pool.symbols[1].quantity/pool.symbols[0].quantity}),_objectSpread(_objectSpread({},pool.symbols[1]),{},{price:pool.symbols[0].quantity/pool.symbols[1].quantity})];return _context.abrupt(\"return\",pool);case 4:case\"end\":return _context.stop();}},_callee);}));function customProcessor(_x){return _customProcessor.apply(this,arguments);}return customProcessor;}()});case 2:pools=_context2.sent;groupedPools=_.mergeWith(groupPools(pools,0),groupPools(pools,1),function(objValue,srcValue){if(_.isArray(objValue)){return objValue.concat(srcValue);}});return _context2.abrupt(\"return\",groupedPools);case 5:case\"end\":return _context2.stop();}},_callee2);}));return function fetchSwapPools(){return _ref.apply(this,arguments);};}();module.exports=fetchSwapPools;","map":{"version":3,"names":["_","require","CONTRACTS","fetchAllWaxData","convertPool","pool","_pool$quantity$split","quantity","split","_pool$quantity$split2","_slicedToArray","symbol","Number","contract","fullTokenName","concat","groupPools","pools","index","groupBy","symbols","value","fetchSwapPools","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","groupedPools","wrap","_callee2$","_context2","prev","next","params","code","SWAP2","scope","table","customProcessor","_customProcessor","_callee","_ref2","row","_callee$","_context","id","fee","tokenA","tokenB","_objectSpread","price","abrupt","stop","_x","apply","arguments","sent","mergeWith","objValue","srcValue","isArray","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/api/fetchSwapPools.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData = require('../../core/fetchAllWaxData');\n\nconst convertPool = (pool) => {\n    const [quantity, symbol] = pool.quantity.split(' ');\n\n    return {\n        quantity: Number(quantity),\n        symbol,\n        contract: pool.contract,\n        fullTokenName: `${symbol}+${pool.contract}`,\n    };\n};\n\nconst groupPools = (pools, index) => _(pools)\n    .groupBy(pool => `${pool.symbols[index].symbol}+${pool.symbols[index].contract}`)\n    .value();\n\nconst fetchSwapPools = async () => {\n    const pools = await fetchAllWaxData({\n      params: {\n          code: CONTRACTS.SWAP2,\n          scope: CONTRACTS.SWAP2,\n          table: \"pools\",\n      },\n      customProcessor: async ({row}) => {\n          const pool = {\n              id: row.id,\n              fee: row.fee/100,\n              symbols: [\n                  convertPool(row.tokenA),\n                  convertPool(row.tokenB),\n              ],\n          };\n  \n          pool.symbols = [\n              {\n                  ...pool.symbols[0],\n                  price: pool.symbols[1].quantity/pool.symbols[0].quantity,\n              },\n              {\n                  ...pool.symbols[1],\n                  price: pool.symbols[0].quantity/pool.symbols[1].quantity,\n              },\n          ];\n  \n          return pool;\n      },\n    });\n  \n    const groupedPools = _.mergeWith(\n        groupPools(pools, 0),\n        groupPools(pools, 1),\n        (objValue, srcValue) => {\n          if (_.isArray(objValue)) {\n            return objValue.concat(srcValue);\n          }\n        }\n      );\n  \n    return groupedPools;\n  };\n\nmodule.exports = fetchSwapPools;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}