{"ast":null,"code":"const _ = require('lodash');\nconst fetchLands = require(\"./fetchLands\");\nconst fetchAccountLands = async ({\n  accountName,\n  cache = {}\n}) => {\n  const lands = cache.lands || (await fetchLands({}));\n  const sets = _(lands).groupBy(land => land.district.realm.name).map((lands, realmName) => {\n    const qualifiedLands = _(lands).filter(land => {\n      const townhallAccount = land.district.accounts.find(account => account.accountName === accountName);\n      if (townhallAccount == null) {\n        return false;\n      }\n      return townhallAccount.stakedNovo >= 200;\n    }).value();\n    const ownLandsAvailable = _(qualifiedLands).filter(land => land.owner === accountName).filter(land => land.rentExpireTime === 0).filter(land => land.district.level >= 2).sortBy(land => -land.rentPriceObsd).value();\n    const externalLandsAvailable = _(qualifiedLands).filter(land => land.owner !== accountName).filter(land => !land.isOwnerOccupied).filter(land => land.rentExpireTime === 0).filter(land => land.isAvailableForRent).filter(land => land.district.level >= 2).sortBy(land => -land.rentPriceObsd).value();\n    const bestLands = _([...ownLandsAvailable, ...externalLandsAvailable]).map(land => {\n      if (land.owner === accountName) {\n        return {\n          ...land,\n          rentPriceObsd: land.ownRentPriceObsd\n        };\n      }\n      return {\n        ...land,\n        rentPriceObsd: land.externalRentPriceObsd\n      };\n    }).sortBy(land => -land.rentPriceObsd).value();\n    return {\n      realmName,\n      bestLands,\n      ownLandsAvailable,\n      externalLandsAvailable\n    };\n  }).value();\n  return {\n    lands: sets\n  };\n};\nmodule.exports = fetchAccountLands;","map":{"version":3,"names":["_","require","fetchLands","fetchAccountLands","accountName","cache","lands","sets","groupBy","land","district","realm","name","map","realmName","qualifiedLands","filter","townhallAccount","accounts","find","account","stakedNovo","value","ownLandsAvailable","owner","rentExpireTime","level","sortBy","rentPriceObsd","externalLandsAvailable","isOwnerOccupied","isAvailableForRent","bestLands","ownRentPriceObsd","externalRentPriceObsd","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountLands.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchLands = require(\"./fetchLands\");\n\nconst fetchAccountLands = async ({\n    accountName,\n    cache = {},\n}) => {\n    const lands = cache.lands || await fetchLands({});\n\n    const sets = _(lands)\n        .groupBy(land => land.district.realm.name)\n        .map((lands, realmName) => {\n            const qualifiedLands = _(lands)\n                .filter(land => {\n                    const townhallAccount = land.district.accounts.find(account => account.accountName === accountName);\n\n                    if (townhallAccount == null) {\n                        return false;\n                    }\n\n                    return townhallAccount.stakedNovo >= 200;\n                })\n                .value();\n            const ownLandsAvailable = _(qualifiedLands)\n                .filter(land => land.owner === accountName)\n                .filter(land => land.rentExpireTime === 0)\n                .filter(land => land.district.level >= 2)\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n\n            const externalLandsAvailable = _(qualifiedLands)\n                .filter(land => land.owner !== accountName)\n                .filter(land => !land.isOwnerOccupied)\n                .filter(land => land.rentExpireTime === 0)\n                .filter(land => land.isAvailableForRent)\n                .filter(land => land.district.level >= 2)\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n\n            const bestLands = _([\n                ...ownLandsAvailable,\n                ...externalLandsAvailable,\n            ])\n                .map(land => {\n                    if (land.owner === accountName) {\n                        return {\n                            ...land,\n                            rentPriceObsd: land.ownRentPriceObsd,\n                        };\n                    }\n\n                    return {\n                        ...land,\n                        rentPriceObsd: land.externalRentPriceObsd,\n                    };\n                })\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n            \n            return {\n                realmName,\n                bestLands,\n                ownLandsAvailable,\n                externalLandsAvailable,\n            };\n        })\n        .value();\n\n        return {\n            lands: sets,\n        };\n};\n\nmodule.exports = fetchAccountLands;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}