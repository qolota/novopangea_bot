{"ast":null,"code":"import _regeneratorRuntime from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _toConsumableArray from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";var _=require('lodash');var setBuildWage=require('./actions/setBuildWage');var wakeupWorkers=require('./actions/wakeupWorkers');var multiplyResources=require('./utils/multiplyResources');var sumResources=require('./utils/sumResources');var exchangeTokens=require('./actions/exchangeTokens');var getExchangeRate=require('./utils/getExchangeRate');var RESOURCES=require('./consts/RESOURSES');var MIN_TRANSACTION_VALUE=require('./consts/MIN_TRANSACTION_VALUE');var EXCHANGE_STRATEGY=require('./consts/EXCHANGE_STRATEGY');var findResource=require('./utils/findResource');var startShift=require('./actions/startShift');var _require=require('../utils/log'),log=_require.default;var renewRent=require('./actions/renewRent');var feedOneWorker=require('./actions/feedOneWorker');var stakeBuilding=require('./actions/stakeBuilding');var fetchAllGameData=require('./api/fetchAllGameData');var removeBuilding=require('./actions/removeBuilding');var setLandRent=require('./actions/setLandRent');var startUpgrade=require('./actions/startUpgrade');var finishUpgrade=require('./actions/finishUpgrade');var exchangeResources=require('./utils/exchangeResources');var _require2=require('./consts/ECONOMY_VALUES'),getEconomyValues=_require2.getEconomyValues;var findBuildings=function findBuildings(_ref){var buildings=_ref.buildings,realmName=_ref.realmName,level=_ref.level,buildingSetName=_ref.buildingSetName;return buildings.find(function(b){return b.realmName===realmName;}).buildings[level-1][buildingSetName];};var findLands=function findLands(_ref2){var lands=_ref2.lands,realmName=_ref2.realmName,landSetName=_ref2.landSetName;return lands.find(function(land){return land.realmName===realmName;})[landSetName];};// -------------------------------------------------------- //\n// ---------               BALANCE               ---------- //\n// -------------------------------------------------------- //\nvar MAX_OBSD_BALANCE=20;var getNextStateAfterTransferExcessObsdToNovo=function getNextStateAfterTransferExcessObsdToNovo(_ref3){var prevState=_ref3.prevState,accountName=_ref3.accountName;var obsdBalance=findResource({resources:prevState.resources,symbol:RESOURCES.OBSD});if(obsdBalance.value<=MAX_OBSD_BALANCE){return;}var excessObsResource={value:_.floor((obsdBalance.value-MAX_OBSD_BALANCE+3)/MIN_TRANSACTION_VALUE.NOVO)*MIN_TRANSACTION_VALUE.NOVO,symbol:RESOURCES.OBSD};return{action:'exchange',actions:[exchangeTokens({accountName:accountName,valueFrom:excessObsResource.value,symbolFrom:excessObsResource.symbol,symbolTo:RESOURCES.NOVO})],resources:sumResources({resources:[].concat(_toConsumableArray(prevState.resources),[{value:-excessObsResource.value,symbol:excessObsResource.symbol}])}),availableWorkers:_.cloneDeep(prevState.availableWorkers),availableBuildings:_.cloneDeep(prevState.availableBuildings),availableLands:_.cloneDeep(prevState.availableLands),settings:_.cloneDeep(prevState.settings)};};var getNextStateAfterTransferAllResourecesToObsd=function getNextStateAfterTransferAllResourecesToObsd(_ref4){var prevState=_ref4.prevState,exchange=_ref4.exchange,accountName=_ref4.accountName;var restBalances=_([RESOURCES.NOVOE,RESOURCES.NOVOM,RESOURCES.NOVOF]).map(function(symbol){return findResource({resources:prevState.resources,symbol:symbol});}).value();var hasRestResources=_.some(restBalances,function(b){return b.value>=MIN_TRANSACTION_VALUE[b.symbol];});if(!hasRestResources){return;}// convert all resources to OBSD\nvar exchangeRestResources=getExchangeRate({exchange:exchange,resources:_(restBalances).map(function(b){return{value:_.floor(b.value/MIN_TRANSACTION_VALUE[b.symbol])*MIN_TRANSACTION_VALUE[b.symbol],symbol:b.symbol};}).filter(function(b){return b.value>0;}).value(),exchangeStrategy:EXCHANGE_STRATEGY});var exchangedObsdBalance=sumResources({resources:_(exchangeRestResources).map(function(r){return{value:r.valueFrom,symbol:r.symbolFrom};}).value()});return{action:'exchange',actions:_(exchangeRestResources).map(function(b){return exchangeTokens({accountName:accountName,valueFrom:b.valueTo,symbolFrom:b.symbolTo,symbolTo:b.symbolFrom});}).value(),resources:sumResources({resources:[].concat(_toConsumableArray(prevState.resources),_toConsumableArray(exchangedObsdBalance),_toConsumableArray(_(exchangeRestResources).map(function(b){return{value:-b.valueTo,symbol:b.symbolTo};}).value()))}),availableWorkers:_.cloneDeep(prevState.availableWorkers),availableBuildings:_.cloneDeep(prevState.availableBuildings),availableLands:_.cloneDeep(prevState.availableLands),settings:_.cloneDeep(prevState.settings)};};// -------------------------------------------------------- //\n// ---------                JOB                  ---------- //\n// -------------------------------------------------------- //\nvar getNextStateAfterOwnShiftStart=function getNextStateAfterOwnShiftStart(_ref5){var prevState=_ref5.prevState,accountName=_ref5.accountName,exchange=_ref5.exchange,building=_ref5.building,worker=_ref5.worker,account=_ref5.account;var totalYield=multiplyResources({resources:building.shiftYield.costs,multiplier:worker.config.yieldMultiplier});var nextState=exchangeResources({accountName:accountName,exchange:exchange,balances:prevState.resources,maxBalances:account.maxBalances,requestedResources:worker.config.shiftCost.costs});if(nextState.action==='stop'){return nextState;}return{action:'start_own_shift',actions:[].concat(_toConsumableArray(nextState.actions),[startShift({accountName:accountName,assetId:worker.assetId,realmId:building.realmId,districtId:building.districtId,buildingId:building.id})]),resources:sumResources({resources:[].concat(_toConsumableArray(nextState.nextBalances),_toConsumableArray(totalYield))}),availableWorkers:_.cloneDeep(prevState.availableWorkers),availableBuildings:_.cloneDeep(prevState.availableBuildings)};};var getNextStateAfterExternalShiftStart=function getNextStateAfterExternalShiftStart(_ref6){var prevState=_ref6.prevState,accountName=_ref6.accountName,building=_ref6.building,worker=_ref6.worker,account=_ref6.account;return{action:'start_external_shift',actions:[startShift({accountName:accountName,assetId:worker.assetId,realmId:building.realmId,districtId:building.districtId,buildingId:building.id})],resources:sumResources({resources:[].concat(_toConsumableArray(prevState.resources),_toConsumableArray(multiplyResources({resources:building.contractWage.costs,multiplier:worker.config.wageMultiplier})))}),availableWorkers:_.cloneDeep(prevState.availableWorkers),availableBuildings:_.cloneDeep(prevState.availableBuildings)};};var getNextStateAfterShiftStart=function getNextStateAfterShiftStart(_ref7){var prevState=_ref7.prevState,accountName=_ref7.accountName,exchange=_ref7.exchange,account=_ref7.account;if(prevState.availableWorkers.length===0){return;}if(prevState.availableBuildings.length===0){return;}// find a suitable building for a next worker\nvar _prevState=_.cloneDeep(prevState);var worker=_prevState.availableWorkers.pop();var building=_prevState.availableBuildings.pop();building.numWorkers++;if(building.numWorkers<building.maxWorkers){_prevState.availableBuildings.push(building);}if(building.isOwnBuilding){return getNextStateAfterOwnShiftStart({prevState:_prevState,accountName:accountName,exchange:exchange,building:building,worker:worker,account:account});}return getNextStateAfterExternalShiftStart({prevState:_prevState,accountName:accountName,building:building,worker:worker,account:account});};var _prepShiftBuildings=function _prepShiftBuildings(_ref8){var accountName=_ref8.accountName,buildings=_ref8.buildings,level=_ref8.level;var economyValues=getEconomyValues();return _(buildings).map(function(building){return{id:building.id,realmId:building.district.realm.id,districtId:building.district.id,isOwnBuilding:building.owner===accountName,numWorkers:building.numWorkers,maxWorkers:building.config.workerCapacity,// wage fields for both own and external jobs\njobProfitObsd:building.jobProfitObsd,contractWage:building.contractWage,shiftYield:building.config.shiftYield};}).filter(function(building){return building.jobProfitObsd>economyValues.JOB_MIN_PROFITS_OBSD[level-1];}).sortBy(function(building){return building.jobProfitObsd;}).value();};var _getStartMixedShiftAction=function _getStartMixedShiftAction(_ref9){var accountName=_ref9.accountName,exchange=_ref9.exchange,account=_ref9.account,gameSettings=_ref9.gameSettings,realm=_ref9.realm,actionName=_ref9.actionName;var states=[{action:'init',resources:account.balances,availableWorkers:_.cloneDeep(realm.availableWorkers),availableBuildings:_.cloneDeep(realm.availableBuildings)}];while(true){var prevState=states[states.length-1];if(prevState.availableWorkers.length===0){break;}if(prevState.availableBuildings.length===0){break;}var nextStateTransferExcessObsdToNovo=getNextStateAfterTransferExcessObsdToNovo({prevState:prevState,accountName:accountName});if(nextStateTransferExcessObsdToNovo!=null){states.push(nextStateTransferExcessObsdToNovo);continue;}var nextStateAfterTransferAllResourecesToObsd=getNextStateAfterTransferAllResourecesToObsd({prevState:prevState,exchange:exchange,accountName:accountName});if(nextStateAfterTransferAllResourecesToObsd!=null){states.push(nextStateAfterTransferAllResourecesToObsd);continue;}var nextStateAfterShiftStart=getNextStateAfterShiftStart({prevState:prevState,accountName:accountName,exchange:exchange,account:account});if(nextStateAfterShiftStart!=null){if(nextStateAfterShiftStart.action==='stop'){log({project:gameSettings.name,message:nextStateAfterShiftStart.action.message});break;}states.push(nextStateAfterShiftStart);}}var actions=_(states).map(function(state){return state.actions;}).compact().flatten().value();if(actions.length===0){return;}return{action:actionName,isMultipleTransactions:true,actions:_.chunk(actions,16)};};var getStartMixedShiftAction=function getStartMixedShiftAction(_ref10){var accountName=_ref10.accountName,exchange=_ref10.exchange,account=_ref10.account,buildings=_ref10.buildings,workers=_ref10.workers,gameSettings=_ref10.gameSettings;if(workers.length===0){return;}var realms=_(workers).groupBy(function(worker){return worker.level;}).map(function(workers,level){var _level=Number(level);return _(workers).groupBy(function(worker){return worker.realmName;}).map(function(workers,realmName){return{realmName:realmName,level:_level,availableWorkers:workers,availableBuildings:_prepShiftBuildings({accountName:accountName,buildings:findBuildings({buildings:buildings,realmName:realmName,level:_level,buildingSetName:'bestJobBuildings'}),level:_level})};}).value();}).flatten().sortBy(function(realm){return-realm.level;}).value();// processing one realm at once\nvar realm=realms.find(function(realm){return realm.availableBuildings.length>0;});if(realm==null){log({project:gameSettings.name,message:\"[SKILLED] No available job buildings but \".concat(workers.length,\" available workers\")});return null;}return _getStartMixedShiftAction({accountName:accountName,exchange:exchange,account:account,gameSettings:gameSettings,realm:realm,actionName:'start_mixed_shifts'});};var getStartMixedUnskilledShiftAction=function getStartMixedUnskilledShiftAction(_ref11){var accountName=_ref11.accountName,exchange=_ref11.exchange,account=_ref11.account,buildings=_ref11.buildings,workers=_ref11.workers,gameSettings=_ref11.gameSettings;if(workers.length===0){return;}var realm={availableWorkers:workers,availableBuildings:_prepShiftBuildings({accountName:accountName,buildings:buildings,level:1})};// console.log(`[UNSKILLED] Job buildings: `, realm);\nreturn _getStartMixedShiftAction({accountName:accountName,exchange:exchange,account:account,gameSettings:gameSettings,realm:realm,actionName:'start_mixed_unskilled_shifts'});};// -------------------------------------------------------- //\n// ---------                REST                 ---------- //\n// -------------------------------------------------------- //\nvar getNextStateAfterRestStart=function getNextStateAfterRestStart(_ref12){var prevState=_ref12.prevState,accountName=_ref12.accountName,exchange=_ref12.exchange,account=_ref12.account;if(prevState.availableWorkers.length===0){return;}if(prevState.availableBuildings.length===0){return;}// find a suitable building for a next worker\nvar availableWorkers=_.cloneDeep(prevState.availableWorkers);var availableBuildings=_.cloneDeep(prevState.availableBuildings);var worker=availableWorkers.pop();var building=availableBuildings.pop();building.numWorkers++;if(building.numWorkers<building.maxWorkers){availableBuildings.push(building);}// calculate total cost depends on rest building ownership\nvar totalCosts;if(building.isOwnBuilding){totalCosts=sumResources({resources:[].concat(_toConsumableArray(building.shiftCost.costs),_toConsumableArray(worker.config.foodCost.costs))});}else{totalCosts=sumResources({resources:[].concat(_toConsumableArray(building.contractWage.costs),_toConsumableArray(worker.config.foodCost.costs))});}var nextState=exchangeResources({accountName:accountName,exchange:exchange,balances:prevState.resources,maxBalances:account.maxBalances,requestedResources:totalCosts});if(nextState.action==='stop'){return nextState;}return{action:building.isOwnBuilding?'start_own_rest':'start_external_rest',actions:[].concat(_toConsumableArray(nextState.actions),[feedOneWorker({accountName:accountName,buildingId:building.id,workerId:worker.id,realmId:building.realmId,districtId:building.districtId})]),resources:sumResources({resources:_toConsumableArray(nextState.nextBalances)}),availableWorkers:availableWorkers,availableBuildings:availableBuildings};};var _getStartMixedRestAction=function _getStartMixedRestAction(_ref13){var accountName=_ref13.accountName,exchange=_ref13.exchange,account=_ref13.account,gameSettings=_ref13.gameSettings,realm=_ref13.realm,actionName=_ref13.actionName;var states=[{action:'init',resources:account.balances,availableWorkers:_.cloneDeep(realm.availableWorkers),availableBuildings:_.cloneDeep(realm.availableBuildings)}];while(true){var prevState=states[states.length-1];if(prevState.availableWorkers.length===0){break;}if(prevState.availableBuildings.length===0){break;}var nextStateTransferExcessObsdToNovo=getNextStateAfterTransferExcessObsdToNovo({prevState:prevState,accountName:accountName});if(nextStateTransferExcessObsdToNovo!=null){states.push(nextStateTransferExcessObsdToNovo);continue;}var nextStateAfterTransferAllResourecesToObsd=getNextStateAfterTransferAllResourecesToObsd({prevState:prevState,exchange:exchange,accountName:accountName});if(nextStateAfterTransferAllResourecesToObsd!=null){states.push(nextStateAfterTransferAllResourecesToObsd);continue;}var nextStateAfterRestStart=getNextStateAfterRestStart({prevState:prevState,accountName:accountName,exchange:exchange,account:account});if(nextStateAfterRestStart!=null){if(nextStateAfterRestStart.action==='stop'){log({project:gameSettings.name,message:nextStateAfterRestStart.action.message});break;}states.push(nextStateAfterRestStart);}}var actions=_(states).map(function(state){return state.actions;}).compact().flatten().value();if(actions.length===0){return;}return{action:actionName,isMultipleTransactions:true,actions:_.chunk(actions,16)};};var _prepRestBuildings=function _prepRestBuildings(_ref14){var accountName=_ref14.accountName,buildings=_ref14.buildings,level=_ref14.level;var economyValues=getEconomyValues();return _(buildings).map(function(building){return{id:building.id,realmId:building.district.realm.id,districtId:building.district.id,isOwnBuilding:building.owner===accountName,numWorkers:building.numWorkers,maxWorkers:building.config.workerCapacity,// wage fields for both own and external jobs\nrestCostObsd:building.restCostObsd,contractWage:building.contractWage,shiftCost:building.config.shiftCost};}).filter(function(building){return building.restCostObsd<economyValues.REST_MAX_COST_OBSD[level-1];}).sortBy(function(building){return-building.restCostObsd;}).value();};var getStartMixedRestAction=function getStartMixedRestAction(_ref15){var accountName=_ref15.accountName,exchange=_ref15.exchange,account=_ref15.account,buildings=_ref15.buildings,workers=_ref15.workers,gameSettings=_ref15.gameSettings;if(workers.length===0){return;}var realms=_(workers).groupBy(function(worker){return worker.level;}).map(function(workers,level){var _level=Number(level);return _(workers).groupBy(function(worker){return worker.district.realm.name;}).map(function(workers,realmName){return{realmName:realmName,level:_level,availableWorkers:workers,availableBuildings:_prepRestBuildings({accountName:accountName,buildings:findBuildings({buildings:buildings,realmName:realmName,level:_level,buildingSetName:'bestRestBuildings'}),level:_level})};}).value();}).flatten().sortBy(function(realm){return-realm.level;}).value();// processing one realm at once\nvar realm=realms.find(function(realm){return realm.availableBuildings.length>0;});if(realm==null){log({project:gameSettings.name,message:\"[SKILLED] No available rest buildings but \".concat(workers.length,\" available workers\")});return null;}return _getStartMixedRestAction({accountName:accountName,exchange:exchange,account:account,gameSettings:gameSettings,realm:realm,actionName:'start_mixed_rests'});};var getStartMixedUnskilledRestAction=function getStartMixedUnskilledRestAction(_ref16){var accountName=_ref16.accountName,exchange=_ref16.exchange,account=_ref16.account,buildings=_ref16.buildings,workers=_ref16.workers,gameSettings=_ref16.gameSettings;if(workers.length===0){return;}var realms=_(workers).groupBy(function(worker){return worker.district.realm.name;}).map(function(workers,realmName){return{realmName:realmName,availableWorkers:workers,availableBuildings:_prepRestBuildings({accountName:accountName,buildings:findBuildings({buildings:buildings,realmName:realmName,level:1,buildingSetName:'bestUnskilledRestBuildings'}),level:1})};}).value();// processing one realm at once\nvar realm=realms.find(function(realm){return realm.availableBuildings.length>0;});if(realm==null){log({project:gameSettings.name,message:\"[UNSKILLED] No available rest buildings but \".concat(workers.length,\" available workers\")});return null;}return _getStartMixedRestAction({accountName:accountName,exchange:exchange,account:account,gameSettings:gameSettings,realm:realm,actionName:'start_mixed_unskilled_rests'});};// -------------------------------------------------------- //\n// ---------                 RENT                ---------- //\n// -------------------------------------------------------- //\nvar getRenewRentAction=function getRenewRentAction(_ref17){var accountName=_ref17.accountName,exchange=_ref17.exchange,account=_ref17.account,buildings=_ref17.buildings,gameSettings=_ref17.gameSettings;if(buildings.length===0){return;}var lands=_(buildings).map(function(building){return building.land;}).value();var totalCosts=sumResources({resources:_(lands).map(function(land){return land.config.plotRentAmount.costs;}).flatten().value()});var nextState=exchangeResources({accountName:accountName,exchange:exchange,balances:account.balances,maxBalances:account.maxBalances,requestedResources:totalCosts});if(nextState.action==='stop'){log({project:gameSettings.name,message:nextState.message});return null;}return{action:'renew_rent',actions:[].concat(_toConsumableArray(nextState.actions),[renewRent({accountName:accountName,landIds:_(lands).map(function(land){return land.id;}).value()})])};};var getNextStateAfterRentLandStart=function getNextStateAfterRentLandStart(_ref18){var prevState=_ref18.prevState,accountName=_ref18.accountName,landConfigs=_ref18.landConfigs,exchange=_ref18.exchange,account=_ref18.account;if(prevState.availableBuildings.length===0){return;}if(prevState.availableLands.length===0){return;}// find a suitable building for a next worker\nvar availableBuildings=_.cloneDeep(prevState.availableBuildings);var availableLands=_.cloneDeep(prevState.availableLands);var building=availableBuildings.pop();var land=availableLands.pop();var landConfig=_(landConfigs).sortBy(function(config){return config.rentTime;}).value()[0];// calculate total cost depends on land ownership\nvar totalCosts=[];if(land.isOwnLand){if(!land.isAvailableForRent){totalCosts=_toConsumableArray(landConfig.plotRentAmount.costs);}}else{totalCosts=_toConsumableArray(land.rentCost.costs);}var nextState=exchangeResources({accountName:accountName,exchange:exchange,balances:prevState.resources,maxBalances:account.maxBalances,requestedResources:totalCosts});if(nextState.action==='stop'){return nextState;}return{action:land.isOwnLand?'start_own_land_rent':'start_external_land_rent',actions:_.compact([].concat(_toConsumableArray(nextState.actions),[land.isOwnLand&&!land.isAvailableForRent?setLandRent({accountName:accountName,id:land.id,rentObsd:0,isOwnerOccupied:true,landConfigId:landConfig.id}):null,stakeBuilding({accountName:accountName,assetId:building.assetId,realmId:land.realmId,districtId:land.districtId,landId:land.id})])),resources:sumResources({resources:_toConsumableArray(nextState.nextBalances)}),availableBuildings:availableBuildings,availableLands:availableLands};};var getRentMixedLandsAction=function getRentMixedLandsAction(_ref19){var accountName=_ref19.accountName,exchange=_ref19.exchange,account=_ref19.account,lands=_ref19.lands,buildings=_ref19.buildings,landConfigs=_ref19.landConfigs,gameSettings=_ref19.gameSettings;var economyValues=getEconomyValues();var qualifiedBuildings=_(buildings).filter(function(building){return building.level>=economyValues.MIN_RENT_BUILDING_LEVELS[building.config.resourceType];}).value();if(qualifiedBuildings.length===0){return;}var realms=_(qualifiedBuildings).groupBy(function(building){return building.realmName;}).map(function(buildings,realmName){return{realmName:realmName,availableBuildings:buildings,availableLands:_(findLands({lands:lands,realmName:realmName,landSetName:'bestLands'})).map(function(land){return{id:land.id,realmId:land.district.realm.id,districtId:land.district.id,owner:land.owner,isOwnLand:land.owner===accountName,isAvailableForRent:land.isAvailableForRent,rentPriceObsd:land.rentPriceObsd,rentCost:land.rentCost};}).filter(function(land){return land.rentPriceObsd<economyValues.MAX_LAND_RENT_PRICE_OBSD;}).sortBy(function(land){return-land.rentPriceObsd;}).value()};}).value();// process one realm at a time\nvar realm=realms.find(function(realm){return realm.availableLands.length>0;});if(realm==null){log({project:gameSettings.name,message:\"No available lands but \".concat(qualifiedBuildings.length,\" available buildings: \").concat(qualifiedBuildings.map(function(b){return b.realmName;}).join(', '))});return;}var states=[{action:'init',resources:account.balances,availableBuildings:_.cloneDeep(realm.availableBuildings),availableLands:_.cloneDeep(realm.availableLands)}];while(true){var prevState=states[states.length-1];if(prevState.availableBuildings.length===0){break;}if(prevState.availableLands.length===0){break;}var nextStateTransferExcessObsdToNovo=getNextStateAfterTransferExcessObsdToNovo({prevState:prevState,accountName:accountName});if(nextStateTransferExcessObsdToNovo!=null){states.push(nextStateTransferExcessObsdToNovo);continue;}var nextStateAfterTransferAllResourecesToObsd=getNextStateAfterTransferAllResourecesToObsd({prevState:prevState,exchange:exchange,accountName:accountName});if(nextStateAfterTransferAllResourecesToObsd!=null){states.push(nextStateAfterTransferAllResourecesToObsd);continue;}var nextStateAfterRentLandStart=getNextStateAfterRentLandStart({prevState:prevState,accountName:accountName,exchange:exchange,landConfigs:landConfigs,account:account});if(nextStateAfterRentLandStart!=null){if(nextStateAfterRentLandStart.action==='stop'){log({project:gameSettings.name,message:nextStateAfterRentLandStart.action.message});break;}states.push(nextStateAfterRentLandStart);}}var actions=_(states).map(function(state){return state.actions;}).compact().flatten().value();if(actions.length===0){return;}return{action:'rent_mixed_lands',isMultipleTransactions:true,actions:_.chunk(actions,16)};};// -------------------------------------------------------- //\n// ---------               UPGRADE               ---------- //\n// -------------------------------------------------------- //\nvar getNextStateAfterStartWorkerUpgrade=function getNextStateAfterStartWorkerUpgrade(_ref20){var prevState=_ref20.prevState,accountName=_ref20.accountName,exchange=_ref20.exchange,account=_ref20.account;var settings=_.cloneDeep(prevState.settings);var _settings$pop=settings.pop(),worker=_settings$pop.worker,config=_settings$pop.config;var nextState=exchangeResources({accountName:accountName,exchange:exchange,balances:prevState.resources,maxBalances:account.maxBalances,requestedResources:config.upgradeCost.costs});if(nextState.action==='stop'){return nextState;}return{action:'upgrading_workers',actions:[].concat(_toConsumableArray(nextState.actions),[startUpgrade({accountName:accountName,assetId:worker.id})]),resources:sumResources({resources:_toConsumableArray(nextState.nextBalances)}),settings:settings};};var getStartWorkerUpgradesAction=function getStartWorkerUpgradesAction(_ref21){var account=_ref21.account,exchange=_ref21.exchange,accountName=_ref21.accountName,upgradeConfigs=_ref21.upgradeConfigs,workers=_ref21.workers,gameSettings=_ref21.gameSettings;if(workers.length===0){return;}var settings=_(workers).map(function(worker){return{worker:worker,config:upgradeConfigs.find(function(config){return config.key===worker.realmName;}).configs.find(function(config){return config.baseLevel===worker.level;})};}).value();var states=[{action:'init',resources:account.balances,settings:_.cloneDeep(settings)}];while(true){var prevState=states[states.length-1];if(prevState.settings.length===0){break;}var nextStateTransferExcessObsdToNovo=getNextStateAfterTransferExcessObsdToNovo({prevState:prevState,accountName:accountName});if(nextStateTransferExcessObsdToNovo!=null){states.push(nextStateTransferExcessObsdToNovo);continue;}var nextStateAfterTransferAllResourecesToObsd=getNextStateAfterTransferAllResourecesToObsd({prevState:prevState,exchange:exchange,accountName:accountName});if(nextStateAfterTransferAllResourecesToObsd!=null){states.push(nextStateAfterTransferAllResourecesToObsd);continue;}var nextStateAfterStartWorkerUpgrade=getNextStateAfterStartWorkerUpgrade({prevState:prevState,accountName:accountName,exchange:exchange,account:account});if(nextStateAfterStartWorkerUpgrade!=null){if(nextStateAfterStartWorkerUpgrade.action==='stop'){log({project:gameSettings.name,message:nextStateAfterStartWorkerUpgrade.action.message});break;}states.push(nextStateAfterStartWorkerUpgrade);}}var actions=_(states).map(function(state){return state.actions;}).compact().flatten().value();if(actions.length===0){return;}return{action:'upgrade_workers',isMultipleTransactions:true,actions:_.chunk(actions,16)};};var getFinishUpgradesAction=function getFinishUpgradesAction(_ref22){var accountName=_ref22.accountName,upgrades=_ref22.upgrades;var now=Date.now();var finishedUpgrades=_(upgrades).filter(function(upgrade){return upgrade.owner===accountName;}).filter(function(upgrade){return upgrade.endTime<now;}).value();if(finishedUpgrades.length===0){return;}return{action:'finish_upgrades',actions:_(finishedUpgrades).map(function(upgrade){return finishUpgrade({accountName:accountName,assetId:upgrade.assetId});}).value()};};// -------------------------------------------------------- //\n// ---------             ENTRY POIN              ---------- //\n// -------------------------------------------------------- //\nvar playGameCalcNextAction=/*#__PURE__*/function(){var _ref24=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref23){var accountName,gameSettings,economyValues,_yield$fetchAllGameDa,exchange,account,accountBuildings,accountWorkers,accountLands,accountTransfers,landConfigs,upgradeConfigs,upgrades,staleRealms,startMixedShiftsAction,startMixedUnskilledShiftsAction,startMixedUnskilledRestAction,startMixedRestsAction,startRenewRentAction,rentExternalLandsAction,startWorkerUpgradesAction,finishUpgradesAction;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:accountName=_ref23.accountName,gameSettings=_ref23.gameSettings;economyValues=getEconomyValues();_context.next=4;return fetchAllGameData({accountName:accountName});case 4:_yield$fetchAllGameDa=_context.sent;exchange=_yield$fetchAllGameDa.exchange;account=_yield$fetchAllGameDa.account;accountBuildings=_yield$fetchAllGameDa.accountBuildings;accountWorkers=_yield$fetchAllGameDa.accountWorkers;accountLands=_yield$fetchAllGameDa.accountLands;accountTransfers=_yield$fetchAllGameDa.accountTransfers;landConfigs=_yield$fetchAllGameDa.landConfigs;upgradeConfigs=_yield$fetchAllGameDa.upgradeConfigs;upgrades=_yield$fetchAllGameDa.upgrades;// showing alert if some buildings places in district with inappropriate town hall level\nif(accountBuildings.ownStaleBuildings.length>0){staleRealms=_(accountBuildings.ownStaleBuildings).map(function(building){return building.district.realm.name;}).uniq().value();log({project:gameSettings.name,message:\"[ACTION NEEDED] \".concat(accountBuildings.ownStaleBuildings.length,\" stale buildings, need to be moved to another district, relams: \").concat(staleRealms.join(', '))});}// wake up all available workers\nif(!(accountWorkers.readyToWakeupWorkers.length>0)){_context.next=17;break;}return _context.abrupt(\"return\",{action:'wakeup',actions:[wakeupWorkers({accountName:accountName,workerIds:_(accountWorkers.readyToWakeupWorkers).map(function(worker){return worker.id;}).value()})]});case 17:if(!(accountBuildings.ownBuildingsWithoutWageSet.length>0)){_context.next=19;break;}return _context.abrupt(\"return\",{action:'set_building_wage',actions:_(accountBuildings.ownBuildingsWithoutWageSet).map(function(b){return setBuildWage({accountName:accountName,id:b.id,wageObsd:b.config.minimumWage.obsdCost,isOnlyOwnWorkersAllowed:true,minWorkerLevel:1});}).value()});case 19:if(!(accountBuildings.ownBuildingsExpiredExternalRentSet.length>0)){_context.next=21;break;}return _context.abrupt(\"return\",{action:'cancel_external_rent',actions:_(accountBuildings.ownBuildingsExpiredExternalRentSet).map(function(building){return removeBuilding({accountName:accountName,buildingId:building.id});}).value()});case 21:startMixedShiftsAction=getStartMixedShiftAction({accountName:accountName,exchange:exchange,account:account,buildings:accountBuildings.buildings,workers:_toConsumableArray(accountWorkers.readyToWorkWorkers),gameSettings:gameSettings});startMixedUnskilledShiftsAction=getStartMixedUnskilledShiftAction({accountName:accountName,exchange:exchange,account:account,buildings:accountBuildings.unskilledJobBuildings,workers:accountWorkers.readyToWorkUnskilledWorkers,gameSettings:gameSettings});startMixedUnskilledRestAction=getStartMixedUnskilledRestAction({accountName:accountName,exchange:exchange,account:account,buildings:accountBuildings.buildings,workers:accountWorkers.readyToRestUnskilledWorkers,gameSettings:gameSettings});startMixedRestsAction=getStartMixedRestAction({accountName:accountName,exchange:exchange,account:account,buildings:accountBuildings.buildings,workers:accountWorkers.readyToRestWorkers,gameSettings:gameSettings});startRenewRentAction=getRenewRentAction({accountName:accountName,exchange:exchange,account:account,buildings:accountBuildings.ownBuildingsExpiredRentSet,gameSettings:gameSettings});rentExternalLandsAction=getRentMixedLandsAction({accountName:accountName,exchange:exchange,account:account,lands:accountLands.lands,buildings:accountTransfers.buildings,landConfigs:landConfigs,gameSettings:gameSettings});startWorkerUpgradesAction=getStartWorkerUpgradesAction({account:account,exchange:exchange,accountName:accountName,upgradeConfigs:upgradeConfigs.workers,workers:accountWorkers.readyToUpgradeWorkers,gameSettings:gameSettings});finishUpgradesAction=getFinishUpgradesAction({accountName:accountName,upgrades:upgrades});if(!(finishUpgradesAction!=null)){_context.next=31;break;}return _context.abrupt(\"return\",finishUpgradesAction);case 31:if(!(economyValues.ENABLE_WORKER_UPGRADES&&startWorkerUpgradesAction!=null)){_context.next=33;break;}return _context.abrupt(\"return\",startWorkerUpgradesAction);case 33:if(!(economyValues.ENABLE_RENT_EXTERNAL_LANDS&&rentExternalLandsAction!=null)){_context.next=35;break;}return _context.abrupt(\"return\",rentExternalLandsAction);case 35:if(!(economyValues.ENABLE_REST_SKILLED_WORKERS&&startMixedRestsAction!=null)){_context.next=37;break;}return _context.abrupt(\"return\",startMixedRestsAction);case 37:if(!(economyValues.ENABLE_REST_UNSKILLED_WORKERS&&startMixedUnskilledRestAction!=null)){_context.next=39;break;}return _context.abrupt(\"return\",startMixedUnskilledRestAction);case 39:if(!(economyValues.ENABLE_RENEW_RENT_LANDS&&startRenewRentAction!=null)){_context.next=41;break;}return _context.abrupt(\"return\",startRenewRentAction);case 41:if(!(economyValues.ENABLE_SHIFT_SKILLED_WORKERS&&startMixedShiftsAction!=null)){_context.next=43;break;}return _context.abrupt(\"return\",startMixedShiftsAction);case 43:if(!(economyValues.ENABLE_SHIFT_UNSKILLED_WORKERS&&startMixedUnskilledShiftsAction!=null)){_context.next=45;break;}return _context.abrupt(\"return\",startMixedUnskilledShiftsAction);case 45:return _context.abrupt(\"return\",{action:'wait',message:\"Nothing to do for \".concat(accountName)});case 46:case\"end\":return _context.stop();}},_callee);}));return function playGameCalcNextAction(_x){return _ref24.apply(this,arguments);};}();export default playGameCalcNextAction;","map":{"version":3,"names":["_","require","setBuildWage","wakeupWorkers","multiplyResources","sumResources","exchangeTokens","getExchangeRate","RESOURCES","MIN_TRANSACTION_VALUE","EXCHANGE_STRATEGY","findResource","startShift","_require","log","default","renewRent","feedOneWorker","stakeBuilding","fetchAllGameData","removeBuilding","setLandRent","startUpgrade","finishUpgrade","exchangeResources","_require2","getEconomyValues","findBuildings","_ref","buildings","realmName","level","buildingSetName","find","b","findLands","_ref2","lands","landSetName","land","MAX_OBSD_BALANCE","getNextStateAfterTransferExcessObsdToNovo","_ref3","prevState","accountName","obsdBalance","resources","symbol","OBSD","value","excessObsResource","floor","NOVO","action","actions","valueFrom","symbolFrom","symbolTo","concat","_toConsumableArray","availableWorkers","cloneDeep","availableBuildings","availableLands","settings","getNextStateAfterTransferAllResourecesToObsd","_ref4","exchange","restBalances","NOVOE","NOVOM","NOVOF","map","hasRestResources","some","exchangeRestResources","filter","exchangeStrategy","exchangedObsdBalance","r","valueTo","getNextStateAfterOwnShiftStart","_ref5","building","worker","account","totalYield","shiftYield","costs","multiplier","config","yieldMultiplier","nextState","balances","maxBalances","requestedResources","shiftCost","assetId","realmId","districtId","buildingId","id","nextBalances","getNextStateAfterExternalShiftStart","_ref6","contractWage","wageMultiplier","getNextStateAfterShiftStart","_ref7","length","_prevState","pop","numWorkers","maxWorkers","push","isOwnBuilding","_prepShiftBuildings","_ref8","economyValues","district","realm","owner","workerCapacity","jobProfitObsd","JOB_MIN_PROFITS_OBSD","sortBy","_getStartMixedShiftAction","_ref9","gameSettings","actionName","states","nextStateTransferExcessObsdToNovo","nextStateAfterTransferAllResourecesToObsd","nextStateAfterShiftStart","project","name","message","state","compact","flatten","isMultipleTransactions","chunk","getStartMixedShiftAction","_ref10","workers","realms","groupBy","_level","Number","getStartMixedUnskilledShiftAction","_ref11","getNextStateAfterRestStart","_ref12","totalCosts","foodCost","workerId","_getStartMixedRestAction","_ref13","nextStateAfterRestStart","_prepRestBuildings","_ref14","restCostObsd","REST_MAX_COST_OBSD","getStartMixedRestAction","_ref15","getStartMixedUnskilledRestAction","_ref16","getRenewRentAction","_ref17","plotRentAmount","landIds","getNextStateAfterRentLandStart","_ref18","landConfigs","landConfig","rentTime","isOwnLand","isAvailableForRent","rentCost","rentObsd","isOwnerOccupied","landConfigId","landId","getRentMixedLandsAction","_ref19","qualifiedBuildings","MIN_RENT_BUILDING_LEVELS","resourceType","rentPriceObsd","MAX_LAND_RENT_PRICE_OBSD","join","nextStateAfterRentLandStart","getNextStateAfterStartWorkerUpgrade","_ref20","_settings$pop","upgradeCost","getStartWorkerUpgradesAction","_ref21","upgradeConfigs","key","configs","baseLevel","nextStateAfterStartWorkerUpgrade","getFinishUpgradesAction","_ref22","upgrades","now","Date","finishedUpgrades","upgrade","endTime","playGameCalcNextAction","_ref24","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref23","_yield$fetchAllGameDa","accountBuildings","accountWorkers","accountLands","accountTransfers","staleRealms","startMixedShiftsAction","startMixedUnskilledShiftsAction","startMixedUnskilledRestAction","startMixedRestsAction","startRenewRentAction","rentExternalLandsAction","startWorkerUpgradesAction","finishUpgradesAction","wrap","_callee$","_context","prev","next","sent","ownStaleBuildings","uniq","readyToWakeupWorkers","abrupt","workerIds","ownBuildingsWithoutWageSet","wageObsd","minimumWage","obsdCost","isOnlyOwnWorkersAllowed","minWorkerLevel","ownBuildingsExpiredExternalRentSet","readyToWorkWorkers","unskilledJobBuildings","readyToWorkUnskilledWorkers","readyToRestUnskilledWorkers","readyToRestWorkers","ownBuildingsExpiredRentSet","readyToUpgradeWorkers","ENABLE_WORKER_UPGRADES","ENABLE_RENT_EXTERNAL_LANDS","ENABLE_REST_SKILLED_WORKERS","ENABLE_REST_UNSKILLED_WORKERS","ENABLE_RENEW_RENT_LANDS","ENABLE_SHIFT_SKILLED_WORKERS","ENABLE_SHIFT_UNSKILLED_WORKERS","stop","_x","apply","arguments"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/playGameCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst setBuildWage = require('./actions/setBuildWage');\nconst wakeupWorkers = require('./actions/wakeupWorkers');\nconst multiplyResources = require('./utils/multiplyResources');\nconst sumResources = require('./utils/sumResources');\nconst exchangeTokens = require('./actions/exchangeTokens');\nconst getExchangeRate = require('./utils/getExchangeRate');\nconst RESOURCES = require('./consts/RESOURSES');\nconst MIN_TRANSACTION_VALUE = require('./consts/MIN_TRANSACTION_VALUE');\nconst EXCHANGE_STRATEGY = require('./consts/EXCHANGE_STRATEGY');\nconst findResource = require('./utils/findResource');\nconst startShift = require('./actions/startShift');\nconst { default: log} = require('../utils/log');\nconst renewRent = require('./actions/renewRent');\nconst feedOneWorker = require('./actions/feedOneWorker');\nconst stakeBuilding = require('./actions/stakeBuilding');\nconst fetchAllGameData = require('./api/fetchAllGameData');\nconst removeBuilding = require('./actions/removeBuilding');\nconst setLandRent = require('./actions/setLandRent');\nconst startUpgrade = require('./actions/startUpgrade');\nconst finishUpgrade = require('./actions/finishUpgrade');\nconst exchangeResources = require('./utils/exchangeResources');\nconst {\n    getEconomyValues,\n} = require('./consts/ECONOMY_VALUES');\n\nconst findBuildings = ({\n    buildings,\n    realmName,\n    level,\n    buildingSetName,\n}) => {\n    return buildings\n        .find(b => b.realmName === realmName)\n        .buildings[level - 1][buildingSetName];\n};\n\nconst findLands = ({\n    lands,\n    realmName,\n    landSetName,\n}) => {\n    return lands.find(land => land.realmName === realmName)[landSetName];\n};\n\n// -------------------------------------------------------- //\n// ---------               BALANCE               ---------- //\n// -------------------------------------------------------- //\nconst MAX_OBSD_BALANCE = 20;\n\nconst getNextStateAfterTransferExcessObsdToNovo = ({\n    prevState,\n    accountName,\n}) => {\n    const obsdBalance = findResource({\n        resources: prevState.resources,\n        symbol: RESOURCES.OBSD,\n    });\n    \n    if (obsdBalance.value <= MAX_OBSD_BALANCE) {\n        return;\n    }\n\n    const excessObsResource = {\n        value: _.floor((obsdBalance.value - MAX_OBSD_BALANCE + 3) / MIN_TRANSACTION_VALUE.NOVO) * MIN_TRANSACTION_VALUE.NOVO,\n        symbol: RESOURCES.OBSD,\n    };\n\n    return {\n        action: 'exchange',\n        actions: [\n            exchangeTokens({\n                accountName,\n                valueFrom: excessObsResource.value,\n                symbolFrom: excessObsResource.symbol,\n                symbolTo: RESOURCES.NOVO,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                {\n                    value: -excessObsResource.value,\n                    symbol: excessObsResource.symbol,\n                },\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n        availableLands: _.cloneDeep(prevState.availableLands),\n        settings: _.cloneDeep(prevState.settings),\n    };\n};\n\nconst getNextStateAfterTransferAllResourecesToObsd = ({\n    prevState,\n    exchange,\n    accountName,\n}) => {\n    const restBalances = _([\n        RESOURCES.NOVOE,\n        RESOURCES.NOVOM,\n        RESOURCES.NOVOF,\n    ])\n        .map(symbol => findResource({\n            resources: prevState.resources,\n            symbol,\n        }))\n        .value();\n    const hasRestResources = _.some(restBalances, b => {\n        return b.value >= MIN_TRANSACTION_VALUE[b.symbol];\n    });\n\n    if (!hasRestResources) {\n        return;\n    }\n\n    // convert all resources to OBSD\n    const exchangeRestResources = getExchangeRate({\n        exchange,\n        resources: _(restBalances)\n            .map(b => ({\n                value: _.floor(b.value / MIN_TRANSACTION_VALUE[b.symbol]) * MIN_TRANSACTION_VALUE[b.symbol],\n                symbol: b.symbol,\n            }))\n            .filter(b => b.value > 0)\n            .value(),\n        exchangeStrategy: EXCHANGE_STRATEGY,\n    });\n    const exchangedObsdBalance = sumResources({\n        resources: _(exchangeRestResources)\n            .map(r => ({\n                value: r.valueFrom,\n                symbol: r.symbolFrom,\n            }))\n            .value(),\n    });\n\n    return {\n        action: 'exchange',\n        actions: _(exchangeRestResources)\n            .map(b => exchangeTokens({\n                accountName,\n                valueFrom: b.valueTo,\n                symbolFrom: b.symbolTo,\n                symbolTo: b.symbolFrom,\n            }))\n            .value(),\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                ...exchangedObsdBalance,\n                ..._(exchangeRestResources)\n                    .map(b => ({\n                        value: -b.valueTo,\n                        symbol: b.symbolTo,\n                    }))\n                    .value(),\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n        availableLands: _.cloneDeep(prevState.availableLands),\n        settings: _.cloneDeep(prevState.settings),\n    };\n};\n\n// -------------------------------------------------------- //\n// ---------                JOB                  ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterOwnShiftStart = ({\n    prevState,\n    accountName,\n    exchange,\n    building,\n    worker,\n    account,\n}) => {\n    const totalYield = multiplyResources({\n        resources: building.shiftYield.costs,\n        multiplier: worker.config.yieldMultiplier,\n    });\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: worker.config.shiftCost.costs,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: 'start_own_shift',\n        actions: [\n            ...nextState.actions,\n            startShift({\n                accountName,\n                assetId: worker.assetId,\n                realmId: building.realmId,\n                districtId: building.districtId,\n                buildingId: building.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n                ...totalYield,\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    };\n};\n\nconst getNextStateAfterExternalShiftStart = ({\n    prevState,\n    accountName,\n    building,\n    worker,\n    account, // TODO validate max storage capacity\n}) => {\n    return {\n        action: 'start_external_shift',\n        actions: [\n            startShift({\n                accountName,\n                assetId: worker.assetId,\n                realmId: building.realmId,\n                districtId: building.districtId,\n                buildingId: building.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                // total shift wage\n                ...multiplyResources({\n                    resources: building.contractWage.costs,\n                    multiplier: worker.config.wageMultiplier,\n                }),\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    };\n};\n\nconst getNextStateAfterShiftStart = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableWorkers.length === 0) {\n        return;\n    }\n\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const _prevState = _.cloneDeep(prevState);\n    const worker = _prevState.availableWorkers.pop();\n    const building = _prevState.availableBuildings.pop();\n    building.numWorkers++;\n\n    if (building.numWorkers < building.maxWorkers) {\n        _prevState.availableBuildings.push(building);\n    }\n\n    if (building.isOwnBuilding) {\n        return getNextStateAfterOwnShiftStart({\n            prevState: _prevState,\n            accountName,\n            exchange,\n            building,\n            worker,\n            account,\n        });\n    }\n\n    return getNextStateAfterExternalShiftStart({\n        prevState: _prevState,\n        accountName,\n        building,\n        worker,\n        account,\n    });\n};\n\nconst _prepShiftBuildings = ({\n    accountName,\n    buildings,\n    level,\n}) => {\n    const economyValues = getEconomyValues();\n    return _(buildings)\n        .map(building => ({\n            id: building.id,\n            realmId: building.district.realm.id,\n            districtId: building.district.id,\n            isOwnBuilding: building.owner === accountName,\n            numWorkers: building.numWorkers,\n            maxWorkers: building.config.workerCapacity,\n            // wage fields for both own and external jobs\n            jobProfitObsd: building.jobProfitObsd,\n            contractWage: building.contractWage,\n            shiftYield: building.config.shiftYield,\n        }))\n        .filter(building => building.jobProfitObsd > economyValues.JOB_MIN_PROFITS_OBSD[level - 1])\n        .sortBy(building => building.jobProfitObsd)\n        .value();\n};\n\nconst _getStartMixedShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName,\n}) => {\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableWorkers: _.cloneDeep(realm.availableWorkers),\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableWorkers.length === 0) {\n            break;\n        }\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterShiftStart = getNextStateAfterShiftStart({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterShiftStart != null) {\n            if (nextStateAfterShiftStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterShiftStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterShiftStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n\n    return {\n        action: actionName,\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst getStartMixedShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.level)\n        .map((workers, level) => {\n            const _level = Number(level);\n            return _(workers)\n                .groupBy(worker => worker.realmName)\n                .map((workers, realmName) => ({\n                    realmName,\n                    level: _level,\n                    availableWorkers: workers,\n                    availableBuildings: _prepShiftBuildings({\n                        accountName,\n                        buildings: findBuildings({\n                            buildings,\n                            realmName,\n                            level: _level,\n                            buildingSetName: 'bestJobBuildings'\n                        }),\n                        level: _level,\n                    }),\n                }))\n                .value();\n        })\n        .flatten()\n        .sortBy(realm => -realm.level)\n        .value();\n\n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[SKILLED] No available job buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_shifts',\n    });\n};\n\nconst getStartMixedUnskilledShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n    \n    const realm = {\n        availableWorkers: workers,\n        availableBuildings: _prepShiftBuildings({\n            accountName,\n            buildings,\n            level: 1,\n        }),\n    };\n    // console.log(`[UNSKILLED] Job buildings: `, realm);\n\n    return _getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_unskilled_shifts',\n    });\n};\n\n// -------------------------------------------------------- //\n// ---------                REST                 ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterRestStart = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableWorkers.length === 0) {\n        return;\n    }\n\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const availableWorkers = _.cloneDeep(prevState.availableWorkers);\n    const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n    const worker = availableWorkers.pop();\n    const building = availableBuildings.pop();\n    building.numWorkers++;\n\n    if (building.numWorkers < building.maxWorkers) {\n        availableBuildings.push(building);\n    }\n\n    // calculate total cost depends on rest building ownership\n    let totalCosts;\n    if (building.isOwnBuilding) {\n        totalCosts = sumResources({\n            resources: [\n                ...building.shiftCost.costs,\n                ...worker.config.foodCost.costs,\n            ],\n        });\n    } else {\n        totalCosts = sumResources({\n            resources: [\n                ...building.contractWage.costs,\n                ...worker.config.foodCost.costs,\n            ],\n        });\n    }\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: building.isOwnBuilding\n            ? 'start_own_rest'\n            : 'start_external_rest',\n        actions: [\n            ...nextState.actions,\n            feedOneWorker({\n                accountName,\n                buildingId: building.id,\n                workerId: worker.id,\n                realmId: building.realmId,\n                districtId: building.districtId,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        availableWorkers,\n        availableBuildings,\n    };\n};\n\nconst _getStartMixedRestAction = ({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName,\n}) => {\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableWorkers: _.cloneDeep(realm.availableWorkers),\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableWorkers.length === 0) {\n            break;\n        }\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterRestStart = getNextStateAfterRestStart({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterRestStart != null) {\n            if (nextStateAfterRestStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterRestStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterRestStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n    \n    return {\n        action: actionName,\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst _prepRestBuildings = ({\n    accountName,\n    buildings,\n    level,\n}) => {\n    const economyValues = getEconomyValues();\n    return _(buildings)\n        .map(building => ({\n            id: building.id,\n            realmId: building.district.realm.id,\n            districtId: building.district.id,\n            isOwnBuilding: building.owner === accountName,\n            numWorkers: building.numWorkers,\n            maxWorkers: building.config.workerCapacity,\n            // wage fields for both own and external jobs\n            restCostObsd: building.restCostObsd,\n            contractWage: building.contractWage,\n            shiftCost: building.config.shiftCost,\n        }))\n        .filter(building => building.restCostObsd < economyValues.REST_MAX_COST_OBSD[level - 1])\n        .sortBy(building => -building.restCostObsd)\n        .value();\n};\n\nconst getStartMixedRestAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.level)\n        .map((workers, level) => {\n            const _level = Number(level);\n            return _(workers)\n                .groupBy(worker => worker.district.realm.name)\n                .map((workers, realmName) => ({\n                    realmName,\n                    level: _level,\n                    availableWorkers: workers,\n                    availableBuildings: _prepRestBuildings({\n                        accountName,\n                        buildings: findBuildings({\n                            buildings,\n                            realmName,\n                            level: _level,\n                            buildingSetName: 'bestRestBuildings'\n                        }),\n                        level: _level,\n                    }),\n                }))\n                .value();\n        })\n        .flatten()\n        .sortBy(realm => -realm.level)\n        .value();\n    \n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[SKILLED] No available rest buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_rests',\n    });\n};\n\nconst getStartMixedUnskilledRestAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.district.realm.name)\n        .map((workers, realmName) => ({\n            realmName,\n            availableWorkers: workers,\n            availableBuildings: _prepRestBuildings({\n                accountName,\n                buildings: findBuildings({\n                    buildings,\n                    realmName,\n                    level: 1,\n                    buildingSetName: 'bestUnskilledRestBuildings'\n                }),\n                level: 1,\n            }),\n        }))\n        .value();\n    \n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[UNSKILLED] No available rest buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_unskilled_rests',\n    });\n};\n\n// -------------------------------------------------------- //\n// ---------                 RENT                ---------- //\n// -------------------------------------------------------- //\nconst getRenewRentAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    gameSettings,\n}) => {\n    if (buildings.length === 0) {\n        return;\n    }\n\n    const lands = _(buildings)\n        .map(building => building.land)\n        .value();\n    \n    const totalCosts = sumResources({\n        resources: _(lands)\n            .map(land => land.config.plotRentAmount.costs)\n            .flatten()\n            .value(),\n    });\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: account.balances,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        log({\n            project: gameSettings.name,\n            message: nextState.message,\n        });\n        return null;\n    }\n\n    return {\n        action: 'renew_rent',\n        actions: [\n            ...nextState.actions,\n            renewRent({\n                accountName,\n                landIds: _(lands)\n                    .map(land => land.id)\n                    .value(),\n            }),\n        ],\n    };\n};\n\nconst getNextStateAfterRentLandStart = ({\n    prevState,\n    accountName,\n    landConfigs,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    if (prevState.availableLands.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n    const availableLands = _.cloneDeep(prevState.availableLands);\n    const building = availableBuildings.pop();\n    const land = availableLands.pop();\n    const landConfig = _(landConfigs)\n        .sortBy(config => config.rentTime)\n        .value()[0];\n\n    // calculate total cost depends on land ownership\n    let totalCosts = [];\n    if (land.isOwnLand) {\n        if (!land.isAvailableForRent) {\n            totalCosts = [\n                ...landConfig.plotRentAmount.costs,\n            ];\n        }\n    } else {\n        totalCosts = [\n            ...land.rentCost.costs,\n        ];\n    }\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: land.isOwnLand\n            ? 'start_own_land_rent'\n            : 'start_external_land_rent',\n        actions: _.compact([\n            ...nextState.actions,\n            land.isOwnLand && !land.isAvailableForRent\n                ? setLandRent({\n                    accountName,\n                    id: land.id,\n                    rentObsd: 0,\n                    isOwnerOccupied: true,\n                    landConfigId: landConfig.id,\n                })\n                : null,\n            stakeBuilding({\n                accountName,\n                assetId: building.assetId,\n                realmId: land.realmId,\n                districtId: land.districtId,\n                landId: land.id,\n            }),\n        ]),\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        availableBuildings,\n        availableLands,\n    };\n};\n\nconst getRentMixedLandsAction = ({\n    accountName,\n    exchange,\n    account,\n    lands,\n    buildings,\n    landConfigs,\n    gameSettings,\n}) => {\n    const economyValues = getEconomyValues();\n    const qualifiedBuildings = _(buildings)\n        .filter(building => building.level >= economyValues.MIN_RENT_BUILDING_LEVELS[building.config.resourceType])\n        .value();\n\n    if (qualifiedBuildings.length === 0) {\n        return;\n    }\n\n    const realms = _(qualifiedBuildings)\n        .groupBy(building => building.realmName)\n        .map((buildings, realmName) => ({\n            realmName,\n            availableBuildings: buildings,\n            availableLands: _(findLands({\n                lands,\n                realmName,\n                landSetName: 'bestLands',\n            }))\n                .map(land => ({\n                    id: land.id,\n                    realmId: land.district.realm.id,\n                    districtId: land.district.id,\n                    owner: land.owner,\n                    isOwnLand: land.owner === accountName,\n                    isAvailableForRent: land.isAvailableForRent,\n                    rentPriceObsd: land.rentPriceObsd,\n                    rentCost: land.rentCost,\n                }))\n                .filter(land => land.rentPriceObsd < economyValues.MAX_LAND_RENT_PRICE_OBSD)\n                .sortBy(land => -land.rentPriceObsd)\n                .value(),\n        }))\n        .value();\n\n    // process one realm at a time\n    const realm = realms.find(realm => realm.availableLands.length > 0);\n\n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `No available lands but ${qualifiedBuildings.length} available buildings: ${qualifiedBuildings.map(b => b.realmName).join(', ')}`,\n        });\n        return;\n    }\n\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n            availableLands: _.cloneDeep(realm.availableLands),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n        if (prevState.availableLands.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterRentLandStart = getNextStateAfterRentLandStart({\n            prevState,\n            accountName,\n            exchange,\n            landConfigs,\n            account,\n        });\n\n        if (nextStateAfterRentLandStart != null) {\n            if (nextStateAfterRentLandStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterRentLandStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterRentLandStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n\n    if (actions.length === 0) {\n        return;\n    }\n\n    return {\n        action: 'rent_mixed_lands',\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\n// -------------------------------------------------------- //\n// ---------               UPGRADE               ---------- //\n// -------------------------------------------------------- //\n\nconst getNextStateAfterStartWorkerUpgrade = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    const settings = _.cloneDeep(prevState.settings);\n    const {\n        worker,\n        config,\n    } = settings.pop();\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: config.upgradeCost.costs,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: 'upgrading_workers',\n        actions: [\n            ...nextState.actions,\n            startUpgrade({\n                accountName,\n                assetId: worker.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        settings,\n    };\n};\n\nconst getStartWorkerUpgradesAction = ({\n    account,\n    exchange,\n    accountName,\n    upgradeConfigs,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const settings = _(workers)\n        .map(worker => ({\n            worker,\n            config: upgradeConfigs\n                .find(config => config.key === worker.realmName)\n                .configs\n                .find(config => config.baseLevel === worker.level),\n        }))\n        .value();\n\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            settings: _.cloneDeep(settings),\n        },\n    ];\n\n    while(true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.settings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterStartWorkerUpgrade = getNextStateAfterStartWorkerUpgrade({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterStartWorkerUpgrade != null) {\n            if (nextStateAfterStartWorkerUpgrade.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterStartWorkerUpgrade.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterStartWorkerUpgrade);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n    \n    return {\n        action: 'upgrade_workers',\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst getFinishUpgradesAction = ({\n    accountName,\n    upgrades,\n}) => {\n    const now = Date.now();\n\n    const finishedUpgrades = _(upgrades)\n        .filter(upgrade => upgrade.owner === accountName)\n        .filter(upgrade => upgrade.endTime < now)\n        .value();\n\n    if (finishedUpgrades.length === 0) {\n        return;\n    }\n\n    return {\n        action: 'finish_upgrades',\n        actions: _(finishedUpgrades)\n            .map(upgrade => finishUpgrade({\n                accountName,\n                assetId: upgrade.assetId,\n            }))\n            .value(),\n    }\n};\n\n// -------------------------------------------------------- //\n// ---------             ENTRY POIN              ---------- //\n// -------------------------------------------------------- //\nconst playGameCalcNextAction = async ({\n    accountName,\n    gameSettings,\n}) => {\n    const economyValues = getEconomyValues();\n    const {\n        exchange,\n        account,\n        accountBuildings,\n        accountWorkers,\n        accountLands,\n        accountTransfers,\n        landConfigs,\n        upgradeConfigs,\n        upgrades,\n    } = await fetchAllGameData({\n        accountName,\n    });\n\n    // showing alert if some buildings places in district with inappropriate town hall level\n    if (accountBuildings.ownStaleBuildings.length > 0) {\n        const staleRealms = _(accountBuildings.ownStaleBuildings)\n            .map(building => building.district.realm.name)\n            .uniq()\n            .value();\n        log({\n            project: gameSettings.name,\n            message: `[ACTION NEEDED] ${accountBuildings.ownStaleBuildings.length} stale buildings, need to be moved to another district, relams: ${staleRealms.join(', ')}`,\n        });\n    }\n\n    // wake up all available workers\n    if (accountWorkers.readyToWakeupWorkers.length > 0) {\n        return {\n            action: 'wakeup',\n            actions: [\n                wakeupWorkers({\n                    accountName,\n                    workerIds: _(accountWorkers.readyToWakeupWorkers)\n                        .map(worker => worker.id)\n                        .value(),\n                }),\n            ],\n        };\n    }\n    \n    // set wage for all avaialbe buildings\n    if (accountBuildings.ownBuildingsWithoutWageSet.length > 0) {\n        return {\n            action: 'set_building_wage',\n            actions: _(accountBuildings.ownBuildingsWithoutWageSet)\n                .map(b => setBuildWage({\n                    accountName,\n                    id: b.id,\n                    wageObsd: b.config.minimumWage.obsdCost,\n                    isOnlyOwnWorkersAllowed: true,\n                    minWorkerLevel: 1,\n                }))\n                .value(),\n        };\n    }\n    \n    // prolong rent for buildings placed on your lands\n    if (accountBuildings.ownBuildingsExpiredExternalRentSet.length > 0) {\n        return {\n            action: 'cancel_external_rent',\n            actions: _(accountBuildings.ownBuildingsExpiredExternalRentSet)\n                .map(building => removeBuilding({\n                    accountName,\n                    buildingId: building.id,\n                }))\n                .value(),\n        };\n    }\n    const startMixedShiftsAction = getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: [\n            ...accountWorkers.readyToWorkWorkers,\n        ],\n        gameSettings,\n    });\n\n    const startMixedUnskilledShiftsAction = getStartMixedUnskilledShiftAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.unskilledJobBuildings,\n        workers: accountWorkers.readyToWorkUnskilledWorkers,\n        gameSettings,\n    });\n\n    const startMixedUnskilledRestAction = getStartMixedUnskilledRestAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: accountWorkers.readyToRestUnskilledWorkers,\n        gameSettings,\n    });\n    \n    const startMixedRestsAction = getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: accountWorkers.readyToRestWorkers,\n        gameSettings,\n    });\n\n    const startRenewRentAction = getRenewRentAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.ownBuildingsExpiredRentSet,\n        gameSettings,\n    });\n\n    const rentExternalLandsAction = getRentMixedLandsAction({\n        accountName,\n        exchange,\n        account,\n        lands: accountLands.lands,\n        buildings: accountTransfers.buildings,\n        landConfigs,\n        gameSettings,\n    });\n\n    const startWorkerUpgradesAction = getStartWorkerUpgradesAction({\n        account,\n        exchange,\n        accountName,\n        upgradeConfigs: upgradeConfigs.workers,\n        workers: accountWorkers.readyToUpgradeWorkers,\n        gameSettings,\n    });\n\n    const finishUpgradesAction = getFinishUpgradesAction({\n        accountName,\n        upgrades,\n    });\n\n    if (finishUpgradesAction != null) {\n        return finishUpgradesAction;\n    }\n\n    if (economyValues.ENABLE_WORKER_UPGRADES && startWorkerUpgradesAction != null) {\n        return startWorkerUpgradesAction;\n    }\n\n    if (economyValues.ENABLE_RENT_EXTERNAL_LANDS && rentExternalLandsAction != null) {\n        return rentExternalLandsAction;\n    }\n    \n    if (economyValues.ENABLE_REST_SKILLED_WORKERS && startMixedRestsAction != null) {\n        return startMixedRestsAction;\n    }\n\n    if (economyValues.ENABLE_REST_UNSKILLED_WORKERS && startMixedUnskilledRestAction != null) {\n        return startMixedUnskilledRestAction;\n    }\n    \n    if (economyValues.ENABLE_RENEW_RENT_LANDS && startRenewRentAction != null) {\n        return startRenewRentAction;\n    }\n\n    if (economyValues.ENABLE_SHIFT_SKILLED_WORKERS && startMixedShiftsAction != null) {\n        return startMixedShiftsAction;\n    }\n\n    if (economyValues.ENABLE_SHIFT_UNSKILLED_WORKERS && startMixedUnskilledShiftsAction != null) {\n        return startMixedUnskilledShiftsAction;\n    }\n\n    return {\n        action: 'wait',\n        message: `Nothing to do for ${accountName}`,\n    };\n};\n\nexport default playGameCalcNextAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}