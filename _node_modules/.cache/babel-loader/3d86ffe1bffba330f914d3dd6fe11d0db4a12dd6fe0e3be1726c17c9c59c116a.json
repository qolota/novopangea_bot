{"ast":null,"code":"function extractDomainWithProtocol(url){// Remove www subdomain if present\nvar domain=url.replace(/^(https?:\\/\\/)?(www\\.)?/,'');// Remove path and query string\ndomain=domain.replace(/\\/(.|\\n)*$/,'');// Remove subdomains except for the first one\ndomain=domain.split('.').slice(-2).join('.');// Add the protocol back to the domain\ndomain=url.match(/^(https?:\\/\\/)/)[0]+domain;return domain;}module.exports=extractDomainWithProtocol;","map":{"version":3,"names":["extractDomainWithProtocol","url","domain","replace","split","slice","join","match","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/utils/extractDomainWithProtocol.js"],"sourcesContent":["function extractDomainWithProtocol(url) {\n    // Remove www subdomain if present\n    let domain = url.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n  \n    // Remove path and query string\n    domain = domain.replace(/\\/(.|\\n)*$/, '');\n  \n    // Remove subdomains except for the first one\n    domain = domain.split('.').slice(-2).join('.');\n  \n    // Add the protocol back to the domain\n    domain = url.match(/^(https?:\\/\\/)/)[0] + domain;\n  \n    return domain;\n}\n\nmodule.exports = extractDomainWithProtocol;"],"mappings":"AAAA,QAAS,CAAAA,yBAAyBA,CAACC,GAAG,CAAE,CACpC;AACA,GAAI,CAAAC,MAAM,CAAGD,GAAG,CAACE,OAAO,CAAC,yBAAyB,CAAE,EAAE,CAAC,CAEvD;AACAD,MAAM,CAAGA,MAAM,CAACC,OAAO,CAAC,YAAY,CAAE,EAAE,CAAC,CAEzC;AACAD,MAAM,CAAGA,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAE9C;AACAJ,MAAM,CAAGD,GAAG,CAACM,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAGL,MAAM,CAEhD,MAAO,CAAAA,MAAM,CACjB,CAEAM,MAAM,CAACC,OAAO,CAAGT,yBAAyB"},"metadata":{},"sourceType":"module","externalDependencies":[]}