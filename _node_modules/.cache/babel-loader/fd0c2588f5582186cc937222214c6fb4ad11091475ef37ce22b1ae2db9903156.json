{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchBuildings = require('./fetchBuildings');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchWorkers = async ({\n  cache = {}\n}) => {\n  const buildingConfigs = cache.buildingConfigs || (await fetchBuildingConfigs({}));\n  const workerConfigs = cache.workerConfigs || (await fetchWorkerConfigs({}));\n  const districts = cache.districts || (await fetchDistricts({}));\n  const buildings = cache.buildings || (await fetchBuildings({\n    cache: {\n      buildingConfigs,\n      districts\n    }\n  }));\n  const now = Date.now();\n  const workers = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'worker'\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const shiftStart = row.shift_start * 1000;\n      const shiftEnd = row.shift_end * 1000;\n      const restEnd = row.rest_end * 1000;\n      return {\n        id: row.id,\n        owner: row.owner,\n        assetId: row.asset_id,\n        level: row.level,\n        shiftStart,\n        shiftEnd,\n        restEnd,\n        isWorking: now < shiftEnd,\n        needSleeping: restEnd === 0,\n        isSleeping: now < restEnd,\n        district: districts.find(district => district.id === row.district_id),\n        config: workerConfigs.find(config => config.id === row.config_id),\n        building: buildings.find(building => building.id === row.building_id)\n      };\n    }\n  });\n  return workers;\n};\nmodule.exports = fetchWorkers;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","fetchBuildings","fetchDistricts","fetchWorkerConfigs","fetchBuildingConfigs","fetchWorkers","cache","buildingConfigs","workerConfigs","districts","buildings","now","Date","workers","params","code","GAME","scope","table","customProcessor","row","shiftStart","shift_start","shiftEnd","shift_end","restEnd","rest_end","id","owner","assetId","asset_id","level","isWorking","needSleeping","isSleeping","district","find","district_id","config","config_id","building","building_id","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchWorkers.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchBuildings = require('./fetchBuildings');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\n\nconst fetchWorkers = async ({\n    cache = {},\n}) => {\n    const buildingConfigs = cache.buildingConfigs || await fetchBuildingConfigs({});\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const districts = cache.districts || await fetchDistricts({});\n    const buildings = cache.buildings || await fetchBuildings({\n        cache: {\n            buildingConfigs,\n            districts,\n        },\n    });\n    \n    const now = Date.now();\n    const workers = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'worker',\n        },\n        customProcessor: ({row}) => {\n            const shiftStart = row.shift_start * 1000;\n            const shiftEnd = row.shift_end * 1000;\n            const restEnd = row.rest_end * 1000;\n            \n            return {\n                id: row.id,\n                owner: row.owner,\n                assetId: row.asset_id,\n                level: row.level,\n                shiftStart,\n                shiftEnd,\n                restEnd,\n                isWorking: now < shiftEnd,\n                needSleeping: restEnd === 0,\n                isSleeping: now < restEnd,\n                district: districts.find(district => district.id === row.district_id),\n                config: workerConfigs.find(config => config.id === row.config_id),\n                building: buildings.find(building => building.id === row.building_id),\n            };\n        },\n    });\n\n    return workers;\n}\n\nmodule.exports = fetchWorkers;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAMG,cAAc,GAAGH,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMI,cAAc,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMM,oBAAoB,GAAGN,OAAO,CAAC,wBAAwB,CAAC;AAE9D,MAAMO,YAAY,GAAG,MAAAA,CAAO;EACxBC,KAAK,GAAG,CAAC;AACb,CAAC,KAAK;EACF,MAAMC,eAAe,GAAGD,KAAK,CAACC,eAAe,KAAI,MAAMH,oBAAoB,CAAC,CAAC,CAAC,CAAC;EAC/E,MAAMI,aAAa,GAAGF,KAAK,CAACE,aAAa,KAAI,MAAML,kBAAkB,CAAC,CAAC,CAAC,CAAC;EACzE,MAAMM,SAAS,GAAGH,KAAK,CAACG,SAAS,KAAI,MAAMP,cAAc,CAAC,CAAC,CAAC,CAAC;EAC7D,MAAMQ,SAAS,GAAGJ,KAAK,CAACI,SAAS,KAAI,MAAMT,cAAc,CAAC;IACtDK,KAAK,EAAE;MACHC,eAAe;MACfE;IACJ;EACJ,CAAC,CAAC;EAEF,MAAME,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;EACtB,MAAME,OAAO,GAAG,MAAMd,gBAAgB,CAAC;IACnCe,MAAM,EAAE;MACJC,IAAI,EAAEf,SAAS,CAACgB,IAAI;MACpBC,KAAK,EAAEjB,SAAS,CAACgB,IAAI;MACrBE,KAAK,EAAE;IACX,CAAC;IACDC,eAAe,EAAEA,CAAC;MAACC;IAAG,CAAC,KAAK;MACxB,MAAMC,UAAU,GAAGD,GAAG,CAACE,WAAW,GAAG,IAAI;MACzC,MAAMC,QAAQ,GAAGH,GAAG,CAACI,SAAS,GAAG,IAAI;MACrC,MAAMC,OAAO,GAAGL,GAAG,CAACM,QAAQ,GAAG,IAAI;MAEnC,OAAO;QACHC,EAAE,EAAEP,GAAG,CAACO,EAAE;QACVC,KAAK,EAAER,GAAG,CAACQ,KAAK;QAChBC,OAAO,EAAET,GAAG,CAACU,QAAQ;QACrBC,KAAK,EAAEX,GAAG,CAACW,KAAK;QAChBV,UAAU;QACVE,QAAQ;QACRE,OAAO;QACPO,SAAS,EAAErB,GAAG,GAAGY,QAAQ;QACzBU,YAAY,EAAER,OAAO,KAAK,CAAC;QAC3BS,UAAU,EAAEvB,GAAG,GAAGc,OAAO;QACzBU,QAAQ,EAAE1B,SAAS,CAAC2B,IAAI,CAACD,QAAQ,IAAIA,QAAQ,CAACR,EAAE,KAAKP,GAAG,CAACiB,WAAW,CAAC;QACrEC,MAAM,EAAE9B,aAAa,CAAC4B,IAAI,CAACE,MAAM,IAAIA,MAAM,CAACX,EAAE,KAAKP,GAAG,CAACmB,SAAS,CAAC;QACjEC,QAAQ,EAAE9B,SAAS,CAAC0B,IAAI,CAACI,QAAQ,IAAIA,QAAQ,CAACb,EAAE,KAAKP,GAAG,CAACqB,WAAW;MACxE,CAAC;IACL;EACJ,CAAC,CAAC;EAEF,OAAO5B,OAAO;AAClB,CAAC;AAED6B,MAAM,CAACC,OAAO,GAAGtC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}