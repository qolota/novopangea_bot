{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst mapResources = require('../utils/mapResources');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst mapResource = require('../utils/mapResource');\nconst fetchAccounts = async ({\n  cache = {}\n}) => {\n  const exchange = cache.exchange || (await fetchExchange());\n  const novoPrice = cache.novoPrice || (await fetchNovoPrice());\n  const novoAccounts = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'novotknusers'\n    },\n    customProcessor: ({\n      row\n    }) => ({\n      accountName: row.account,\n      novoSpent: mapResource(row.spent).value,\n      novoBalance: mapResource(row.novo_converted).value,\n      novoDeposited: mapResource(row.novo_deposited).value,\n      novoStaked: mapResource(row.total_stake_districts),\n      nextChoiceDistrictTime: row.next_choice_district * 1000,\n      nextWithdrawBalance: row.next_withdraw_balance * 1000,\n      actionsUsed: row.actions_used,\n      homeDistrictId: row.home_district\n    })\n  });\n  const accounts = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'accounts'\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const novoAccount = novoAccounts.find(account => account.accountName === row.account);\n      return {\n        accountName: row.account,\n        level: row.level,\n        score: row.score,\n        balances: _.compact([...mapResources(row.balances), novoAccount != null ? {\n          value: novoAccount.novoBalance,\n          symbol: 'NOVO'\n        } : null]),\n        maxBalances: mapResources(row.max_balances),\n        totalBalance: convertAllCosts({\n          costs: [...row.balances, novoAccount != null ? `${novoAccount.novoBalance} NOVO` : `0  NOVO`],\n          exchange,\n          novoPrice,\n          ...novoAccount\n        }),\n        nextWithdrawBalance: novoAccount != null ? novoAccount.nextWithdrawBalance : null\n      };\n    }\n  });\n  return accounts;\n};\nmodule.exports = fetchAccounts;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","mapResources","convertAllCosts","fetchExchange","fetchNovoPrice","mapResource","fetchAccounts","cache","exchange","novoPrice","novoAccounts","params","code","GAME","scope","table","customProcessor","row","accountName","account","novoSpent","spent","value","novoBalance","novo_converted","novoDeposited","novo_deposited","novoStaked","total_stake_districts","nextChoiceDistrictTime","next_choice_district","nextWithdrawBalance","next_withdraw_balance","actionsUsed","actions_used","homeDistrictId","home_district","accounts","novoAccount","find","level","score","balances","compact","symbol","maxBalances","max_balances","totalBalance","costs","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccounts.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst mapResources = require('../utils/mapResources');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst mapResource = require('../utils/mapResource');\n\nconst fetchAccounts = async ({\n    cache = {}\n}) => {\n    const exchange = cache.exchange || await fetchExchange();\n    const novoPrice = cache.novoPrice || await fetchNovoPrice();\n    const novoAccounts = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'novotknusers',\n        },\n        customProcessor: ({row}) => ({\n            accountName: row.account,\n            novoSpent: mapResource(row.spent).value,\n            novoBalance: mapResource(row.novo_converted).value,\n            novoDeposited: mapResource(row.novo_deposited).value,\n            novoStaked: mapResource(row.total_stake_districts),\n            nextChoiceDistrictTime: row.next_choice_district * 1000,\n            nextWithdrawBalance: row.next_withdraw_balance * 1000,\n            actionsUsed: row.actions_used,\n            homeDistrictId: row.home_district,\n        }),\n    });\n\n    \n    const accounts = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'accounts',\n        },\n        customProcessor: ({row}) => {\n            const novoAccount = novoAccounts.find(account => account.accountName === row.account);\n            \n            return {\n                accountName: row.account,\n                level: row.level,\n                score: row.score,\n                balances: _.compact([\n                    ...mapResources(row.balances),\n                    novoAccount != null\n                        ? {\n                            value: novoAccount.novoBalance,\n                            symbol: 'NOVO'\n                        }\n                        : null,\n                ]),\n                maxBalances: mapResources(row.max_balances),\n                totalBalance: convertAllCosts({\n                    costs: [\n                        ...row.balances,\n                        novoAccount != null\n                            ? `${novoAccount.novoBalance} NOVO`\n                            : `0  NOVO`,\n                    ],\n                    exchange,\n                    novoPrice,\n                    ...novoAccount,\n                }),\n                nextWithdrawBalance: novoAccount != null\n                    ? novoAccount.nextWithdrawBalance\n                    : null,\n            };\n        },\n    });\n\n    return accounts;\n};\n\nmodule.exports = fetchAccounts;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}