{"ast":null,"code":"const _ = require('lodash');\nconst fetchHarvestingSettings = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'gsetting',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const settings = data.rows[0];\n  return {\n    forcastForXDays: settings.forcast_for_x_days,\n    highPowerBonus: Number(settings.high_power_bonus),\n    hoursPerDay: settings.hours_per_day,\n    maxTempChange: settings.max_temp_change,\n    minTempChange: settings.min_temp_change,\n    realDaysTillHarvest: settings.real_days_till_harvest\n  };\n};\nmodule.exports = fetchHarvestingSettings;","map":{"version":3,"names":["_","require","fetchHarvestingSettings","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","settings","forcastForXDays","forcast_for_x_days","highPowerBonus","Number","high_power_bonus","hoursPerDay","hours_per_day","maxTempChange","max_temp_change","minTempChange","min_temp_change","realDaysTillHarvest","real_days_till_harvest","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchHarvestingSettings.js"],"sourcesContent":["const _ = require('lodash');\n\nconst fetchHarvestingSettings = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'gsetting',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const settings = data.rows[0];\n\n  return {\n    forcastForXDays: settings.forcast_for_x_days,\n    highPowerBonus: Number(settings.high_power_bonus),\n    hoursPerDay: settings.hours_per_day,\n    maxTempChange: settings.max_temp_change,\n    minTempChange: settings.min_temp_change,\n    realDaysTillHarvest: settings.real_days_till_harvest,\n  };\n};\n\nmodule.exports = fetchHarvestingSettings;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;EAC1C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC1EC,OAAO,EAAE;MACPC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,IAAI,EAAE,cAAc;MACpBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,cAAc;MACrBC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE,UAAU;MACjBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAIU,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACX;EACA,MAAMC,QAAQ,GAAGH,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;EAE7B,OAAO;IACLG,eAAe,EAAED,QAAQ,CAACE,kBAAkB;IAC5CC,cAAc,EAAEC,MAAM,CAACJ,QAAQ,CAACK,gBAAgB,CAAC;IACjDC,WAAW,EAAEN,QAAQ,CAACO,aAAa;IACnCC,aAAa,EAAER,QAAQ,CAACS,eAAe;IACvCC,aAAa,EAAEV,QAAQ,CAACW,eAAe;IACvCC,mBAAmB,EAAEZ,QAAQ,CAACa;EAChC,CAAC;AACH,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGtC,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}