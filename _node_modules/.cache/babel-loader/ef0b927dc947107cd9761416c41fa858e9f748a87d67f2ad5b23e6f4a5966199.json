{"ast":null,"code":"const _ = require('lodash');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst REST_TIME = require('../consts/REST_TIME');\nconst fetchLands = require('./fetchLands');\nconst fetchLandConfigs = require('./fetchLandConfigs');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchAccounts = require('./fetchAccounts');\nconst ONE_DAY = 60 * 60 * 24;\nconst AVG_WAGE_OBSD = 1.15;\nconst fetchBuildings = async ({\n  cache = {}\n}) => {\n  const exchange = cache.exchange || (await fetchExchange());\n  const novoPrice = cache.novoPrice || (await fetchNovoPrice());\n  const districts = cache.districts || (await fetchDistricts({}));\n  const buildingConfigs = cache.buildingConfigs || (await fetchBuildingConfigs({}));\n  const landConfigs = cache.landConfigs || (await fetchLandConfigs({\n    cache: {\n      exchange,\n      novoPrice\n    }\n  }));\n  const lands = cache.lands || (await fetchLands({\n    cache: {\n      exchange,\n      novoPrice,\n      districts,\n      landConfigs\n    }\n  }));\n  const workerConfigs = _(cache.workerConfigs || (await fetchWorkerConfigs({\n    cache: {\n      exchange,\n      novoPrice\n    }\n  }))).sortBy(c => c.level).value();\n  const accounts = cache.accounts || (await fetchAccounts({\n    cache: {\n      exchange,\n      novoPrice\n    }\n  }));\n  const buildings = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'building'\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const district = districts.find(district => district.id === row.district_id);\n      const config = buildingConfigs.find(buildingConfig => buildingConfig.id === row.config_id);\n      const contractWage = convertAllCosts({\n        costs: [row.contract_wage],\n        exchange,\n        novoPrice\n      });\n      const restTime = config.resourceType === 'rest' ? REST_TIME[`townHall${district.level}`][row.level - 1] : null;\n      const nRestPrice = restTime != null ? restTime / ONE_DAY * contractWage.waxCost : null;\n      const nRestPriceObsd = restTime != null ? restTime / ONE_DAY * contractWage.obsdCost : null;\n      const nOwnRestPrice = restTime != null ? restTime / ONE_DAY * config.shiftCost.waxCost : null;\n      return {\n        id: row.id,\n        owner: row.owner,\n        assetId: row.asset_id,\n        district,\n        config,\n        land: lands.find(land => land.id === row.land_id),\n        contractWage,\n        isOnlyOwnWorkersAllowed: row.own_workers === 1,\n        minWorkerLevel: row.min_worker_level,\n        numWorkers: row.num_workers,\n        level: row.level,\n        restTime,\n        nRestPrice,\n        nRestPriceObsd,\n        nOwnRestPrice,\n        account: accounts.find(account => account.accountName === row.owner),\n        wagesObsd: config.resourceType !== 'rest' ? _(workerConfigs).map(c => _.round(contractWage.obsdCost * c.wageMultiplier, 4)).value() : null,\n        yieldsObsd: config.resourceType !== 'rest' ? _(workerConfigs).map(c => _.round(config.shiftYield.obsdCost * c.wageMultiplier - c.shiftCost.obsdCost, 4)).value() : null,\n        ownRestsObsd: config.resourceType === 'rest' ? _(workerConfigs).map(c => {\n          const wagePerSec = c.wageMultiplier * AVG_WAGE_OBSD / c.shiftTime;\n          const restPrice = config.shiftCost.obsdCost + c.foodCost.obsdCost;\n          const extraRestPrice = (restTime - c.shiftTime) * wagePerSec;\n          return restPrice + extraRestPrice;\n        }).value() : null,\n        externalRestsObsd: config.resourceType === 'rest' ? _(workerConfigs).map(c => {\n          const wagePerSec = c.wageMultiplier * AVG_WAGE_OBSD / c.shiftTime;\n          const restPrice = contractWage.obsdCost + c.foodCost.obsdCost;\n          const extraRestPrice = (restTime - c.shiftTime) * wagePerSec;\n          return restPrice + extraRestPrice;\n        }).value() : null\n      };\n    }\n  });\n  return buildings;\n};\nmodule.exports = fetchBuildings;","map":{"version":3,"names":["_","require","fetchDistricts","fetchAllWaxData2","CONTRACTS","fetchBuildingConfigs","fetchExchange","fetchNovoPrice","convertAllCosts","REST_TIME","fetchLands","fetchLandConfigs","fetchWorkerConfigs","fetchAccounts","ONE_DAY","AVG_WAGE_OBSD","fetchBuildings","cache","exchange","novoPrice","districts","buildingConfigs","landConfigs","lands","workerConfigs","sortBy","c","level","value","accounts","buildings","params","code","GAME","scope","table","customProcessor","row","district","find","id","district_id","config","buildingConfig","config_id","contractWage","costs","contract_wage","restTime","resourceType","nRestPrice","waxCost","nRestPriceObsd","obsdCost","nOwnRestPrice","shiftCost","owner","assetId","asset_id","land","land_id","isOnlyOwnWorkersAllowed","own_workers","minWorkerLevel","min_worker_level","numWorkers","num_workers","account","accountName","wagesObsd","map","round","wageMultiplier","yieldsObsd","shiftYield","ownRestsObsd","wagePerSec","shiftTime","restPrice","foodCost","extraRestPrice","externalRestsObsd","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchBuildings.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst REST_TIME = require('../consts/REST_TIME');\nconst fetchLands = require('./fetchLands');\nconst fetchLandConfigs = require('./fetchLandConfigs');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchAccounts = require('./fetchAccounts');\nconst ONE_DAY = 60 * 60 * 24;\n\nconst AVG_WAGE_OBSD = 1.15;\n\nconst fetchBuildings = async ({\n    cache = {},\n}) => {\n    const exchange = cache.exchange || await fetchExchange();\n    const novoPrice = cache.novoPrice || await fetchNovoPrice();\n    const districts = cache.districts || await fetchDistricts({});\n    const buildingConfigs = cache.buildingConfigs || await fetchBuildingConfigs({});\n    const landConfigs = cache.landConfigs || await fetchLandConfigs({\n        cache: {\n            exchange,\n            novoPrice,\n        },\n    })\n    const lands = cache.lands || await fetchLands({\n        cache: {\n            exchange,\n            novoPrice,\n            districts,\n            landConfigs,\n        },\n    });\n    const workerConfigs = _(cache.workerConfigs || await fetchWorkerConfigs({\n        cache: {\n            exchange,\n            novoPrice,\n        },\n    }))\n        .sortBy(c => c.level)\n        .value();\n    const accounts = cache.accounts || await fetchAccounts({\n        cache: {\n            exchange,\n            novoPrice,\n        },\n    });\n    const buildings = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'building',\n        },\n        customProcessor: ({row}) => {\n            const district = districts.find(district => district.id === row.district_id);\n            const config = buildingConfigs.find(buildingConfig => buildingConfig.id === row.config_id);\n            const contractWage = convertAllCosts({\n                costs: [row.contract_wage],\n                exchange,\n                novoPrice,\n            });\n            const restTime = config.resourceType === 'rest'\n                ? REST_TIME[`townHall${district.level}`][row.level - 1]\n                : null;\n            const nRestPrice = restTime != null\n                ? restTime / ONE_DAY * contractWage.waxCost\n                : null;\n            const nRestPriceObsd = restTime != null\n                ? restTime / ONE_DAY * contractWage.obsdCost\n                : null;\n            const nOwnRestPrice = restTime != null\n                ? restTime / ONE_DAY * config.shiftCost.waxCost\n                : null;\n\n            return {\n                id: row.id,\n                owner: row.owner,\n                assetId: row.asset_id,\n                district,\n                config,\n                land: lands.find(land => land.id === row.land_id),\n                contractWage,\n                isOnlyOwnWorkersAllowed: row.own_workers === 1,\n                minWorkerLevel: row.min_worker_level,\n                numWorkers: row.num_workers,\n                level: row.level,\n                restTime,\n                nRestPrice,\n                nRestPriceObsd,\n                nOwnRestPrice,\n                account: accounts.find(account => account.accountName === row.owner),\n                wagesObsd: config.resourceType !== 'rest'\n                    ?_(workerConfigs)\n                        .map(c => _.round(contractWage.obsdCost * c.wageMultiplier, 4))\n                        .value()\n                    : null,\n                yieldsObsd: config.resourceType !== 'rest'\n                    ?_(workerConfigs)\n                        .map(c => _.round(config.shiftYield.obsdCost * c.wageMultiplier - c.shiftCost.obsdCost, 4))\n                        .value()\n                    : null,\n                ownRestsObsd: config.resourceType === 'rest'\n                    ? _(workerConfigs)\n                        .map(c => {\n                            const wagePerSec = c.wageMultiplier * AVG_WAGE_OBSD / c.shiftTime;\n                            const restPrice = config.shiftCost.obsdCost + c.foodCost.obsdCost;\n                            const extraRestPrice = (restTime - c.shiftTime) * wagePerSec;\n\n                            return restPrice + extraRestPrice;\n                        })\n                        .value()\n                    : null,\n                externalRestsObsd: config.resourceType === 'rest'\n                    ? _(workerConfigs)\n                        .map(c => {\n                            const wagePerSec = c.wageMultiplier * AVG_WAGE_OBSD / c.shiftTime;\n                            const restPrice = contractWage.obsdCost + c.foodCost.obsdCost;\n                            const extraRestPrice = (restTime - c.shiftTime) * wagePerSec;\n\n                            return restPrice + extraRestPrice;\n                        })\n                        .value()\n                    : null,\n\n            };\n        },\n    });\n\n    return buildings;\n};\n\nmodule.exports = fetchBuildings;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}