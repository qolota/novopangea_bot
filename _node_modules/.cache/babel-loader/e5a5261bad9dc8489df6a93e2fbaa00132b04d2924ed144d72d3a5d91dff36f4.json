{"ast":null,"code":"const extractDomainWithProtocol = require('./extractDomainWithProtocol');\nconst sleep = require('./sleep');\nconst postponeRequestTime = {};\nconst fetchWithAttempts = async ({\n  url,\n  options = {},\n  retries = 1,\n  ignoreHttpErrorStatuses = []\n}) => {\n  try {\n    const domain = extractDomainWithProtocol(url);\n    const res = await fetch(url, options);\n    if (res.ok) {\n      postponeRequestTime[domain] = 0;\n      const json = await res.json();\n      return json;\n    }\n    if (ignoreHttpErrorStatuses.includes(res.status)) {\n      console.log(`Ignore HTTP error status ${res.status}`);\n      const json = await res.json();\n      console.log(json);\n      return {\n        code: 'ignore_http_status',\n        status: res.status\n      };\n    }\n    if (res.status === 500) {\n      const json = await res.json();\n      console.log(`Internal server error`);\n      console.log(JSON.stringify(json.error, null, 2));\n      postponeRequestTime[domain] = (postponeRequestTime[domain] || 500) * 2;\n      console.log(`Wait ${postponeRequestTime[domain]}ms befor making another ${domain} request`);\n      await sleep(postponeRequestTime[domain]);\n    }\n    console.log(`Loading error, attempts left ${retries - 1}`);\n    if (retries > 0) {\n      return fetchWithAttempts({\n        url,\n        options,\n        retries: retries - 1,\n        ignoreHttpErrorStatuses\n      });\n    }\n  } catch (err) {\n    console.log(err);\n    console.log(`Loading error, attempts left ${retries - 1}`);\n    if (retries > 0) {\n      return fetchWithAttempts({\n        url,\n        options,\n        retries: retries - 1,\n        ignoreHttpErrorStatuses\n      });\n    }\n  }\n};\nmodule.exports = fetchWithAttempts;","map":{"version":3,"names":["extractDomainWithProtocol","require","sleep","postponeRequestTime","fetchWithAttempts","url","options","retries","ignoreHttpErrorStatuses","domain","res","fetch","ok","json","includes","status","console","log","code","JSON","stringify","error","err","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/utils/fetchWithAttempts.js"],"sourcesContent":["const extractDomainWithProtocol = require('./extractDomainWithProtocol');\nconst sleep = require('./sleep');\n\nconst postponeRequestTime = {};\n\nconst fetchWithAttempts = async ({\n  url,\n  options = {},\n  retries = 1,\n  ignoreHttpErrorStatuses = [],\n}) => {\n  try {\n    const domain = extractDomainWithProtocol(url);\n    const res = await fetch(url, options);\n    if (res.ok) {\n      postponeRequestTime[domain] = 0;\n      const json = await res.json();\n      return json;\n    }\n\n    if (ignoreHttpErrorStatuses.includes(res.status)) {\n      console.log(`Ignore HTTP error status ${res.status}`);\n\n      const json = await res.json();\n      console.log(json);\n\n      return {\n        code: 'ignore_http_status',\n        status: res.status,\n      };\n    }\n    \n    if (res.status === 500) {\n      const json = await res.json();\n      console.log(`Internal server error`);\n      console.log(JSON.stringify(json.error, null, 2));\n      postponeRequestTime[domain] = (postponeRequestTime[domain] || 500) * 2;\n      console.log(`Wait ${postponeRequestTime[domain]}ms befor making another ${domain} request`);\n      await sleep(postponeRequestTime[domain]);\n    }\n    \n    console.log(`Loading error, attempts left ${retries - 1}`);\n    if (retries > 0) {\n      return fetchWithAttempts({\n        url,\n        options,\n        retries: retries - 1,\n        ignoreHttpErrorStatuses,\n      });\n    }\n  } catch (err) {\n    console.log(err);\n\n    console.log(`Loading error, attempts left ${retries - 1}`);\n    if (retries > 0) {\n      return fetchWithAttempts({\n        url,\n        options,\n        retries: retries - 1,\n        ignoreHttpErrorStatuses,\n      });\n    }\n  }\n};\n\nmodule.exports = fetchWithAttempts;"],"mappings":"AAAA,MAAMA,yBAAyB,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AACxE,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAME,mBAAmB,GAAG,CAAC,CAAC;AAE9B,MAAMC,iBAAiB,GAAG,MAAAA,CAAO;EAC/BC,GAAG;EACHC,OAAO,GAAG,CAAC,CAAC;EACZC,OAAO,GAAG,CAAC;EACXC,uBAAuB,GAAG;AAC5B,CAAC,KAAK;EACJ,IAAI;IACF,MAAMC,MAAM,GAAGT,yBAAyB,CAACK,GAAG,CAAC;IAC7C,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAACN,GAAG,EAAEC,OAAO,CAAC;IACrC,IAAII,GAAG,CAACE,EAAE,EAAE;MACVT,mBAAmB,CAACM,MAAM,CAAC,GAAG,CAAC;MAC/B,MAAMI,IAAI,GAAG,MAAMH,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,OAAOA,IAAI;IACb;IAEA,IAAIL,uBAAuB,CAACM,QAAQ,CAACJ,GAAG,CAACK,MAAM,CAAC,EAAE;MAChDC,OAAO,CAACC,GAAG,CAAE,4BAA2BP,GAAG,CAACK,MAAO,EAAC,CAAC;MAErD,MAAMF,IAAI,GAAG,MAAMH,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7BG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MAEjB,OAAO;QACLK,IAAI,EAAE,oBAAoB;QAC1BH,MAAM,EAAEL,GAAG,CAACK;MACd,CAAC;IACH;IAEA,IAAIL,GAAG,CAACK,MAAM,KAAK,GAAG,EAAE;MACtB,MAAMF,IAAI,GAAG,MAAMH,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7BG,OAAO,CAACC,GAAG,CAAE,uBAAsB,CAAC;MACpCD,OAAO,CAACC,GAAG,CAACE,IAAI,CAACC,SAAS,CAACP,IAAI,CAACQ,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MAChDlB,mBAAmB,CAACM,MAAM,CAAC,GAAG,CAACN,mBAAmB,CAACM,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;MACtEO,OAAO,CAACC,GAAG,CAAE,QAAOd,mBAAmB,CAACM,MAAM,CAAE,2BAA0BA,MAAO,UAAS,CAAC;MAC3F,MAAMP,KAAK,CAACC,mBAAmB,CAACM,MAAM,CAAC,CAAC;IAC1C;IAEAO,OAAO,CAACC,GAAG,CAAE,gCAA+BV,OAAO,GAAG,CAAE,EAAC,CAAC;IAC1D,IAAIA,OAAO,GAAG,CAAC,EAAE;MACf,OAAOH,iBAAiB,CAAC;QACvBC,GAAG;QACHC,OAAO;QACPC,OAAO,EAAEA,OAAO,GAAG,CAAC;QACpBC;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC,OAAOc,GAAG,EAAE;IACZN,OAAO,CAACC,GAAG,CAACK,GAAG,CAAC;IAEhBN,OAAO,CAACC,GAAG,CAAE,gCAA+BV,OAAO,GAAG,CAAE,EAAC,CAAC;IAC1D,IAAIA,OAAO,GAAG,CAAC,EAAE;MACf,OAAOH,iBAAiB,CAAC;QACvBC,GAAG;QACHC,OAAO;QACPC,OAAO,EAAEA,OAAO,GAAG,CAAC;QACpBC;MACF,CAAC,CAAC;IACJ;EACF;AACF,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGpB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}