{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst FixedParser_1 = __importDefault(require(\"./FixedParser\"));\n// tslint:disable-next-line:no-var-requires\nconst fp = require('../../../lib/float');\nclass FloatingParser extends FixedParser_1.default {\n  constructor(isDouble) {\n    super(isDouble ? 8 : 4);\n    this.isDouble = isDouble;\n  }\n  deserialize(state) {\n    if (this.isDouble) {\n      return fp.readDoubleLE(super.deserialize(state));\n    }\n    return fp.readFloatLE(super.deserialize(state));\n  }\n  serialize(data) {\n    // tslint:disable-next-line:prefer-const\n    let bytes = [];\n    if (this.isDouble) {\n      fp.writeDoubleLE(bytes, data);\n      return super.serialize(new Uint8Array(bytes));\n    }\n    fp.writeFloatLE(bytes, data);\n    return super.serialize(new Uint8Array(bytes));\n  }\n}\nexports.default = FloatingParser;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","FixedParser_1","require","fp","FloatingParser","default","constructor","isDouble","deserialize","state","readDoubleLE","readFloatLE","serialize","data","bytes","writeDoubleLE","Uint8Array","writeFloatLE"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/Serialization/TypeParser/FloatingParser.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst FixedParser_1 = __importDefault(require(\"./FixedParser\"));\n// tslint:disable-next-line:no-var-requires\nconst fp = require('../../../lib/float');\nclass FloatingParser extends FixedParser_1.default {\n    constructor(isDouble) {\n        super(isDouble ? 8 : 4);\n        this.isDouble = isDouble;\n    }\n    deserialize(state) {\n        if (this.isDouble) {\n            return fp.readDoubleLE(super.deserialize(state));\n        }\n        return fp.readFloatLE(super.deserialize(state));\n    }\n    serialize(data) {\n        // tslint:disable-next-line:prefer-const\n        let bytes = [];\n        if (this.isDouble) {\n            fp.writeDoubleLE(bytes, data);\n            return super.serialize(new Uint8Array(bytes));\n        }\n        fp.writeFloatLE(bytes, data);\n        return super.serialize(new Uint8Array(bytes));\n    }\n}\nexports.default = FloatingParser;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,aAAa,GAAGP,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AAC/D;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AACxC,MAAME,cAAc,SAASH,aAAa,CAACI,OAAO,CAAC;EAC/CC,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAACA,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC;IACvB,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC5B;EACAC,WAAWA,CAACC,KAAK,EAAE;IACf,IAAI,IAAI,CAACF,QAAQ,EAAE;MACf,OAAOJ,EAAE,CAACO,YAAY,CAAC,KAAK,CAACF,WAAW,CAACC,KAAK,CAAC,CAAC;IACpD;IACA,OAAON,EAAE,CAACQ,WAAW,CAAC,KAAK,CAACH,WAAW,CAACC,KAAK,CAAC,CAAC;EACnD;EACAG,SAASA,CAACC,IAAI,EAAE;IACZ;IACA,IAAIC,KAAK,GAAG,EAAE;IACd,IAAI,IAAI,CAACP,QAAQ,EAAE;MACfJ,EAAE,CAACY,aAAa,CAACD,KAAK,EAAED,IAAI,CAAC;MAC7B,OAAO,KAAK,CAACD,SAAS,CAAC,IAAII,UAAU,CAACF,KAAK,CAAC,CAAC;IACjD;IACAX,EAAE,CAACc,YAAY,CAACH,KAAK,EAAED,IAAI,CAAC;IAC5B,OAAO,KAAK,CAACD,SAAS,CAAC,IAAII,UAAU,CAACF,KAAK,CAAC,CAAC;EACjD;AACJ;AACAf,OAAO,CAACM,OAAO,GAAGD,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}