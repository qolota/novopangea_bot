{"ast":null,"code":"const _ = require('lodash');\nconst fetchAccount = require('./api/fetchAccount');\nconst STRATEGY_TYPES = require('./consts/STRATEGY_TYPES');\nconst sendMarketBuyOrderCalcNextAction = require('./sendMarketBuyOrderCalcNextAction');\nconst sendMarketSellOrderCalcNextAction = require('./sendMarketSellOrderCalcNextAction');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst sendBulkOrdersCalcNextAction = async ({\n  accountName\n}) => {\n  const ordersSettings = ACCOUNT_CAPABILITIES[accountName].alcor_orders_settings || [];\n  if (ordersSettings.length === 0) {\n    return {\n      action: 'wait',\n      message: 'No orders added'\n    };\n  }\n  const account = await fetchAccount({\n    accountName\n  });\n  const actions = [];\n  for (let i = 0; i < ordersSettings.length; i++) {\n    const orderSettings = ordersSettings[i];\n    switch (orderSettings.type) {\n      case STRATEGY_TYPES.BUY_LIMIT:\n        actions.push(await sendMarketBuyOrderCalcNextAction({\n          accountName,\n          gameSettings: {\n            orderSettings: _.cloneDeep(orderSettings),\n            account\n          }\n        }));\n        break;\n      case STRATEGY_TYPES.SELL_LIMIT:\n        actions.push(await sendMarketSellOrderCalcNextAction({\n          accountName,\n          gameSettings: {\n            orderSettings: _.cloneDeep(orderSettings),\n            account\n          }\n        }));\n        break;\n    }\n  }\n  const numWaitPairs = _(actions).filter(action => action.action === 'wait').value().length;\n  const numSendOrders = _(actions).filter(action => ['send_buy_order', 'send_sell_order'].includes(action.action)).value().length;\n  const numCancelOrders = _(actions).filter(action => ['cancel_expensive_orders', 'cancel_stale_orders'].includes(action.action)).value().length;\n  const allActions = _(actions).map(action => action.actions).flatten().compact().value();\n  const allMessages = _(actions).map(action => action.message).value();\n  if (allActions.length === 0) {\n    return {\n      action: 'wait',\n      messages: allMessages\n    };\n  }\n  return {\n    action: 'send_bulk_orders',\n    message: `Processed ${actions.length} pairs in bulk (keep=${numWaitPairs}, new=${numSendOrders}, cancel=${numCancelOrders})`,\n    messages: allMessages,\n    actions: allActions\n  };\n};\nmodule.exports = sendBulkOrdersCalcNextAction;","map":{"version":3,"names":["_","require","fetchAccount","STRATEGY_TYPES","sendMarketBuyOrderCalcNextAction","sendMarketSellOrderCalcNextAction","ACCOUNT_CAPABILITIES","sendBulkOrdersCalcNextAction","accountName","ordersSettings","alcor_orders_settings","length","action","message","account","actions","i","orderSettings","type","BUY_LIMIT","push","gameSettings","cloneDeep","SELL_LIMIT","numWaitPairs","filter","value","numSendOrders","includes","numCancelOrders","allActions","map","flatten","compact","allMessages","messages","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/sendBulkOrdersCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAccount = require('./api/fetchAccount');\nconst STRATEGY_TYPES = require('./consts/STRATEGY_TYPES');\nconst sendMarketBuyOrderCalcNextAction = require('./sendMarketBuyOrderCalcNextAction');\nconst sendMarketSellOrderCalcNextAction = require('./sendMarketSellOrderCalcNextAction');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\n\nconst sendBulkOrdersCalcNextAction = async ({accountName}) => {\n    const ordersSettings = ACCOUNT_CAPABILITIES[accountName].alcor_orders_settings || [];\n\n    if (ordersSettings.length === 0) {\n        return {\n            action: 'wait',\n            message: 'No orders added',\n        };\n    }\n\n    const account = await fetchAccount({accountName});\n    const actions = [];\n    for (let i = 0; i < ordersSettings.length; i++) {\n        const orderSettings = ordersSettings[i];\n        switch(orderSettings.type) {\n            case STRATEGY_TYPES.BUY_LIMIT:\n                actions.push(await sendMarketBuyOrderCalcNextAction({\n                    accountName,\n                    gameSettings: {\n                        orderSettings: _.cloneDeep(orderSettings),\n                        account,\n                    },\n                }));\n                break;\n            case STRATEGY_TYPES.SELL_LIMIT:\n                actions.push(await sendMarketSellOrderCalcNextAction({\n                    accountName,\n                    gameSettings: {\n                        orderSettings: _.cloneDeep(orderSettings),\n                        account,\n                    },\n                }));\n                break;\n        }\n    }\n\n    const numWaitPairs = _(actions)\n        .filter(action => action.action === 'wait')\n        .value()\n        .length;\n    const numSendOrders = _(actions)\n        .filter(action => ['send_buy_order', 'send_sell_order'].includes(action.action))\n        .value()\n        .length;\n    const numCancelOrders = _(actions)\n        .filter(action => ['cancel_expensive_orders', 'cancel_stale_orders'].includes(action.action))\n        .value()\n        .length;\n    const allActions = _(actions)\n        .map(action => action.actions)\n        .flatten()\n        .compact()\n        .value();\n    const allMessages = _(actions)\n        .map(action => action.message)\n        .value();\n    \n    if (allActions.length === 0) {\n        return {\n            action: 'wait',\n            messages: allMessages,\n        };\n    }\n\n    return {\n        action: 'send_bulk_orders',\n        message: `Processed ${actions.length} pairs in bulk (keep=${numWaitPairs}, new=${numSendOrders}, cancel=${numCancelOrders})`,\n        messages: allMessages,\n        actions: allActions,\n    };\n};\n\nmodule.exports = sendBulkOrdersCalcNextAction;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}