{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchConfigWaxData = require('./fetchConfigWaxData');\nconst deserializeData = require('../utils/deserializeData');\nconst fetchCollectionSchemasWaxData = require('./fetchCollectionSchemasWaxData');\nconst fetchCollectionTemplatesWaxData = require('./fetchCollectionTemplatesWaxData');\nconst fetchCollectionsWaxData = async ({\n  collectionName\n}) => {\n  const config = await fetchConfigWaxData();\n  const collections = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.ATOMIC_ASSETS,\n      scope: CONTRACTS.ATOMIC_ASSETS,\n      table: 'collections',\n      lower_bound: collectionName,\n      upper_bound: collectionName\n    },\n    customProcessor: ({\n      row\n    }) => {\n      return {\n        collectionName: row.collection_name,\n        author: row.author,\n        allowNotify: row.allow_notify === 1,\n        authorizedAccounts: row.authorized_accounts,\n        notifyAccounts: row.notify_accounts,\n        marketFee: Number(row.market_fee),\n        data: deserializeData({\n          schema: config.collectionSchema,\n          serializedData: row.serialized_data\n        })\n      };\n    }\n  });\n  for (let i = 0; i < collections.length; i++) {\n    collections[i].schemas = await fetchCollectionSchemasWaxData({\n      collectionName: collections[i].collectionName\n    });\n    collections[i].templates = await fetchCollectionTemplatesWaxData({\n      collectionName: collections[i].collectionName,\n      cache: {\n        schemas: collections[i].schemas\n      }\n    });\n  }\n  return collections;\n};\nmodule.exports = fetchCollectionsWaxData;","map":{"version":3,"names":["_","require","CONTRACTS","fetchAllWaxData2","fetchConfigWaxData","deserializeData","fetchCollectionSchemasWaxData","fetchCollectionTemplatesWaxData","fetchCollectionsWaxData","collectionName","config","collections","params","code","ATOMIC_ASSETS","scope","table","lower_bound","upper_bound","customProcessor","row","collection_name","author","allowNotify","allow_notify","authorizedAccounts","authorized_accounts","notifyAccounts","notify_accounts","marketFee","Number","market_fee","data","schema","collectionSchema","serializedData","serialized_data","i","length","schemas","templates","cache","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/api/fetchCollectionsWaxData.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchConfigWaxData = require('./fetchConfigWaxData');\nconst deserializeData = require('../utils/deserializeData');\nconst fetchCollectionSchemasWaxData = require('./fetchCollectionSchemasWaxData');\nconst fetchCollectionTemplatesWaxData = require('./fetchCollectionTemplatesWaxData');\n\nconst fetchCollectionsWaxData  = async ({\n    collectionName,\n}) => {\n    const config = await fetchConfigWaxData();\n    const collections = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.ATOMIC_ASSETS,\n            scope: CONTRACTS.ATOMIC_ASSETS,\n            table: 'collections',\n            lower_bound: collectionName,\n            upper_bound: collectionName,\n        },\n        customProcessor: ({row}) => {\n            return {\n                collectionName: row.collection_name,\n                author: row.author,\n                allowNotify: row.allow_notify === 1,\n                authorizedAccounts: row.authorized_accounts,\n                notifyAccounts: row.notify_accounts,\n                marketFee: Number(row.market_fee),\n                data: deserializeData({\n                    schema: config.collectionSchema,\n                    serializedData: row.serialized_data,\n                }),\n            };\n        },\n    });\n\n    for (let i = 0; i < collections.length; i++) {\n        collections[i].schemas = await fetchCollectionSchemasWaxData({\n            collectionName: collections[i].collectionName,\n        });\n        collections[i].templates = await fetchCollectionTemplatesWaxData({\n            collectionName: collections[i].collectionName,\n            cache: {\n                schemas: collections[i].schemas,\n            },\n        });\n    }\n    \n    return collections;\n};\n\nmodule.exports = fetchCollectionsWaxData;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAC1D,MAAMI,eAAe,GAAGJ,OAAO,CAAC,0BAA0B,CAAC;AAC3D,MAAMK,6BAA6B,GAAGL,OAAO,CAAC,iCAAiC,CAAC;AAChF,MAAMM,+BAA+B,GAAGN,OAAO,CAAC,mCAAmC,CAAC;AAEpF,MAAMO,uBAAuB,GAAI,MAAAA,CAAO;EACpCC;AACJ,CAAC,KAAK;EACF,MAAMC,MAAM,GAAG,MAAMN,kBAAkB,CAAC,CAAC;EACzC,MAAMO,WAAW,GAAG,MAAMR,gBAAgB,CAAC;IACvCS,MAAM,EAAE;MACJC,IAAI,EAAEX,SAAS,CAACY,aAAa;MAC7BC,KAAK,EAAEb,SAAS,CAACY,aAAa;MAC9BE,KAAK,EAAE,aAAa;MACpBC,WAAW,EAAER,cAAc;MAC3BS,WAAW,EAAET;IACjB,CAAC;IACDU,eAAe,EAAEA,CAAC;MAACC;IAAG,CAAC,KAAK;MACxB,OAAO;QACHX,cAAc,EAAEW,GAAG,CAACC,eAAe;QACnCC,MAAM,EAAEF,GAAG,CAACE,MAAM;QAClBC,WAAW,EAAEH,GAAG,CAACI,YAAY,KAAK,CAAC;QACnCC,kBAAkB,EAAEL,GAAG,CAACM,mBAAmB;QAC3CC,cAAc,EAAEP,GAAG,CAACQ,eAAe;QACnCC,SAAS,EAAEC,MAAM,CAACV,GAAG,CAACW,UAAU,CAAC;QACjCC,IAAI,EAAE3B,eAAe,CAAC;UAClB4B,MAAM,EAAEvB,MAAM,CAACwB,gBAAgB;UAC/BC,cAAc,EAAEf,GAAG,CAACgB;QACxB,CAAC;MACL,CAAC;IACL;EACJ,CAAC,CAAC;EAEF,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG1B,WAAW,CAAC2B,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC1B,WAAW,CAAC0B,CAAC,CAAC,CAACE,OAAO,GAAG,MAAMjC,6BAA6B,CAAC;MACzDG,cAAc,EAAEE,WAAW,CAAC0B,CAAC,CAAC,CAAC5B;IACnC,CAAC,CAAC;IACFE,WAAW,CAAC0B,CAAC,CAAC,CAACG,SAAS,GAAG,MAAMjC,+BAA+B,CAAC;MAC7DE,cAAc,EAAEE,WAAW,CAAC0B,CAAC,CAAC,CAAC5B,cAAc;MAC7CgC,KAAK,EAAE;QACHF,OAAO,EAAE5B,WAAW,CAAC0B,CAAC,CAAC,CAACE;MAC5B;IACJ,CAAC,CAAC;EACN;EAEA,OAAO5B,WAAW;AACtB,CAAC;AAED+B,MAAM,CAACC,OAAO,GAAGnC,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}