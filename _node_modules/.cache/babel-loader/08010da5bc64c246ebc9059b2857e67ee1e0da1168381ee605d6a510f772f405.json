{"ast":null,"code":"import _regeneratorRuntime from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _=require('lodash');var fetchAllWaxData2=require('../../core/fetchAllWaxData2');var CONTRACTS=require('../consts/CONTRACTS');var fetchAssets=require('../../atomicassets/api/fetchAssets');var fetchWorkerConfigs=require('./fetchWorkerConfigs');var fetchBuildingConfigs=require('./fetchBuildingConfigs');var fetchSpeedupConfigs=require('./fetchSpeedupConfigs');var fetchAccountTransfers=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref){var accountName,_ref$cache,cache,workerConfigs,buildingConfigs,speedupConfigs,transfers,accountTransfers,assets,_assets;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:accountName=_ref.accountName,_ref$cache=_ref.cache,cache=_ref$cache===void 0?{}:_ref$cache;_context.t0=cache.workerConfigs;if(_context.t0){_context.next=6;break;}_context.next=5;return fetchWorkerConfigs({});case 5:_context.t0=_context.sent;case 6:workerConfigs=_context.t0;_context.t1=cache.buildingConfigs;if(_context.t1){_context.next=12;break;}_context.next=11;return fetchBuildingConfigs({});case 11:_context.t1=_context.sent;case 12:buildingConfigs=_context.t1;_context.t2=cache.speedupConfigs;if(_context.t2){_context.next=18;break;}_context.next=17;return fetchSpeedupConfigs();case 17:_context.t2=_context.sent;case 18:speedupConfigs=_context.t2;_context.next=21;return fetchAllWaxData2({params:{code:CONTRACTS.GAME,scope:CONTRACTS.GAME,table:'transfers'},customProcessor:function customProcessor(_ref3){var row=_ref3.row;return{assetId:row.asset_id,owner:row.owner,time:row.time*1000};}});case 21:transfers=_context.sent;accountTransfers=_(transfers).filter(function(transfer){return transfer.owner===accountName;}).value();assets={workers:[],buildings:[],travelpasses:[],speedups:[]};if(!(accountTransfers.length>0)){_context.next=31;break;}_context.t3=_;_context.next=28;return fetchAssets({params:{ids:_.map(accountTransfers,function(t){return t.assetId;}).join(',')},customProcessor:function customProcessor(_ref4){var asset=_ref4.asset;switch(asset.schema.schema_name){case'worker':var workerLevel=Number(asset.data.rarity.split(' ')[1]);var isSkilledWorker=asset.data.realm!=='Unskilled';return{assetId:asset.asset_id,level:workerLevel,realmName:isSkilledWorker?asset.data.realm:null,config:workerConfigs.find(function(config){return config.level===workerLevel;}),isSkilledWorker:isSkilledWorker,numShiftsLeft:isSkilledWorker?0:Number(asset.data.shifts),key:'workers'};case'building':var buildingLevel=Number(asset.data.rarity.split(' ')[1]);var resourceType=asset.data.resource.toLowerCase();return{assetId:asset.asset_id,level:buildingLevel,realmName:asset.data.realm,config:buildingConfigs.find(function(config){return config.level===buildingLevel&&config.resourceType===resourceType;}),key:'buildings'};case'travelpass':return{assetId:asset.asset_id,realmName:asset.data.realm,key:'travelpasses'};case'land':return{assetId:asset.asset_id,realmName:asset.data.realm,key:'lands'};case'chapter.one':case'chapter.two':case'sketch':case'promo':return{assetId:asset.asset_id,realmName:asset.data.realm,rarity:asset.data.rarity||asset.data.Rarity,color:asset.data.color,config:speedupConfigs.find(function(config){return config.level===asset.data.rarity;}),key:'speedups'};}}});case 28:_context.t4=_context.sent;_assets=(0,_context.t3)(_context.t4).groupBy(function(asset){return asset.key;}).value();assets=_objectSpread(_objectSpread({},assets),_assets);case 31:return _context.abrupt(\"return\",assets);case 32:case\"end\":return _context.stop();}},_callee);}));return function fetchAccountTransfers(_x){return _ref2.apply(this,arguments);};}();module.exports=fetchAccountTransfers;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","fetchAssets","fetchWorkerConfigs","fetchBuildingConfigs","fetchSpeedupConfigs","fetchAccountTransfers","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","accountName","_ref$cache","cache","workerConfigs","buildingConfigs","speedupConfigs","transfers","accountTransfers","assets","_assets","wrap","_callee$","_context","prev","next","t0","sent","t1","t2","params","code","GAME","scope","table","customProcessor","_ref3","row","assetId","asset_id","owner","time","filter","transfer","value","workers","buildings","travelpasses","speedups","length","t3","ids","map","t","join","_ref4","asset","schema","schema_name","workerLevel","Number","data","rarity","split","isSkilledWorker","realm","level","realmName","config","find","numShiftsLeft","shifts","key","buildingLevel","resourceType","resource","toLowerCase","Rarity","color","t4","groupBy","_objectSpread","abrupt","stop","_x","apply","arguments","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountTransfers.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAssets = require('../../atomicassets/api/fetchAssets');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchSpeedupConfigs = require('./fetchSpeedupConfigs');\n\nconst fetchAccountTransfers = async ({\n    accountName,\n    cache = {},\n}) => {\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const buildingConfigs = cache.buildingConfigs || await fetchBuildingConfigs({});\n    const speedupConfigs = cache.speedupConfigs || await fetchSpeedupConfigs();\n    const transfers = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'transfers',\n        },\n        customProcessor: ({row}) => ({\n            assetId: row.asset_id,\n            owner: row.owner,\n            time: row.time * 1000,\n        }),\n    });\n    \n    const accountTransfers = _(transfers)\n        .filter(transfer => transfer.owner === accountName)\n        .value();\n    \n    let assets = {\n        workers: [],\n        buildings: [],\n        travelpasses: [],\n        speedups: [],\n    };\n    if (accountTransfers.length > 0) {\n        const _assets = _(await fetchAssets({\n            params: {\n                ids: _.map(accountTransfers, t => t.assetId).join(','),\n            },\n            customProcessor: ({asset}) => {\n                switch(asset.schema.schema_name) {\n                    case 'worker':\n                        const workerLevel = Number(asset.data.rarity.split(' ')[1]);\n                        const isSkilledWorker = asset.data.realm !== 'Unskilled';\n                        return {\n                            assetId: asset.asset_id,\n                            level: workerLevel,\n                            realmName: isSkilledWorker\n                                ? asset.data.realm\n                                : null,\n                            config: workerConfigs.find(config => config.level === workerLevel),\n                            isSkilledWorker,\n                            numShiftsLeft: isSkilledWorker\n                                ? 0\n                                : Number(asset.data.shifts),\n                            key: 'workers',\n                        };\n                    case 'building':\n                        const buildingLevel = Number(asset.data.rarity.split(' ')[1]);\n                        const resourceType = asset.data.resource.toLowerCase();\n                        return {\n                            assetId: asset.asset_id,\n                            level: buildingLevel,\n                            realmName: asset.data.realm,\n                            config: buildingConfigs.find(config => config.level === buildingLevel && config.resourceType === resourceType),\n                            key: 'buildings',\n                        };\n                    case 'travelpass':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            key: 'travelpasses',\n                        };\n                    case 'land':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            key: 'lands',\n                        };\n                    case 'chapter.one':\n                    case 'chapter.two':\n                    case 'sketch':\n                    case 'promo':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            rarity: asset.data.rarity || asset.data.Rarity,\n                            color: asset.data.color,\n                            config: speedupConfigs.find(config => config.level === asset.data.rarity),\n                            key: 'speedups',\n                        };\n                }\n            },\n        }))\n            .groupBy(asset => asset.key)\n            .value();\n        \n        assets = {\n            ...assets,\n            ..._assets,\n        };\n    }\n\n    return assets;\n};\n\nmodule.exports = fetchAccountTransfers;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}