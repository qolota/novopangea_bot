{"ast":null,"code":"import _ from 'lodash';\nimport { wax, execTransaction } from '../core/wax';\nimport log from '../utils/log';\nimport fetchWaxAccount from '../core/fetchWaxAccount';\nimport ACCOUNT_CAPABILITIES from '../configs/ACCOUNT_CAPABILITIES';\n\n// novopangea\nimport playGameCalcNextAction from '../novopangea/playGameCalcNextAction';\n\n// core \nimport claimWaxRewardCalcNextAction from '../core/claimWaxRewardCalcNextAction';\nlet isBotStarted = false;\nconst GAMES = {\n  // novopangea\n  NP_PLAY_GAME: {\n    duration: 20 * 1000,\n    validatorName: 'novopangea_play_game',\n    calcNextAction: playGameCalcNextAction\n  },\n  // wax\n  CLAIM_WAX_REWARD: {\n    duration: 180 * 1000,\n    validatorName: 'claim_wax_reward',\n    calcNextAction: claimWaxRewardCalcNextAction\n  }\n};\nconst startGameBot = ({\n  calcNextAction,\n  gameSettings\n}) => {\n  gameSettings.interval = setInterval(async () => {\n    const durationFromLastExec = Date.now() - gameSettings.lastTime;\n    if (durationFromLastExec < 5 * 60 * 1000 && gameSettings.isInProgress) {\n      return;\n    }\n    gameSettings.lastTime = Date.now();\n    gameSettings.isInProgress = true;\n    let signal;\n    try {\n      const account = await fetchWaxAccount({\n        accountName: wax.userAccount\n      });\n      if (account.cpuLoad > 0.98) {\n        log({\n          project: gameSettings.name,\n          message: `<cpu_limit> There is no available CPU. CPU usage is ${_.round(account.cpuLoad * 100)}%`,\n          info: account\n        });\n        gameSettings.isInProgress = false;\n        return;\n      }\n      signal = await calcNextAction({\n        accountName: wax.userAccount,\n        gameSettings\n      });\n      log({\n        project: gameSettings.name,\n        message: `<${signal.action}> ${signal.message}`,\n        info: signal\n      });\n      if (signal.isMultipleTransactions) {\n        for (let i = 0; i < signal.actions.length; i++) {\n          await execTransaction({\n            project: gameSettings.name,\n            actions: signal.actions[i]\n          });\n        }\n      } else {\n        await execTransaction({\n          project: gameSettings.name,\n          actions: signal.actions\n        });\n      }\n    } catch (err) {\n      log({\n        project: gameSettings.name,\n        message: err.message,\n        info: err\n      });\n    }\n    gameSettings.isInProgress = false;\n  }, gameSettings.duration);\n};\nconst stopGameBot = ({\n  gameSettings\n}) => {\n  clearInterval(gameSettings.interval);\n  gameSettings.interval = null;\n  gameSettings.isInProgress = false;\n  gameSettings.lastTime = Date.now();\n};\nexport const startBot = () => {\n  if (wax.userAccount == null) {\n    console.log('Account is not logged in');\n    return;\n  }\n  if (isBotStarted) {\n    console.log('Bot is already started');\n    return;\n  }\n  isBotStarted = true;\n  const accountCapabilities = ACCOUNT_CAPABILITIES[wax.userAccount];\n  _(GAMES).forEach((gameSettings, name) => {\n    if (!accountCapabilities[gameSettings.validatorName]) {\n      console.log(`Capability ${name} turned off for ${wax.userAccount} account`);\n      return;\n    }\n    console.log(`Start ${name} bot ...`);\n    startGameBot({\n      calcNextAction: gameSettings.calcNextAction,\n      gameSettings: {\n        ...gameSettings,\n        isInProgress: false,\n        interval: null,\n        name,\n        lastTime: Date.now()\n      }\n    });\n  });\n};\nexport const stopBot = () => {\n  if (!isBotStarted) {\n    console.log('Bot is already stopped');\n    return;\n  }\n  isBotStarted = false;\n  _(GAMES).forEach((gameSettings, name) => {\n    console.log(`Canceled ${name} bot`);\n    stopGameBot({\n      gameSettings\n    });\n  });\n};","map":{"version":3,"names":["_","wax","execTransaction","log","fetchWaxAccount","ACCOUNT_CAPABILITIES","playGameCalcNextAction","claimWaxRewardCalcNextAction","isBotStarted","GAMES","NP_PLAY_GAME","duration","validatorName","calcNextAction","CLAIM_WAX_REWARD","startGameBot","gameSettings","interval","setInterval","durationFromLastExec","Date","now","lastTime","isInProgress","signal","account","accountName","userAccount","cpuLoad","project","name","message","round","info","action","isMultipleTransactions","i","actions","length","err","stopGameBot","clearInterval","startBot","console","accountCapabilities","forEach","stopBot"],"sources":["/Users/germangurov/projects/wax_bot/src/bot/bot.js"],"sourcesContent":["import _ from 'lodash';\n\nimport { wax, execTransaction } from '../core/wax';\nimport log from '../utils/log';\nimport fetchWaxAccount from '../core/fetchWaxAccount';\n\nimport ACCOUNT_CAPABILITIES from '../configs/ACCOUNT_CAPABILITIES';\n\n// novopangea\nimport playGameCalcNextAction from '../novopangea/playGameCalcNextAction';\n\n// core \nimport claimWaxRewardCalcNextAction from '../core/claimWaxRewardCalcNextAction';\n\nlet isBotStarted = false;\nconst GAMES = {\n  // novopangea\n  NP_PLAY_GAME: {\n    duration: 20 * 1000,\n    validatorName: 'novopangea_play_game',\n    calcNextAction: playGameCalcNextAction,\n  },\n\n  // wax\n  CLAIM_WAX_REWARD: {\n    duration: 180 * 1000,\n    validatorName: 'claim_wax_reward',\n    calcNextAction: claimWaxRewardCalcNextAction,\n  },\n};\n\nconst startGameBot = ({ calcNextAction, gameSettings }) => {\n  gameSettings.interval = setInterval(async () => {\n    const durationFromLastExec = Date.now() - gameSettings.lastTime;\n    if (durationFromLastExec < 5 * 60 * 1000 && gameSettings.isInProgress) {\n      return;\n    }\n    gameSettings.lastTime = Date.now();\n    gameSettings.isInProgress = true;\n    let signal;\n    try {\n      const account = await fetchWaxAccount({\n        accountName: wax.userAccount,\n      });\n      if (account.cpuLoad > 0.98) {\n        log({\n          project: gameSettings.name,\n          message: `<cpu_limit> There is no available CPU. CPU usage is ${_.round(\n            account.cpuLoad * 100,\n          )}%`,\n          info: account,\n        });\n        gameSettings.isInProgress = false;\n        return;\n      }\n\n      signal = await calcNextAction({\n        accountName: wax.userAccount,\n        gameSettings,\n      });\n      log({\n        project: gameSettings.name,\n        message: `<${signal.action}> ${signal.message}`,\n        info: signal,\n      });\n      if (signal.isMultipleTransactions) {\n        for (let i = 0; i < signal.actions.length; i++) {\n          await execTransaction({\n            project: gameSettings.name,\n            actions: signal.actions[i],\n          });  \n        }\n      } else {\n        await execTransaction({\n          project: gameSettings.name,\n          actions: signal.actions,\n        });\n      }\n    } catch (err) {\n      log({\n        project: gameSettings.name,\n        message: err.message,\n        info: err,\n      });\n    }\n    gameSettings.isInProgress = false;\n  }, gameSettings.duration);\n};\n\nconst stopGameBot = ({ gameSettings }) => {\n  clearInterval(gameSettings.interval);\n  gameSettings.interval = null;\n  gameSettings.isInProgress = false;\n  gameSettings.lastTime = Date.now();\n};\n\nexport const startBot = () => {\n  if (wax.userAccount == null) {\n    console.log('Account is not logged in');\n    return;\n  }\n  if (isBotStarted) {\n    console.log('Bot is already started');\n    return;\n  }\n  isBotStarted = true;\n\n  const accountCapabilities = ACCOUNT_CAPABILITIES[wax.userAccount];\n\n  _(GAMES)\n    .forEach((gameSettings, name) => {\n      if (!accountCapabilities[gameSettings.validatorName]) {\n        console.log(`Capability ${name} turned off for ${wax.userAccount} account`);\n        return;\n      }\n    \n      console.log(`Start ${name} bot ...`);\n\n      startGameBot({\n        calcNextAction: gameSettings.calcNextAction,\n        gameSettings: {\n          ...gameSettings,\n          isInProgress: false,\n          interval: null,\n          name,\n          lastTime: Date.now(),\n        },\n      });\n    });\n};\n\nexport const stopBot = () => {\n  if (!isBotStarted) {\n    console.log('Bot is already stopped');\n    return;\n  }\n\n  isBotStarted = false;\n\n  _(GAMES)\n    .forEach((gameSettings, name) => {\n      console.log(`Canceled ${name} bot`);\n      stopGameBot({\n        gameSettings,\n      });\n    });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}