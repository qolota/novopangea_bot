{"ast":null,"code":"const _ = require('lodash');\nconst PLANTS = require('../configs/PLANTS');\nconst fetchPlantPools = require('./fetchPlantPools');\nconst fetchSeasons = require('./fetchSeasons');\nconst fetchWeathers = require('./fetchWeathers');\nconst fetchPlantsPerWeathers = require('./fetchPlantsPerWeathers');\nconst fetchPlantsPerSeasons = require('./fetchPlantsPerSeasons');\nconst fetchForecasts = require('./fetchForecasts');\nconst calcExtraPool = (forecasts, lastHarvested) => {\n  const lastHarvestedTime = lastHarvested.getTime();\n  const now = Date.now();\n  return _(forecasts).filter(forecast => forecast.startAt.getTime() < now).map(forecast => {\n    const startAtTime = forecast.startAt.getTime();\n    const endAtTime = forecast.endAt.getTime();\n    return {\n      time: endAtTime < now ? lastHarvestedTime > startAtTime ? endAtTime - lastHarvestedTime : endAtTime - startAtTime : lastHarvestedTime > startAtTime ? now - lastHarvestedTime : now - startAtTime,\n      growthPoolPerDay: forecast.growthPoolPerDay\n    };\n  }).map(extra => {\n    return extra.growthPoolPerDay * extra.time / (1000 * 60 * 60 * 24);\n  }).sumBy();\n};\nconst fetchPlants = async () => {\n  const plantPools = await fetchPlantPools();\n  const seasons = await fetchSeasons();\n  const weathers = await fetchWeathers();\n  const plantsPerWeathers = await fetchPlantsPerWeathers();\n  const plantsPerSeasons = await fetchPlantsPerSeasons();\n  const forecasts = await fetchForecasts();\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'plants',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const plants = _(data.rows).map(plant => ({\n    id: plant.plant_id,\n    claimPowerReduce: Number(plant.claim_power_reduce),\n    perfectTemp: plant.perfect_temp\n  })).map(plant => ({\n    ...plant,\n    ...PLANTS.find(p => p.id === plant.id),\n    ...plantPools.find(p => p.id === plant.id),\n    seasons: _(seasons).map(season => ({\n      ...season,\n      ..._.pick(plantsPerSeasons.find(ps => ps.plantId === plant.id && ps.seasonId === season.id), ['claimPower', 'dailyPool'])\n    })).value(),\n    weathers: _(weathers).map(weather => ({\n      ...weather,\n      ..._.pick(plantsPerWeathers.find(pw => pw.plantId === plant.id && pw.weatherId === weather.id), ['claimPower', 'poolPower'])\n    })).value()\n  })).map(plant => ({\n    ..._.omit(plant, ['seasons', 'weathers']),\n    forecasts: _(forecasts[plant.id] || []).map(forecast => ({\n      ..._.omit(forecast, ['seasonId', 'weatherId', 'plantId']),\n      season: plant.seasons.find(s => s.id === forecast.seasonId),\n      weather: plant.weathers.find(w => w.id === forecast.weatherId)\n    })).map(forecast => ({\n      ...forecast,\n      growthPoolPerDay: _.round(forecast.season.dailyPool * forecast.weather.poolPower, 2),\n      _claimPower: forecast.season.claimPower * forecast.weather.claimPower - forecast.season.claimPower * forecast.weather.claimPower * Math.abs(forecast.temperature - plant.perfectTemp) * plant.claimPowerReduce\n    })).value()\n  })).map(plant => ({\n    ...plant,\n    extraPool: calcExtraPool(plant.forecasts, plant.lastHarvested)\n  })).map(plant => ({\n    ...plant,\n    totalPool: plant.currentPool + plant.extraPool\n  })).value();\n  return plants;\n};\nmodule.exports = fetchPlants;","map":{"version":3,"names":["_","require","PLANTS","fetchPlantPools","fetchSeasons","fetchWeathers","fetchPlantsPerWeathers","fetchPlantsPerSeasons","fetchForecasts","calcExtraPool","forecasts","lastHarvested","lastHarvestedTime","getTime","now","Date","filter","forecast","startAt","map","startAtTime","endAtTime","endAt","time","growthPoolPerDay","extra","sumBy","fetchPlants","plantPools","seasons","weathers","plantsPerWeathers","plantsPerSeasons","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","plants","plant","id","plant_id","claimPowerReduce","Number","claim_power_reduce","perfectTemp","perfect_temp","find","p","season","pick","ps","plantId","seasonId","value","weather","pw","weatherId","omit","s","w","round","dailyPool","poolPower","_claimPower","claimPower","Math","abs","temperature","extraPool","totalPool","currentPool","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchPlants.js"],"sourcesContent":["const _ = require('lodash');\nconst PLANTS = require('../configs/PLANTS');\nconst fetchPlantPools = require('./fetchPlantPools');\nconst fetchSeasons = require('./fetchSeasons');\nconst fetchWeathers = require('./fetchWeathers');\nconst fetchPlantsPerWeathers = require('./fetchPlantsPerWeathers');\nconst fetchPlantsPerSeasons = require('./fetchPlantsPerSeasons');\nconst fetchForecasts = require('./fetchForecasts');\n\nconst calcExtraPool = (forecasts, lastHarvested) => {\n  const lastHarvestedTime = lastHarvested.getTime();\n  const now = Date.now();\n\n  return _(forecasts)\n    .filter(forecast => forecast.startAt.getTime() < now)\n    .map(forecast => {\n      const startAtTime = forecast.startAt.getTime();\n      const endAtTime = forecast.endAt.getTime();\n\n      return {\n        time: endAtTime < now\n          ? lastHarvestedTime > startAtTime\n            ? endAtTime - lastHarvestedTime\n            : endAtTime - startAtTime\n          : lastHarvestedTime > startAtTime\n            ? now - lastHarvestedTime\n            : now - startAtTime,\n        growthPoolPerDay: forecast.growthPoolPerDay,\n      };\n    })\n    .map(extra => {\n      return extra.growthPoolPerDay * extra.time / (1000*60*60*24);\n    })\n    .sumBy();\n};\n\nconst fetchPlants = async () => {\n  const plantPools = await fetchPlantPools();\n  const seasons = await fetchSeasons();\n  const weathers = await fetchWeathers();\n  const plantsPerWeathers = await fetchPlantsPerWeathers();\n  const plantsPerSeasons = await fetchPlantsPerSeasons();\n  const forecasts = await fetchForecasts();\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'plants',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n\n  const plants = _(data.rows)\n    .map((plant) => ({\n      id: plant.plant_id,\n      claimPowerReduce: Number(plant.claim_power_reduce),\n      perfectTemp: plant.perfect_temp,\n    }))\n    .map((plant) => ({\n      ...plant,\n      ...PLANTS.find((p) => p.id === plant.id),\n      ...plantPools.find((p) => p.id === plant.id),\n      seasons: _(seasons)\n        .map((season) => ({\n          ...season,\n          ..._.pick(\n            plantsPerSeasons.find(\n              (ps) => ps.plantId === plant.id && ps.seasonId === season.id,\n            ),\n            ['claimPower', 'dailyPool'],\n          ),\n        }))\n        .value(),\n      weathers: _(weathers)\n        .map((weather) => ({\n          ...weather,\n          ..._.pick(\n            plantsPerWeathers.find(\n              (pw) => pw.plantId === plant.id && pw.weatherId === weather.id,\n            ),\n            ['claimPower', 'poolPower'],\n          ),\n        }))\n        .value(),\n    }))\n    .map((plant) => ({\n      ..._.omit(plant, ['seasons', 'weathers']),\n      forecasts: _(forecasts[plant.id] || [])\n        .map((forecast) => ({\n          ..._.omit(forecast, ['seasonId', 'weatherId', 'plantId']),\n          season: plant.seasons.find((s) => s.id === forecast.seasonId),\n          weather: plant.weathers.find((w) => w.id === forecast.weatherId),\n        }))\n        .map((forecast) => ({\n          ...forecast,\n          growthPoolPerDay: _.round(\n            forecast.season.dailyPool * forecast.weather.poolPower,\n            2,\n          ),\n          _claimPower:\n            forecast.season.claimPower * forecast.weather.claimPower -\n            forecast.season.claimPower *\n              forecast.weather.claimPower *\n              Math.abs(forecast.temperature - plant.perfectTemp) *\n              plant.claimPowerReduce,\n        }))\n        .value(),\n    }))\n    .map(plant => ({\n      ...plant,\n      extraPool: calcExtraPool(plant.forecasts, plant.lastHarvested),\n    }))\n    .map(plant => ({\n      ...plant,\n      totalPool: plant.currentPool + plant.extraPool,\n    }))\n    .value();\n  return plants;\n};\n\nmodule.exports = fetchPlants;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}