{"ast":null,"code":"const _ = require('lodash');\nconst findResource = require('./findResource');\nconst RESOURCES = require('../consts/RESOURSES');\nconst sumResources = require('./sumResources');\nconst equalizeResources = require('./equalizeResources');\nconst exchangeTokens = require('../actions/exchangeTokens');\nconst validateResourceLimit = require('./validateResourceLimit');\nconst printBalances = require('./printBalances');\nconst MIN_TRANSACTION_VALUE = {\n  [RESOURCES.NOVOE]: 65,\n  [RESOURCES.NOVOM]: 60,\n  [RESOURCES.NOVOF]: 55,\n  [RESOURCES.OBSD]: 3,\n  [RESOURCES.NOVO]: 1\n};\n\n// 1. transfer all resources to OBSD\n// 2. transfer OBSD to NOVO\n// 3. calculate how much OBSD needed in total\n// 4. transfer NOVO to OBSD \n// 5. transfer OBSD to all other resources\n\nconst requestResources = ({\n  symbolFrom,\n  resources,\n  exchange\n}) => {\n  return _(resources).map(resource => {\n    const resourceExchange = exchange.find(e => e.from === symbolFrom && e.to === resource.symbol);\n    if (symbolFrom === resource.symbol) {\n      const valueFrom = _.ceil(resource.value / MIN_TRANSACTION_VALUE[resource.symbol]) * MIN_TRANSACTION_VALUE[resource.symbol];\n      return {\n        valueFrom,\n        symbolFrom,\n        valueTo: valueFrom,\n        symbolTo: resource.symbol\n      };\n    }\n    const valueFrom = _.ceil(resource.value / resourceExchange.rate);\n    return {\n      valueFrom,\n      symbolFrom,\n      valueTo: valueFrom * MIN_TRANSACTION_VALUE[resource.symbol],\n      symbolTo: resource.symbol\n    };\n  }).value();\n};\nconst exchangeResources = ({\n  accountName,\n  exchange,\n  balances,\n  maxBalances,\n  requestedResources\n}) => {\n  const maxNoneNovaBalances = _([RESOURCES.NOVOE, RESOURCES.NOVOM, RESOURCES.NOVOF, RESOURCES.OBSD]).map(symbol => findResource({\n    resources: maxBalances,\n    symbol\n  })).value();\n  const requestedObsd = requestResources({\n    symbolFrom: RESOURCES.OBSD,\n    resources: requestedResources,\n    exchange\n  });\n  const totalRequestedObsd = sumResources({\n    resources: _(requestedObsd).map(resource => ({\n      value: resource.valueFrom,\n      symbol: resource.symbolFrom\n    })).value()\n  });\n  const requestedNovo = requestResources({\n    symbolFrom: RESOURCES.NOVO,\n    resources: totalRequestedObsd,\n    exchange\n  });\n  const totalRequestedNovo = sumResources({\n    resources: _(requestedNovo).map(resource => ({\n      value: resource.valueFrom,\n      symbol: resource.symbolFrom\n    })).value()\n  });\n  const insufficientNovo = equalizeResources({\n    targetResources: totalRequestedNovo,\n    currentResources: balances\n  });\n  if (insufficientNovo.length > 0) {\n    console.log(`Not enough resources: ${printBalances({\n      balances: insufficientNovo\n    })}`);\n    return {\n      action: 'stop',\n      message: `Not enough resources: ${printBalances({\n        balances: insufficientNovo\n      })}`\n    };\n  }\n  const nextObsdBalance = sumResources({\n    resources: [...balances,\n    // reduce NOVO\n    ..._(totalRequestedNovo).map(res => ({\n      value: -res.value,\n      symbol: res.symbol\n    })).value(),\n    // add OBSD\n    ..._(requestedNovo).map(res => ({\n      value: res.valueTo,\n      symbol: res.symbolTo\n    })).value()]\n  });\n  const isValidObsdBalance = validateResourceLimit({\n    resources: nextObsdBalance,\n    maxResources: maxNoneNovaBalances\n  });\n  if (!isValidObsdBalance) {\n    return {\n      action: 'stop',\n      message: `Requested more than maximum storage capacity. Next balance: ${printBalances({\n        balances: nextObsdBalance\n      })}. Max capacity: ${printBalances({\n        balances: maxNoneNovaBalances\n      })}`\n    };\n  }\n  const nextOtherBalances = sumResources({\n    resources: [...nextObsdBalance,\n    // reduce OBSD\n    ..._(requestedObsd).map(res => ({\n      value: -res.valueFrom,\n      symbol: res.symbolFrom\n    })).value(),\n    // add other resources\n    ..._(requestedObsd).map(res => ({\n      value: res.valueTo,\n      symbol: res.symbolTo\n    })).value()]\n  });\n  const isValidOtherBalances = validateResourceLimit({\n    resources: nextOtherBalances,\n    maxResources: maxNoneNovaBalances\n  });\n  if (!isValidOtherBalances) {\n    return {\n      action: 'stop',\n      message: `Requested more than maximum storage capacity. Next balance: ${printBalances({\n        balances: nextOtherBalances\n      })}. Max capacity: ${printBalances({\n        balances: maxNoneNovaBalances\n      })}\n            `\n    };\n  }\n  const nextBalances = sumResources({\n    resources: [...nextOtherBalances,\n    // reduce costs\n    ..._(requestedResources).map(res => ({\n      value: -res.value,\n      symbol: res.symbol\n    })).value()]\n  });\n  const actions = [..._(requestedNovo).map(res => exchangeTokens({\n    accountName,\n    valueFrom: res.valueFrom,\n    symbolFrom: res.symbolFrom,\n    symbolTo: res.symbolTo\n  })).value(), ..._(requestedObsd).filter(res => res.symbolTo !== RESOURCES.OBSD).map(res => exchangeTokens({\n    accountName,\n    valueFrom: res.valueFrom,\n    symbolFrom: res.symbolFrom,\n    symbolTo: res.symbolTo\n  })).value()];\n  return {\n    nextBalances,\n    actions\n  };\n};\nmodule.exports = exchangeResources;","map":{"version":3,"names":["_","require","findResource","RESOURCES","sumResources","equalizeResources","exchangeTokens","validateResourceLimit","printBalances","MIN_TRANSACTION_VALUE","NOVOE","NOVOM","NOVOF","OBSD","NOVO","requestResources","symbolFrom","resources","exchange","map","resource","resourceExchange","find","e","from","to","symbol","valueFrom","ceil","value","valueTo","symbolTo","rate","exchangeResources","accountName","balances","maxBalances","requestedResources","maxNoneNovaBalances","requestedObsd","totalRequestedObsd","requestedNovo","totalRequestedNovo","insufficientNovo","targetResources","currentResources","length","console","log","action","message","nextObsdBalance","res","isValidObsdBalance","maxResources","nextOtherBalances","isValidOtherBalances","nextBalances","actions","filter","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/utils/exchangeResources.js"],"sourcesContent":["const _ = require('lodash');\nconst findResource = require('./findResource');\nconst RESOURCES = require('../consts/RESOURSES');\nconst sumResources = require('./sumResources');\nconst equalizeResources = require('./equalizeResources');\nconst exchangeTokens = require('../actions/exchangeTokens');\nconst validateResourceLimit = require('./validateResourceLimit');\nconst printBalances = require('./printBalances');\n\nconst MIN_TRANSACTION_VALUE = {\n    [RESOURCES.NOVOE]: 65,\n    [RESOURCES.NOVOM]: 60,\n    [RESOURCES.NOVOF]: 55,\n    [RESOURCES.OBSD]: 3,\n    [RESOURCES.NOVO]: 1,\n};\n\n// 1. transfer all resources to OBSD\n// 2. transfer OBSD to NOVO\n// 3. calculate how much OBSD needed in total\n// 4. transfer NOVO to OBSD \n// 5. transfer OBSD to all other resources\n\nconst requestResources = ({\n    symbolFrom,\n    resources,\n    exchange,\n}) => {\n    return _(resources)\n        .map(resource => {\n            const resourceExchange = exchange.find(e => e.from === symbolFrom && e.to === resource.symbol);\n\n            if (symbolFrom === resource.symbol) {\n                const valueFrom = _.ceil(resource.value / MIN_TRANSACTION_VALUE[resource.symbol]) * MIN_TRANSACTION_VALUE[resource.symbol];\n                return {\n                    valueFrom,\n                    symbolFrom,\n                    valueTo: valueFrom,\n                    symbolTo: resource.symbol,\n                };\n            }\n\n            const valueFrom = _.ceil(resource.value / resourceExchange.rate);\n\n            return {\n                valueFrom,\n                symbolFrom,\n                valueTo: valueFrom * MIN_TRANSACTION_VALUE[resource.symbol],\n                symbolTo: resource.symbol,\n            };\n        })\n        .value();\n};\n\nconst exchangeResources = ({\n    accountName,\n    exchange,\n    balances,\n    maxBalances,\n    requestedResources,\n}) => {\n    const maxNoneNovaBalances = _([\n        RESOURCES.NOVOE,\n        RESOURCES.NOVOM,\n        RESOURCES.NOVOF,\n        RESOURCES.OBSD,\n    ])\n        .map(symbol => findResource({\n            resources: maxBalances,\n            symbol,\n        }))\n        .value();\n    const requestedObsd = requestResources({\n        symbolFrom: RESOURCES.OBSD,\n        resources: requestedResources,\n        exchange,\n    });\n    const totalRequestedObsd = sumResources({\n        resources: _(requestedObsd)\n            .map(resource => ({\n                value: resource.valueFrom,\n                symbol: resource.symbolFrom,\n            }))\n            .value(),\n    });\n    const requestedNovo = requestResources({\n        symbolFrom: RESOURCES.NOVO,\n        resources: totalRequestedObsd,\n        exchange,\n    });\n    const totalRequestedNovo = sumResources({\n        resources: _(requestedNovo)\n            .map(resource => ({\n                value: resource.valueFrom,\n                symbol: resource.symbolFrom,\n            }))\n            .value(),\n    });\n\n    const insufficientNovo = equalizeResources({\n        targetResources: totalRequestedNovo,\n        currentResources: balances,\n    });\n\n    if (insufficientNovo.length > 0) {\n        console.log(`Not enough resources: ${printBalances({balances: insufficientNovo})}`);\n        return {\n            action: 'stop',\n            message: `Not enough resources: ${printBalances({balances: insufficientNovo})}`,\n        };\n    }\n\n    const nextObsdBalance = sumResources({\n        resources: [\n            ...balances,\n            // reduce NOVO\n            ..._(totalRequestedNovo)\n                .map(res => ({\n                    value: -res.value,\n                    symbol: res.symbol,\n                }))\n                .value(),\n            // add OBSD\n            ..._(requestedNovo)\n                .map(res => ({\n                    value: res.valueTo,\n                    symbol: res.symbolTo,\n                }))\n                .value(),\n        ],\n    });\n\n    const isValidObsdBalance = validateResourceLimit({\n        resources: nextObsdBalance,\n        maxResources: maxNoneNovaBalances,\n    });\n    \n    if (!isValidObsdBalance) {\n        return {\n            action: 'stop',\n            message: `Requested more than maximum storage capacity. Next balance: ${printBalances({balances: nextObsdBalance})}. Max capacity: ${printBalances({balances: maxNoneNovaBalances})}`,\n        };\n    }\n\n    const nextOtherBalances = sumResources({\n        resources: [\n            ...nextObsdBalance,\n            // reduce OBSD\n            ..._(requestedObsd)\n                .map(res => ({\n                    value: -res.valueFrom,\n                    symbol: res.symbolFrom,\n                }))\n                .value(),\n            // add other resources\n            ..._(requestedObsd)\n                .map(res => ({\n                    value: res.valueTo,\n                    symbol: res.symbolTo,\n                }))\n                .value(),\n        ],\n    });\n\n    const isValidOtherBalances = validateResourceLimit({\n        resources: nextOtherBalances,\n        maxResources: maxNoneNovaBalances,\n    });\n\n    if (!isValidOtherBalances) {\n        return {\n            action: 'stop',\n            message: `Requested more than maximum storage capacity. Next balance: ${printBalances({balances: nextOtherBalances})}. Max capacity: ${printBalances({balances: maxNoneNovaBalances})}\n            `,\n        };\n    }\n\n    const nextBalances = sumResources({\n        resources: [\n            ...nextOtherBalances,\n            // reduce costs\n            ..._(requestedResources)\n                .map(res => ({\n                    value: -res.value,\n                    symbol: res.symbol,\n                }))\n                .value(),\n        ]\n    });\n\n    const actions = [\n        ..._(requestedNovo)\n            .map(res => exchangeTokens({\n                accountName,\n                valueFrom: res.valueFrom,\n                symbolFrom: res.symbolFrom,\n                symbolTo: res.symbolTo,\n            }))\n            .value(),\n        ..._(requestedObsd)\n            .filter(res => res.symbolTo !== RESOURCES.OBSD)\n            .map(res => exchangeTokens({\n                accountName,\n                valueFrom: res.valueFrom,\n                symbolFrom: res.symbolFrom,\n                symbolTo: res.symbolTo,\n            }))\n            .value(),\n    ];\n\n    return {\n        nextBalances,\n        actions,\n    };\n};\n\nmodule.exports = exchangeResources;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}