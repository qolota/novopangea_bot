{"ast":null,"code":"const qs = require('query-string');\nconst _ = require('lodash');\nconst ASSETS_LIMIT = 20;\nconst PAGE = 1;\nconst fetchSampleAsset = async ({\n  params,\n  customProcessor = () => {}\n}) => {\n  while (true) {\n    const atomicAssetsUrl = `https://wax.api.atomicassets.io/atomicmarket/v1/assets/?${qs.stringify({\n      limit: ASSETS_LIMIT,\n      order: 'desc',\n      sort: 'created',\n      page: PAGE,\n      ...params\n    })}`;\n    console.log(`Loading assets ${atomicAssetsUrl}`);\n    const res = await fetch(atomicAssetsUrl, {\n      headers: new Headers({\n        mode: 'no-cors'\n      })\n    });\n    const data = await res.json();\n    if (!data.success) {\n      continue;\n    }\n    const assets = _(data.data).map(asset => {\n      return {\n        id: asset.asset_id,\n        mintId: Number(asset.template_mint),\n        owner: asset.owner,\n        schemaName: asset.schema.schema_name,\n        collectionName: asset.collection.collection_name,\n        templateId: asset.template.template_id,\n        mintId: asset.template_mint,\n        isBurned: asset.burned_at_time != null,\n        name: asset.name,\n        ...customProcessor({\n          asset\n        })\n      };\n    }).value();\n    const sampleAsset = _.sample(assets);\n    return sampleAsset;\n  }\n};\nmodule.exports = fetchSampleAsset;","map":{"version":3,"names":["qs","require","_","ASSETS_LIMIT","PAGE","fetchSampleAsset","params","customProcessor","atomicAssetsUrl","stringify","limit","order","sort","page","console","log","res","fetch","headers","Headers","mode","data","json","success","assets","map","asset","id","asset_id","mintId","Number","template_mint","owner","schemaName","schema","schema_name","collectionName","collection","collection_name","templateId","template","template_id","isBurned","burned_at_time","name","value","sampleAsset","sample","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/api/fetchSampleAsset.js"],"sourcesContent":["const qs = require('query-string');\nconst _ = require('lodash');\n\nconst ASSETS_LIMIT = 20;\nconst PAGE = 1;\n\nconst fetchSampleAsset = async ({\n    params,\n    customProcessor = () => {},\n}) => {\n  while (true) {\n    const atomicAssetsUrl = `https://wax.api.atomicassets.io/atomicmarket/v1/assets/?${qs.stringify({\n        limit: ASSETS_LIMIT,\n        order: 'desc',\n        sort: 'created',\n        page: PAGE,\n        ...params,\n    })}`;\n    console.log(`Loading assets ${atomicAssetsUrl}`);\n    const res = await fetch(atomicAssetsUrl, {\n        headers: new Headers({\n            mode: 'no-cors',\n        }),\n    });\n    const data = await res.json();\n    if (!data.success) {\n        continue;\n    }\n\n    const assets = _(data.data)\n        .map((asset) => {\n\n            return {\n                id: asset.asset_id,\n                mintId: Number(asset.template_mint),\n                owner: asset.owner,\n                schemaName: asset.schema.schema_name,\n                collectionName: asset.collection.collection_name,\n                templateId: asset.template.template_id,\n                mintId: asset.template_mint,\n                isBurned: asset.burned_at_time != null,\n                name: asset.name,\n                ...customProcessor({\n                    asset,\n                }),\n            };\n        })\n        .value();\n    const sampleAsset = _.sample(assets);\n\n    return sampleAsset;\n  }\n};\n\nmodule.exports = fetchSampleAsset;"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,cAAc,CAAC;AAClC,MAAMC,CAAC,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAME,YAAY,GAAG,EAAE;AACvB,MAAMC,IAAI,GAAG,CAAC;AAEd,MAAMC,gBAAgB,GAAG,MAAAA,CAAO;EAC5BC,MAAM;EACNC,eAAe,GAAGA,CAAA,KAAM,CAAC;AAC7B,CAAC,KAAK;EACJ,OAAO,IAAI,EAAE;IACX,MAAMC,eAAe,GAAI,2DAA0DR,EAAE,CAACS,SAAS,CAAC;MAC5FC,KAAK,EAAEP,YAAY;MACnBQ,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,SAAS;MACfC,IAAI,EAAET,IAAI;MACV,GAAGE;IACP,CAAC,CAAE,EAAC;IACJQ,OAAO,CAACC,GAAG,CAAE,kBAAiBP,eAAgB,EAAC,CAAC;IAChD,MAAMQ,GAAG,GAAG,MAAMC,KAAK,CAACT,eAAe,EAAE;MACrCU,OAAO,EAAE,IAAIC,OAAO,CAAC;QACjBC,IAAI,EAAE;MACV,CAAC;IACL,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;IAC7B,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;MACf;IACJ;IAEA,MAAMC,MAAM,GAAGtB,CAAC,CAACmB,IAAI,CAACA,IAAI,CAAC,CACtBI,GAAG,CAAEC,KAAK,IAAK;MAEZ,OAAO;QACHC,EAAE,EAAED,KAAK,CAACE,QAAQ;QAClBC,MAAM,EAAEC,MAAM,CAACJ,KAAK,CAACK,aAAa,CAAC;QACnCC,KAAK,EAAEN,KAAK,CAACM,KAAK;QAClBC,UAAU,EAAEP,KAAK,CAACQ,MAAM,CAACC,WAAW;QACpCC,cAAc,EAAEV,KAAK,CAACW,UAAU,CAACC,eAAe;QAChDC,UAAU,EAAEb,KAAK,CAACc,QAAQ,CAACC,WAAW;QACtCZ,MAAM,EAAEH,KAAK,CAACK,aAAa;QAC3BW,QAAQ,EAAEhB,KAAK,CAACiB,cAAc,IAAI,IAAI;QACtCC,IAAI,EAAElB,KAAK,CAACkB,IAAI;QAChB,GAAGrC,eAAe,CAAC;UACfmB;QACJ,CAAC;MACL,CAAC;IACL,CAAC,CAAC,CACDmB,KAAK,CAAC,CAAC;IACZ,MAAMC,WAAW,GAAG5C,CAAC,CAAC6C,MAAM,CAACvB,MAAM,CAAC;IAEpC,OAAOsB,WAAW;EACpB;AACF,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG5C,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}