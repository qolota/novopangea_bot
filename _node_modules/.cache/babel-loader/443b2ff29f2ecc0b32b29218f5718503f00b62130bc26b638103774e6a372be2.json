{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst Generator_1 = require(\"./Generator\");\n/* tslint:disable:variable-name */\nclass ExplorerActionGenerator extends Generator_1.ActionGenerator {\n  constructor(contract, api) {\n    super(contract);\n    this.api = api;\n    this.config = api.getConfig();\n  }\n  async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n    return super.createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, (0, Generator_1.toAttributeMap)(data, (await this.config).collection_format));\n  }\n  async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n    const schema = await this.api.getSchema(collection_name, schema_name);\n    const immutable_attribute_map = (0, Generator_1.toAttributeMap)(immutable_data, schema.format);\n    return super.createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_attribute_map);\n  }\n  async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_data, mutable_data, tokens_to_back) {\n    const schema = await this.api.getSchema(collection_name, schema_name);\n    const immutable_attribute_map = (0, Generator_1.toAttributeMap)(immutable_data, schema.format);\n    const mutable_attribute_map = (0, Generator_1.toAttributeMap)(mutable_data, schema.format);\n    return super.mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_attribute_map, mutable_attribute_map, tokens_to_back);\n  }\n  async setassetdata(authorization, authorized_editor, owner, asset_id, mutable_data) {\n    const asset = await this.api.getAsset(asset_id);\n    const mutable_attribute_map = (0, Generator_1.toAttributeMap)(mutable_data, asset.schema.format);\n    return super.setassetdata(authorization, authorized_editor, owner, asset_id, mutable_attribute_map);\n  }\n  async setcoldata(authorization, collection_name, data) {\n    const mdata = (0, Generator_1.toAttributeMap)(data, (await this.config).collection_format);\n    return super.setcoldata(authorization, collection_name, mdata);\n  }\n}\nexports.default = ExplorerActionGenerator;","map":{"version":3,"names":["Object","defineProperty","exports","value","Generator_1","require","ExplorerActionGenerator","ActionGenerator","constructor","contract","api","config","getConfig","createcol","authorization","author","collection_name","allow_notify","authorized_accounts","notify_accounts","market_fee","data","toAttributeMap","collection_format","createtempl","authorized_creator","schema_name","transferable","burnable","max_supply","immutable_data","schema","getSchema","immutable_attribute_map","format","mintasset","authorized_minter","template_id","new_owner","mutable_data","tokens_to_back","mutable_attribute_map","setassetdata","authorized_editor","owner","asset_id","asset","getAsset","setcoldata","mdata","default"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/Actions/Explorer.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Generator_1 = require(\"./Generator\");\n/* tslint:disable:variable-name */\nclass ExplorerActionGenerator extends Generator_1.ActionGenerator {\n    constructor(contract, api) {\n        super(contract);\n        this.api = api;\n        this.config = api.getConfig();\n    }\n    async createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, data) {\n        return super.createcol(authorization, author, collection_name, allow_notify, authorized_accounts, notify_accounts, market_fee, (0, Generator_1.toAttributeMap)(data, (await this.config).collection_format));\n    }\n    async createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_data) {\n        const schema = await this.api.getSchema(collection_name, schema_name);\n        const immutable_attribute_map = (0, Generator_1.toAttributeMap)(immutable_data, schema.format);\n        return super.createtempl(authorization, authorized_creator, collection_name, schema_name, transferable, burnable, max_supply, immutable_attribute_map);\n    }\n    async mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_data, mutable_data, tokens_to_back) {\n        const schema = await this.api.getSchema(collection_name, schema_name);\n        const immutable_attribute_map = (0, Generator_1.toAttributeMap)(immutable_data, schema.format);\n        const mutable_attribute_map = (0, Generator_1.toAttributeMap)(mutable_data, schema.format);\n        return super.mintasset(authorization, authorized_minter, collection_name, schema_name, template_id, new_owner, immutable_attribute_map, mutable_attribute_map, tokens_to_back);\n    }\n    async setassetdata(authorization, authorized_editor, owner, asset_id, mutable_data) {\n        const asset = await this.api.getAsset(asset_id);\n        const mutable_attribute_map = (0, Generator_1.toAttributeMap)(mutable_data, asset.schema.format);\n        return super.setassetdata(authorization, authorized_editor, owner, asset_id, mutable_attribute_map);\n    }\n    async setcoldata(authorization, collection_name, data) {\n        const mdata = (0, Generator_1.toAttributeMap)(data, (await this.config).collection_format);\n        return super.setcoldata(authorization, collection_name, mdata);\n    }\n}\nexports.default = ExplorerActionGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}