{"ast":null,"code":"const fetchAllWaxData2 = require('../fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchVoter = async ({\n  accountName\n}) => {\n  const voters = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.WAX,\n      scope: CONTRACTS.WAX,\n      table: \"voters\",\n      lower_bound: accountName,\n      upper_bound: accountName\n    },\n    customProcessor: ({\n      row\n    }) => ({\n      owner: row.owner,\n      proxy: row.proxy,\n      producers: row.producers,\n      stakedWax: row.staked,\n      unpaidVoteShare: row.unpaid_voteshare,\n      unpaidVoteShareLastUpdated: new Date(`${row.unpaid_voteshare_last_updated}Z`),\n      unpaidVoteShareChangeRate: row.unpaid_voteshare_change_rate,\n      lastClaimTime: new Date(`${row.last_claim_time}Z`),\n      lastVoteWeight: row.last_vote_weight,\n      proxiedVoteWeight: row.proxied_vote_weight\n    })\n  });\n  return voters[0];\n};\nmodule.exports = fetchVoter;","map":{"version":3,"names":["fetchAllWaxData2","require","CONTRACTS","fetchVoter","accountName","voters","params","code","WAX","scope","table","lower_bound","upper_bound","customProcessor","row","owner","proxy","producers","stakedWax","staked","unpaidVoteShare","unpaid_voteshare","unpaidVoteShareLastUpdated","Date","unpaid_voteshare_last_updated","unpaidVoteShareChangeRate","unpaid_voteshare_change_rate","lastClaimTime","last_claim_time","lastVoteWeight","last_vote_weight","proxiedVoteWeight","proxied_vote_weight","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/core/api/fetchVoter.js"],"sourcesContent":["const fetchAllWaxData2 = require('../fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\n\nconst fetchVoter = async ({\n    accountName,\n}) => {\n    const voters = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.WAX,\n            scope: CONTRACTS.WAX,\n            table: \"voters\",\n            lower_bound: accountName,\n            upper_bound: accountName,\n        },\n        customProcessor: ({row}) => ({\n            owner: row.owner,\n            proxy: row.proxy,\n            producers: row.producers,\n            stakedWax: row.staked,\n            unpaidVoteShare: row.unpaid_voteshare,\n            unpaidVoteShareLastUpdated: new Date(`${row.unpaid_voteshare_last_updated}Z`),\n            unpaidVoteShareChangeRate: row.unpaid_voteshare_change_rate,\n            lastClaimTime: new Date(`${row.last_claim_time}Z`),\n            lastVoteWeight: row.last_vote_weight,\n            proxiedVoteWeight: row.proxied_vote_weight,\n        }),\n    });\n\n    return voters[0];\n};\n\nmodule.exports = fetchVoter;"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACvD,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAEhD,MAAME,UAAU,GAAG,MAAAA,CAAO;EACtBC;AACJ,CAAC,KAAK;EACF,MAAMC,MAAM,GAAG,MAAML,gBAAgB,CAAC;IAClCM,MAAM,EAAE;MACJC,IAAI,EAAEL,SAAS,CAACM,GAAG;MACnBC,KAAK,EAAEP,SAAS,CAACM,GAAG;MACpBE,KAAK,EAAE,QAAQ;MACfC,WAAW,EAAEP,WAAW;MACxBQ,WAAW,EAAER;IACjB,CAAC;IACDS,eAAe,EAAEA,CAAC;MAACC;IAAG,CAAC,MAAM;MACzBC,KAAK,EAAED,GAAG,CAACC,KAAK;MAChBC,KAAK,EAAEF,GAAG,CAACE,KAAK;MAChBC,SAAS,EAAEH,GAAG,CAACG,SAAS;MACxBC,SAAS,EAAEJ,GAAG,CAACK,MAAM;MACrBC,eAAe,EAAEN,GAAG,CAACO,gBAAgB;MACrCC,0BAA0B,EAAE,IAAIC,IAAI,CAAE,GAAET,GAAG,CAACU,6BAA8B,GAAE,CAAC;MAC7EC,yBAAyB,EAAEX,GAAG,CAACY,4BAA4B;MAC3DC,aAAa,EAAE,IAAIJ,IAAI,CAAE,GAAET,GAAG,CAACc,eAAgB,GAAE,CAAC;MAClDC,cAAc,EAAEf,GAAG,CAACgB,gBAAgB;MACpCC,iBAAiB,EAAEjB,GAAG,CAACkB;IAC3B,CAAC;EACL,CAAC,CAAC;EAEF,OAAO3B,MAAM,CAAC,CAAC,CAAC;AACpB,CAAC;AAED4B,MAAM,CAACC,OAAO,GAAG/B,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}