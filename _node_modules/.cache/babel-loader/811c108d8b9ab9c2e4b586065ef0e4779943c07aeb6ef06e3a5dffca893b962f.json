{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAssets = require('../../atomicassets/api/fetchAssets');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchSpeedupConfigs = require('./fetchSpeedupConfigs');\nconst fetchAccountTransfers = async ({\n  accountName,\n  cache = {}\n}) => {\n  const workerConfigs = cache.workerConfigs || (await fetchWorkerConfigs({}));\n  const buildingConfigs = cache.buildingConfigs || (await fetchBuildingConfigs({}));\n  const speedupConfigs = cache.speedupConfigs || (await fetchSpeedupConfigs());\n  const transfers = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: 'transfers'\n    },\n    customProcessor: ({\n      row\n    }) => ({\n      assetId: row.asset_id,\n      owner: row.owner,\n      time: row.time * 1000\n    })\n  });\n  const accountTransfers = _(transfers).filter(transfer => transfer.owner === accountName).value();\n  let assets = {\n    workers: [],\n    buildings: [],\n    travelpasses: [],\n    speedups: []\n  };\n  if (accountTransfers.length > 0) {\n    const _assets = _(await fetchAssets({\n      params: {\n        ids: _.map(accountTransfers, t => t.assetId).join(',')\n      },\n      customProcessor: ({\n        asset\n      }) => {\n        switch (asset.schema.schema_name) {\n          case 'worker':\n            const workerLevel = Number(asset.data.rarity.split(' ')[1]);\n            const isSkilledWorker = asset.data.realm !== 'Unskilled';\n            return {\n              assetId: asset.asset_id,\n              level: workerLevel,\n              realmName: isSkilledWorker ? asset.data.realm : null,\n              config: workerConfigs.find(config => config.level === workerLevel),\n              isSkilledWorker,\n              numShiftsLeft: isSkilledWorker ? 0 : Number(asset.data.shifts),\n              key: 'workers'\n            };\n          case 'building':\n            const buildingLevel = Number(asset.data.rarity.split(' ')[1]);\n            const resourceType = asset.data.resource.toLowerCase();\n            return {\n              assetId: asset.asset_id,\n              level: buildingLevel,\n              realmName: asset.data.realm,\n              config: buildingConfigs.find(config => config.level === buildingLevel && config.resourceType === resourceType),\n              key: 'buildings'\n            };\n          case 'travelpass':\n            return {\n              assetId: asset.asset_id,\n              realmName: asset.data.realm,\n              key: 'travelpasses'\n            };\n          case 'land':\n            return {\n              assetId: asset.asset_id,\n              realmName: asset.data.realm,\n              key: 'lands'\n            };\n          case 'chapter.one':\n          case 'chapter.two':\n          case 'sketch':\n          case 'promo':\n            return {\n              assetId: asset.asset_id,\n              realmName: asset.data.realm,\n              rarity: asset.data.rarity || asset.data.Rarity,\n              color: asset.data.color,\n              config: speedupConfigs.find(config => config.level === asset.data.rarity),\n              key: 'speedups'\n            };\n        }\n      }\n    })).groupBy(asset => asset.key).value();\n    assets = {\n      ...assets,\n      ..._assets\n    };\n  }\n  return assets;\n};\nmodule.exports = fetchAccountTransfers;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","fetchAssets","fetchWorkerConfigs","fetchBuildingConfigs","fetchSpeedupConfigs","fetchAccountTransfers","accountName","cache","workerConfigs","buildingConfigs","speedupConfigs","transfers","params","code","GAME","scope","table","customProcessor","row","assetId","asset_id","owner","time","accountTransfers","filter","transfer","value","assets","workers","buildings","travelpasses","speedups","length","_assets","ids","map","t","join","asset","schema","schema_name","workerLevel","Number","data","rarity","split","isSkilledWorker","realm","level","realmName","config","find","numShiftsLeft","shifts","key","buildingLevel","resourceType","resource","toLowerCase","Rarity","color","groupBy","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountTransfers.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAssets = require('../../atomicassets/api/fetchAssets');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchSpeedupConfigs = require('./fetchSpeedupConfigs');\n\nconst fetchAccountTransfers = async ({\n    accountName,\n    cache = {},\n}) => {\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const buildingConfigs = cache.buildingConfigs || await fetchBuildingConfigs({});\n    const speedupConfigs = cache.speedupConfigs || await fetchSpeedupConfigs();\n    const transfers = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: 'transfers',\n        },\n        customProcessor: ({row}) => ({\n            assetId: row.asset_id,\n            owner: row.owner,\n            time: row.time * 1000,\n        }),\n    });\n    \n    const accountTransfers = _(transfers)\n        .filter(transfer => transfer.owner === accountName)\n        .value();\n    \n    let assets = {\n        workers: [],\n        buildings: [],\n        travelpasses: [],\n        speedups: [],\n    };\n    if (accountTransfers.length > 0) {\n        const _assets = _(await fetchAssets({\n            params: {\n                ids: _.map(accountTransfers, t => t.assetId).join(','),\n            },\n            customProcessor: ({asset}) => {\n                switch(asset.schema.schema_name) {\n                    case 'worker':\n                        const workerLevel = Number(asset.data.rarity.split(' ')[1]);\n                        const isSkilledWorker = asset.data.realm !== 'Unskilled';\n                        return {\n                            assetId: asset.asset_id,\n                            level: workerLevel,\n                            realmName: isSkilledWorker\n                                ? asset.data.realm\n                                : null,\n                            config: workerConfigs.find(config => config.level === workerLevel),\n                            isSkilledWorker,\n                            numShiftsLeft: isSkilledWorker\n                                ? 0\n                                : Number(asset.data.shifts),\n                            key: 'workers',\n                        };\n                    case 'building':\n                        const buildingLevel = Number(asset.data.rarity.split(' ')[1]);\n                        const resourceType = asset.data.resource.toLowerCase();\n                        return {\n                            assetId: asset.asset_id,\n                            level: buildingLevel,\n                            realmName: asset.data.realm,\n                            config: buildingConfigs.find(config => config.level === buildingLevel && config.resourceType === resourceType),\n                            key: 'buildings',\n                        };\n                    case 'travelpass':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            key: 'travelpasses',\n                        };\n                    case 'land':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            key: 'lands',\n                        };\n                    case 'chapter.one':\n                    case 'chapter.two':\n                    case 'sketch':\n                    case 'promo':\n                        return {\n                            assetId: asset.asset_id,\n                            realmName: asset.data.realm,\n                            rarity: asset.data.rarity || asset.data.Rarity,\n                            color: asset.data.color,\n                            config: speedupConfigs.find(config => config.level === asset.data.rarity),\n                            key: 'speedups',\n                        };\n                }\n            },\n        }))\n            .groupBy(asset => asset.key)\n            .value();\n        \n        assets = {\n            ...assets,\n            ..._assets,\n        };\n    }\n\n    return assets;\n};\n\nmodule.exports = fetchAccountTransfers;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}