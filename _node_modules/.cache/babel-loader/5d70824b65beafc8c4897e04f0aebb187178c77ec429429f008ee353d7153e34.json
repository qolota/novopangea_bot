{"ast":null,"code":"const _ = require('lodash');\nconst fetchPlantPools = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'plantpools',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const plantPools = _(data.rows).map(plantPool => ({\n    id: plantPool.plant_id,\n    currentPool: _.round(Number(plantPool.current_pool), 2),\n    lastHarvested: new Date(`${plantPool.last_harvested}Z`),\n    totalPower: Number(plantPool.total_power)\n  })).value();\n  return plantPools;\n};\nmodule.exports = fetchPlantPools;","map":{"version":3,"names":["_","require","fetchPlantPools","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","plantPools","map","plantPool","id","plant_id","currentPool","round","Number","current_pool","lastHarvested","Date","last_harvested","totalPower","total_power","value","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchPlantPools.js"],"sourcesContent":["const _ = require('lodash');\n\nconst fetchPlantPools = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'plantpools',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n\n  const plantPools = _(data.rows)\n    .map((plantPool) => ({\n      id: plantPool.plant_id,\n      currentPool: _.round(Number(plantPool.current_pool), 2),\n      lastHarvested: new Date(`${plantPool.last_harvested}Z`),\n      totalPower: Number(plantPool.total_power),\n    }))\n    .value();\n  return plantPools;\n};\n\nmodule.exports = fetchPlantPools;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC1EC,OAAO,EAAE;MACPC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,IAAI,EAAE,cAAc;MACpBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,cAAc;MACrBC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE,YAAY;MACnBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAIU,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,UAAU,GAAGzB,CAAC,CAACsB,IAAI,CAACC,IAAI,CAAC,CAC5BG,GAAG,CAAEC,SAAS,KAAM;IACnBC,EAAE,EAAED,SAAS,CAACE,QAAQ;IACtBC,WAAW,EAAE9B,CAAC,CAAC+B,KAAK,CAACC,MAAM,CAACL,SAAS,CAACM,YAAY,CAAC,EAAE,CAAC,CAAC;IACvDC,aAAa,EAAE,IAAIC,IAAI,CAAE,GAAER,SAAS,CAACS,cAAe,GAAE,CAAC;IACvDC,UAAU,EAAEL,MAAM,CAACL,SAAS,CAACW,WAAW;EAC1C,CAAC,CAAC,CAAC,CACFC,KAAK,CAAC,CAAC;EACV,OAAOd,UAAU;AACnB,CAAC;AAEDe,MAAM,CAACC,OAAO,GAAGvC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}