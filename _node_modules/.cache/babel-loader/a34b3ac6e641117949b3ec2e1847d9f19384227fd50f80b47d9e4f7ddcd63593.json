{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byte_vector_to_int = exports.int_to_byte_vector = exports.concat_byte_arrays = exports.hex_encode = exports.hex_decode = exports.base58_encode = exports.base58_decode = exports.zigzag_decode = exports.zigzag_encode = exports.integer_unsign = exports.integer_sign = exports.varint_decode = exports.varint_encode = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst DeserializationError_1 = __importDefault(require(\"../Errors/DeserializationError\"));\nconst SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\nconst Base_1 = __importDefault(require(\"./Coders/Base\"));\nfunction varint_encode(input) {\n  const bytes = [];\n  let n = (0, big_integer_1.default)(input);\n  if (n.lesser(0)) {\n    throw new SerializationError_1.default('cant pack negative integer');\n  }\n  while (true) {\n    const byte = n.and(0x7F);\n    n = n.shiftRight(7);\n    if (n.equals(0)) {\n      bytes.push(byte.toJSNumber());\n      break;\n    }\n    bytes.push(byte.toJSNumber() + 128);\n  }\n  return new Uint8Array(bytes);\n}\nexports.varint_encode = varint_encode;\nfunction varint_decode(state) {\n  let result = (0, big_integer_1.default)(0);\n  for (let i = 0; true; i++) {\n    if (state.position >= state.data.length) {\n      throw new DeserializationError_1.default('failed to unpack integer');\n    }\n    const byte = (0, big_integer_1.default)(state.data[state.position]);\n    state.position += 1;\n    if (byte.lesser(128)) {\n      result = result.plus(byte.shiftLeft(7 * i));\n      break;\n    }\n    result = result.plus(byte.and(0x7F).shiftLeft(7 * i));\n  }\n  return result;\n}\nexports.varint_decode = varint_decode;\nfunction integer_sign(input, size) {\n  const n = (0, big_integer_1.default)(input);\n  if (n.greaterOrEquals((0, big_integer_1.default)(2).pow(8 * size - 1))) {\n    throw new Error('cannot sign integer: too big');\n  }\n  if (n.greaterOrEquals(0)) {\n    return n;\n  }\n  return n.negate().xor((0, big_integer_1.default)(2).pow(8 * size).minus(1)).plus(1);\n}\nexports.integer_sign = integer_sign;\nfunction integer_unsign(input, size) {\n  const n = (0, big_integer_1.default)(input);\n  if (n.greater((0, big_integer_1.default)(2).pow(8 * size))) {\n    throw new Error('cannot unsign integer: too big');\n  }\n  if (n.greater((0, big_integer_1.default)(2).pow(8 * size - 1))) {\n    return n.minus(1).xor((0, big_integer_1.default)(2).pow(8 * size).minus(1)).negate();\n  }\n  return n;\n}\nexports.integer_unsign = integer_unsign;\nfunction zigzag_encode(input) {\n  const n = (0, big_integer_1.default)(input);\n  if (n.lesser(0)) {\n    return n.plus(1).multiply(-2).plus(1);\n  }\n  return n.multiply(2);\n}\nexports.zigzag_encode = zigzag_encode;\nfunction zigzag_decode(input) {\n  const n = (0, big_integer_1.default)(input);\n  if (n.mod(2).equals(0)) {\n    return n.divmod(2).quotient;\n  }\n  return n.divmod(2).quotient.multiply(-1).minus(1);\n}\nexports.zigzag_decode = zigzag_decode;\nconst bs58 = new Base_1.default('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nfunction base58_decode(data) {\n  return bs58.decode(data);\n}\nexports.base58_decode = base58_decode;\nfunction base58_encode(data) {\n  return bs58.encode(data);\n}\nexports.base58_encode = base58_encode;\nfunction hex_decode(hex) {\n  const bytes = hex.match(/.{1,2}/g);\n  if (!bytes) {\n    return new Uint8Array(0);\n  }\n  return new Uint8Array(bytes.map(byte => parseInt(byte, 16)));\n}\nexports.hex_decode = hex_decode;\nfunction hex_encode(bytes) {\n  return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\nexports.hex_encode = hex_encode;\nfunction concat_byte_arrays(arr) {\n  // concat all bytearrays into one array\n  const data = new Uint8Array(arr.reduce((acc, val) => acc + val.length, 0));\n  let offset = 0;\n  for (const bytes of arr) {\n    data.set(bytes, offset);\n    offset += bytes.length;\n  }\n  return data;\n}\nexports.concat_byte_arrays = concat_byte_arrays;\nfunction int_to_byte_vector(n) {\n  const bytes = [];\n  let num = (0, big_integer_1.default)(n);\n  while (num.notEquals(0)) {\n    bytes.push(num.and(0xFF).toJSNumber());\n    num = num.shiftRight(8);\n  }\n  return new Uint8Array(bytes);\n}\nexports.int_to_byte_vector = int_to_byte_vector;\nfunction byte_vector_to_int(bytes) {\n  let num = (0, big_integer_1.default)(0);\n  for (let i = 0; i < bytes.length; i++) {\n    num = num.plus((0, big_integer_1.default)(bytes[i]).shiftLeft(8 * i));\n  }\n  return num.toJSNumber();\n}\nexports.byte_vector_to_int = byte_vector_to_int;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","byte_vector_to_int","int_to_byte_vector","concat_byte_arrays","hex_encode","hex_decode","base58_encode","base58_decode","zigzag_decode","zigzag_encode","integer_unsign","integer_sign","varint_decode","varint_encode","big_integer_1","require","DeserializationError_1","SerializationError_1","Base_1","input","bytes","n","default","lesser","byte","and","shiftRight","equals","push","toJSNumber","Uint8Array","state","result","i","position","data","length","plus","shiftLeft","size","greaterOrEquals","pow","Error","negate","xor","minus","greater","multiply","divmod","quotient","bs58","decode","encode","hex","match","map","parseInt","reduce","str","toString","padStart","arr","acc","val","offset","set","num","notEquals"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/Serialization/Binary.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.byte_vector_to_int = exports.int_to_byte_vector = exports.concat_byte_arrays = exports.hex_encode = exports.hex_decode = exports.base58_encode = exports.base58_decode = exports.zigzag_decode = exports.zigzag_encode = exports.integer_unsign = exports.integer_sign = exports.varint_decode = exports.varint_encode = void 0;\nconst big_integer_1 = __importDefault(require(\"big-integer\"));\nconst DeserializationError_1 = __importDefault(require(\"../Errors/DeserializationError\"));\nconst SerializationError_1 = __importDefault(require(\"../Errors/SerializationError\"));\nconst Base_1 = __importDefault(require(\"./Coders/Base\"));\nfunction varint_encode(input) {\n    const bytes = [];\n    let n = (0, big_integer_1.default)(input);\n    if (n.lesser(0)) {\n        throw new SerializationError_1.default('cant pack negative integer');\n    }\n    while (true) {\n        const byte = n.and(0x7F);\n        n = n.shiftRight(7);\n        if (n.equals(0)) {\n            bytes.push(byte.toJSNumber());\n            break;\n        }\n        bytes.push(byte.toJSNumber() + 128);\n    }\n    return new Uint8Array(bytes);\n}\nexports.varint_encode = varint_encode;\nfunction varint_decode(state) {\n    let result = (0, big_integer_1.default)(0);\n    for (let i = 0; true; i++) {\n        if (state.position >= state.data.length) {\n            throw new DeserializationError_1.default('failed to unpack integer');\n        }\n        const byte = (0, big_integer_1.default)(state.data[state.position]);\n        state.position += 1;\n        if (byte.lesser(128)) {\n            result = result.plus(byte.shiftLeft(7 * i));\n            break;\n        }\n        result = result.plus(byte.and(0x7F).shiftLeft(7 * i));\n    }\n    return result;\n}\nexports.varint_decode = varint_decode;\nfunction integer_sign(input, size) {\n    const n = (0, big_integer_1.default)(input);\n    if (n.greaterOrEquals((0, big_integer_1.default)(2).pow(8 * size - 1))) {\n        throw new Error('cannot sign integer: too big');\n    }\n    if (n.greaterOrEquals(0)) {\n        return n;\n    }\n    return n.negate().xor((0, big_integer_1.default)(2).pow(8 * size).minus(1)).plus(1);\n}\nexports.integer_sign = integer_sign;\nfunction integer_unsign(input, size) {\n    const n = (0, big_integer_1.default)(input);\n    if (n.greater((0, big_integer_1.default)(2).pow(8 * size))) {\n        throw new Error('cannot unsign integer: too big');\n    }\n    if (n.greater((0, big_integer_1.default)(2).pow(8 * size - 1))) {\n        return n.minus(1).xor((0, big_integer_1.default)(2).pow(8 * size).minus(1)).negate();\n    }\n    return n;\n}\nexports.integer_unsign = integer_unsign;\nfunction zigzag_encode(input) {\n    const n = (0, big_integer_1.default)(input);\n    if (n.lesser(0)) {\n        return n.plus(1).multiply(-2).plus(1);\n    }\n    return n.multiply(2);\n}\nexports.zigzag_encode = zigzag_encode;\nfunction zigzag_decode(input) {\n    const n = (0, big_integer_1.default)(input);\n    if (n.mod(2).equals(0)) {\n        return n.divmod(2).quotient;\n    }\n    return n.divmod(2).quotient.multiply(-1).minus(1);\n}\nexports.zigzag_decode = zigzag_decode;\nconst bs58 = new Base_1.default('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nfunction base58_decode(data) {\n    return bs58.decode(data);\n}\nexports.base58_decode = base58_decode;\nfunction base58_encode(data) {\n    return bs58.encode(data);\n}\nexports.base58_encode = base58_encode;\nfunction hex_decode(hex) {\n    const bytes = hex.match(/.{1,2}/g);\n    if (!bytes) {\n        return new Uint8Array(0);\n    }\n    return new Uint8Array(bytes.map((byte) => parseInt(byte, 16)));\n}\nexports.hex_decode = hex_decode;\nfunction hex_encode(bytes) {\n    return bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n}\nexports.hex_encode = hex_encode;\nfunction concat_byte_arrays(arr) {\n    // concat all bytearrays into one array\n    const data = new Uint8Array(arr.reduce((acc, val) => acc + val.length, 0));\n    let offset = 0;\n    for (const bytes of arr) {\n        data.set(bytes, offset);\n        offset += bytes.length;\n    }\n    return data;\n}\nexports.concat_byte_arrays = concat_byte_arrays;\nfunction int_to_byte_vector(n) {\n    const bytes = [];\n    let num = (0, big_integer_1.default)(n);\n    while (num.notEquals(0)) {\n        bytes.push(num.and(0xFF).toJSNumber());\n        num = num.shiftRight(8);\n    }\n    return new Uint8Array(bytes);\n}\nexports.int_to_byte_vector = int_to_byte_vector;\nfunction byte_vector_to_int(bytes) {\n    let num = (0, big_integer_1.default)(0);\n    for (let i = 0; i < bytes.length; i++) {\n        num = num.plus((0, big_integer_1.default)(bytes[i]).shiftLeft(8 * i));\n    }\n    return num.toJSNumber();\n}\nexports.byte_vector_to_int = byte_vector_to_int;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}