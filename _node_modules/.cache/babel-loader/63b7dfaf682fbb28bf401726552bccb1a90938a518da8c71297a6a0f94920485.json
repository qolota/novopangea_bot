{"ast":null,"code":"const _ = require('lodash');\nconst fetchBuildings = require('./fetchBuildings');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchAccountTransfers = require('./fetchAccountTransfers');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchSpeedupConfigs = require('./fetchSpeedupConfigs');\nconst fetchWorkers = require('./fetchWorkers');\nconst fetchOngoingUpgrades = require('./fetchOngoingUpgrades');\nconst {\n  getEconomyValues\n} = require('../consts/ECONOMY_VALUES');\nconst fetchAccountWorkers = async ({\n  accountName,\n  cache = {}\n}) => {\n  const economyValues = getEconomyValues();\n  const workerConfigs = cache.workerConfigs || (await fetchWorkerConfigs({}));\n  const buildingConfigs = cache.buildingConfigs || (await fetchBuildingConfigs({}));\n  const speedupConfigs = cache.speedupConfigs || (await fetchSpeedupConfigs());\n  const districts = cache.districts || (await fetchDistricts({}));\n  const buildings = cache.buildings || (await fetchBuildings({\n    cache: {\n      buildingConfigs,\n      districts\n    }\n  }));\n  const {\n    workers: staleWorkers\n  } = cache.accountTransfers || (await fetchAccountTransfers({\n    accountName,\n    cache: {\n      workerConfigs,\n      buildingConfigs,\n      speedupConfigs\n    }\n  }));\n  const skilledStaleWorkers = _(staleWorkers).filter(worker => worker.isSkilledWorker).value();\n  const readyToWorkUnskilledWorkers = _(staleWorkers).filter(worker => !worker.isSkilledWorker).value();\n  const readyToWorkWorkers = skilledStaleWorkers;\n  const readyToUpgradeWorkers = _(skilledStaleWorkers).filter(worker => worker.level < economyValues.UPGRADE_WORKERS_TO_LVL).value();\n  const workers = cache.workers || (await fetchWorkers({\n    cache: {\n      buildingConfigs,\n      workerConfigs,\n      districts,\n      buildings\n    }\n  }));\n  const upgrades = cache.upgrades || (await fetchOngoingUpgrades({\n    cache: {}\n  }));\n  const ongoingWorkerUpgrades = _(upgrades).filter(upgrade => upgrade.config.schema === 'worker').filter(upgrade => upgrade.owner === accountName).value();\n  const accountWorkers = _(workers).filter(worker => worker.owner === accountName).value();\n  const busyWorkers = _(accountWorkers).filter(worker => worker.isWorking).value();\n  const restWorkers = _(accountWorkers).filter(worker => !worker.isWorking && worker.isSleeping).value();\n  const readyToWakeupWorkers = _(accountWorkers).filter(worker => !worker.isWorking && !worker.needSleeping && !worker.isSleeping).value();\n  // TODO: this is a hack should be fixed properly\n  // we need to get information about worker from AH\n  // but that might be expensive and unstable\n  const readyToRestWorkers = _(accountWorkers).filter(worker => !worker.isWorking && worker.needSleeping).filter(worker => worker.level > 1).value();\n  const readyToRestUnskilledWorkers = _(accountWorkers).filter(worker => !worker.isWorking && worker.needSleeping).filter(worker => worker.level === 1).value();\n  const sets = {\n    busyWorkers,\n    restWorkers,\n    readyToRestWorkers,\n    readyToWakeupWorkers,\n    readyToWorkWorkers,\n    readyToUpgradeWorkers,\n    ongoingWorkerUpgrades,\n    readyToWorkUnskilledWorkers,\n    readyToRestUnskilledWorkers\n  };\n  console.log(`Busy workers: ${busyWorkers.length}`);\n  console.log(`Rest workers: ${restWorkers.length}`);\n  console.log(`Ready to wake up workers: ${readyToWakeupWorkers.length}`);\n  console.log(`Ready to rest skilled workers: ${readyToRestWorkers.length}`);\n  console.log(`Ready to work skilled workers: ${readyToWorkWorkers.length}`);\n  console.log(`Ready to upgrade skilled workers: ${readyToUpgradeWorkers.length}`);\n  console.log(`Ongoing skilled workers upgrades: ${ongoingWorkerUpgrades.length}`);\n  console.log(`Ready to work unskilled workers: ${readyToWorkUnskilledWorkers.length}`);\n  console.log(`Ready to rest unskilled workers: ${readyToRestUnskilledWorkers.length}`);\n  return sets;\n};\nmodule.exports = fetchAccountWorkers;","map":{"version":3,"names":["_","require","fetchBuildings","fetchDistricts","fetchWorkerConfigs","fetchAccountTransfers","fetchBuildingConfigs","fetchSpeedupConfigs","fetchWorkers","fetchOngoingUpgrades","getEconomyValues","fetchAccountWorkers","accountName","cache","economyValues","workerConfigs","buildingConfigs","speedupConfigs","districts","buildings","workers","staleWorkers","accountTransfers","skilledStaleWorkers","filter","worker","isSkilledWorker","value","readyToWorkUnskilledWorkers","readyToWorkWorkers","readyToUpgradeWorkers","level","UPGRADE_WORKERS_TO_LVL","upgrades","ongoingWorkerUpgrades","upgrade","config","schema","owner","accountWorkers","busyWorkers","isWorking","restWorkers","isSleeping","readyToWakeupWorkers","needSleeping","readyToRestWorkers","readyToRestUnskilledWorkers","sets","console","log","length","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountWorkers.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchBuildings = require('./fetchBuildings');\nconst fetchDistricts = require('./fetchDistricts');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst fetchAccountTransfers = require('./fetchAccountTransfers');\nconst fetchBuildingConfigs = require('./fetchBuildingConfigs');\nconst fetchSpeedupConfigs = require('./fetchSpeedupConfigs');\nconst fetchWorkers = require('./fetchWorkers');\nconst fetchOngoingUpgrades = require('./fetchOngoingUpgrades');\nconst {\n    getEconomyValues,\n} = require('../consts/ECONOMY_VALUES');\n\nconst fetchAccountWorkers = async ({\n    accountName,\n    cache = {},\n}) => {\n    const economyValues = getEconomyValues();\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const buildingConfigs = cache.buildingConfigs || await fetchBuildingConfigs({});\n    const speedupConfigs = cache.speedupConfigs || await fetchSpeedupConfigs();\n    const districts = cache.districts || await fetchDistricts({});\n    const buildings = cache.buildings || await fetchBuildings({\n        cache: {\n            buildingConfigs,\n            districts,\n        },\n    });\n    const { workers: staleWorkers } = cache.accountTransfers || await fetchAccountTransfers({\n        accountName,\n        cache: {\n            workerConfigs,\n            buildingConfigs,\n            speedupConfigs,\n        },\n    });\n    const skilledStaleWorkers = _(staleWorkers)\n        .filter(worker => worker.isSkilledWorker)\n        .value();\n    const readyToWorkUnskilledWorkers = _(staleWorkers)\n        .filter(worker => !worker.isSkilledWorker)\n        .value();\n    const readyToWorkWorkers = skilledStaleWorkers;\n    const readyToUpgradeWorkers = _(skilledStaleWorkers)\n        .filter(worker => worker.level < economyValues.UPGRADE_WORKERS_TO_LVL)\n        .value();\n    const workers = cache.workers || await fetchWorkers({\n        cache: {\n            buildingConfigs,\n            workerConfigs,\n            districts,\n            buildings,\n        },\n    });\n    const upgrades = cache.upgrades || await fetchOngoingUpgrades({\n        cache: {},\n    });\n    const ongoingWorkerUpgrades = _(upgrades)\n        .filter(upgrade => upgrade.config.schema === 'worker')\n        .filter(upgrade => upgrade.owner === accountName)\n        .value();\n    \n    const accountWorkers = _(workers)\n        .filter(worker => worker.owner === accountName)\n        .value();\n    const busyWorkers = _(accountWorkers)\n        .filter(worker => worker.isWorking)\n        .value();\n    const restWorkers = _(accountWorkers)\n        .filter(worker => !worker.isWorking && worker.isSleeping)\n        .value();\n    const readyToWakeupWorkers = _(accountWorkers)\n        .filter(worker => !worker.isWorking && !worker.needSleeping && !worker.isSleeping)\n        .value();\n    // TODO: this is a hack should be fixed properly\n    // we need to get information about worker from AH\n    // but that might be expensive and unstable\n    const readyToRestWorkers = _(accountWorkers)\n        .filter(worker => !worker.isWorking && worker.needSleeping)\n        .filter(worker => worker.level > 1)\n        .value();\n    const readyToRestUnskilledWorkers = _(accountWorkers)\n        .filter(worker => !worker.isWorking && worker.needSleeping)\n        .filter(worker => worker.level === 1)\n        .value();\n\n    const sets = {\n        busyWorkers,\n        restWorkers,\n        readyToRestWorkers,\n        readyToWakeupWorkers,\n        readyToWorkWorkers,\n        readyToUpgradeWorkers,\n        ongoingWorkerUpgrades,\n        readyToWorkUnskilledWorkers,\n        readyToRestUnskilledWorkers,\n    };\n\n    console.log(`Busy workers: ${busyWorkers.length}`);\n    console.log(`Rest workers: ${restWorkers.length}`);\n    console.log(`Ready to wake up workers: ${readyToWakeupWorkers.length}`);\n    console.log(`Ready to rest skilled workers: ${readyToRestWorkers.length}`);\n    console.log(`Ready to work skilled workers: ${readyToWorkWorkers.length}`);\n    console.log(`Ready to upgrade skilled workers: ${readyToUpgradeWorkers.length}`);\n    console.log(`Ongoing skilled workers upgrades: ${ongoingWorkerUpgrades.length}`);\n    console.log(`Ready to work unskilled workers: ${readyToWorkUnskilledWorkers.length}`);\n    console.log(`Ready to rest unskilled workers: ${readyToRestUnskilledWorkers.length}`);\n\n    return sets;\n};\n\nmodule.exports = fetchAccountWorkers;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}