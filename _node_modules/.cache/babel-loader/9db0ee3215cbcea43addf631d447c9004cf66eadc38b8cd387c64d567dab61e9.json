{"ast":null,"code":"/**\n * big-number.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2018 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n\n!function () {\n  'use strict';\n\n  // Helper function which tests if a given character is a digit\n  var testDigit = function (digit) {\n    return /^\\d$/.test(digit);\n  };\n\n  // Helper function which returns the absolute value of a given number\n  var abs = function (number) {\n    var bigNumber;\n    if (typeof number === 'undefined') {\n      return;\n    }\n    bigNumber = BigNumber(number);\n    bigNumber.sign = 1;\n    return bigNumber;\n  };\n\n  // Check if argument is valid array\n  var isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n  var isValidType = function (number) {\n    return [typeof number === 'number', typeof number === 'string' && number.length > 0, isArray(number) && number.length > 0, number instanceof BigNumber].some(function (bool) {\n      return bool === true;\n    });\n  };\n  var errors = {\n    'invalid': 'Invalid Number',\n    'division by zero': 'Invalid Number - Division By Zero'\n  };\n\n  // Constructor function which creates a new BigNumber object\n  // from an integer, a string, an array or other BigNumber object\n  function BigNumber(initialNumber) {\n    var index;\n    if (!(this instanceof BigNumber)) {\n      return new BigNumber(initialNumber);\n    }\n    this.number = [];\n    this.sign = 1;\n    this.rest = 0;\n\n    // The initial number can be an array, string, number of another big number\n    // e.g. array     : [3,2,1], ['+',3,2,1], ['-',3,2,1]\n    //      number    : 312\n    //      string    : '321', '+321', -321'\n    //      BigNumber : BigNumber(321)\n    // Every character except the first must be a digit\n\n    if (!isValidType(initialNumber)) {\n      this.number = errors['invalid'];\n      return;\n    }\n    if (isArray(initialNumber)) {\n      if (initialNumber.length && initialNumber[0] === '-' || initialNumber[0] === '+') {\n        this.sign = initialNumber[0] === '+' ? 1 : -1;\n        initialNumber.shift(0);\n      }\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(initialNumber[index])) return;\n      }\n    } else {\n      initialNumber = initialNumber.toString();\n      if (initialNumber.charAt(0) === '-' || initialNumber.charAt(0) === '+') {\n        this.sign = initialNumber.charAt(0) === '+' ? 1 : -1;\n        initialNumber = initialNumber.substring(1);\n      }\n      for (index = initialNumber.length - 1; index >= 0; index--) {\n        if (!this.addDigit(parseInt(initialNumber.charAt(index), 10))) {\n          return;\n        }\n      }\n    }\n  }\n  BigNumber.prototype.addDigit = function (digit) {\n    if (testDigit(digit)) {\n      this.number.push(digit);\n    } else {\n      this.number = errors['invalid'];\n      return false;\n    }\n    return this;\n  };\n  BigNumber.prototype.isEven = function () {\n    return this.number[0] % 2 === 0;\n  };\n\n  // returns:\n  //      null if this.number is not a number\n  //      0 if this.number === number\n  //      -1 if this.number < number\n  //      1 if this.number > number\n  BigNumber.prototype._compare = function (number) {\n    var bigNumber;\n    var index;\n    if (!isValidType(number)) {\n      return null;\n    }\n    bigNumber = BigNumber(number);\n\n    // If the numbers have different signs, then the positive\n    // number is greater\n    if (this.sign !== bigNumber.sign) {\n      return this.sign;\n    }\n\n    // Else, check the length\n    if (this.number.length > bigNumber.number.length) {\n      return this.sign;\n    } else if (this.number.length < bigNumber.number.length) {\n      return this.sign * -1;\n    }\n\n    // If they have similar length, compare the numbers\n    // digit by digit\n    for (index = this.number.length - 1; index >= 0; index--) {\n      if (this.number[index] > bigNumber.number[index]) {\n        return this.sign;\n      } else if (this.number[index] < bigNumber.number[index]) {\n        return this.sign * -1;\n      }\n    }\n    return 0;\n  };\n\n  // Greater than\n  BigNumber.prototype.gt = function (number) {\n    return this._compare(number) > 0;\n  };\n\n  // Greater than or equal\n  BigNumber.prototype.gte = function (number) {\n    return this._compare(number) >= 0;\n  };\n\n  // this.number equals n\n  BigNumber.prototype.equals = function (number) {\n    return this._compare(number) === 0;\n  };\n\n  // Less than or equal\n  BigNumber.prototype.lte = function (number) {\n    return this._compare(number) <= 0;\n  };\n\n  // Less than\n  BigNumber.prototype.lt = function (number) {\n    return this._compare(number) < 0;\n  };\n\n  // Addition\n  BigNumber.prototype.add = function (number) {\n    var bigNumber;\n    if (typeof number === 'undefined') {\n      return this;\n    }\n    bigNumber = BigNumber(number);\n    if (this.sign !== bigNumber.sign) {\n      if (this.sign > 0) {\n        bigNumber.sign = 1;\n        return this.minus(bigNumber);\n      } else {\n        this.sign = 1;\n        return bigNumber.minus(this);\n      }\n    }\n    this.number = BigNumber._add(this, bigNumber);\n    return this;\n  };\n\n  // Subtraction\n  BigNumber.prototype.subtract = function (number) {\n    var bigNumber;\n    if (typeof number === 'undefined') {\n      return this;\n    }\n    bigNumber = BigNumber(number);\n    if (this.sign !== bigNumber.sign) {\n      this.number = BigNumber._add(this, bigNumber);\n      return this;\n    }\n\n    // If current number is lesser than the given bigNumber, the result will be negative\n    this.sign = this.lt(bigNumber) ? -1 : 1;\n    this.number = abs(this).lt(abs(bigNumber)) ? BigNumber._subtract(bigNumber, this) : BigNumber._subtract(this, bigNumber);\n    return this;\n  };\n\n  // adds two positive BigNumbers\n  BigNumber._add = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = Math.max(a.number.length, b.number.length);\n    for (index = 0; index < length || remainder > 0; index++) {\n      a.number[index] = (remainder += (a.number[index] || 0) + (b.number[index] || 0)) % 10;\n      remainder = Math.floor(remainder / 10);\n    }\n    return a.number;\n  };\n\n  // a - b\n  // a and b are 2 positive BigNumbers and a > b\n  BigNumber._subtract = function (a, b) {\n    var index;\n    var remainder = 0;\n    var length = a.number.length;\n    for (index = 0; index < length; index++) {\n      a.number[index] -= (b.number[index] || 0) + remainder;\n      a.number[index] += (remainder = a.number[index] < 0 ? 1 : 0) * 10;\n    }\n    // Count the zeroes which will be removed\n    index = 0;\n    length = a.number.length - 1;\n    while (a.number[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n    if (index > 0) {\n      a.number.splice(-index);\n    }\n    return a.number;\n  };\n\n  // this.number * number\n  BigNumber.prototype.multiply = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n    var bigNumber = BigNumber(number);\n    var index;\n    var givenNumberIndex;\n    var remainder = 0;\n    var result = [];\n    if (this.isZero() || bigNumber.isZero()) {\n      return BigNumber(0);\n    }\n    this.sign *= bigNumber.sign;\n\n    // multiply the numbers\n    for (index = 0; index < this.number.length; index++) {\n      for (remainder = 0, givenNumberIndex = 0; givenNumberIndex < bigNumber.number.length || remainder > 0; givenNumberIndex++) {\n        result[index + givenNumberIndex] = (remainder += (result[index + givenNumberIndex] || 0) + this.number[index] * (bigNumber.number[givenNumberIndex] || 0)) % 10;\n        remainder = Math.floor(remainder / 10);\n      }\n    }\n    this.number = result;\n    return this;\n  };\n\n  // this.number / number\n  BigNumber.prototype.divide = function (number) {\n    if (typeof number === 'undefined') {\n      return this;\n    }\n    var bigNumber = BigNumber(number);\n    var index;\n    var length;\n    var result = [];\n    var rest = BigNumber(0);\n\n    // test if one of the numbers is zero\n    if (bigNumber.isZero()) {\n      this.number = errors['division by zero'];\n      return this;\n    } else if (this.isZero()) {\n      this.rest = BigNumber(0);\n      return this;\n    }\n    this.sign *= bigNumber.sign;\n    bigNumber.sign = 1;\n\n    // Skip division by 1\n    if (bigNumber.number.length === 1 && bigNumber.number[0] === 1) {\n      this.rest = BigNumber(0);\n      return this;\n    }\n    for (index = this.number.length - 1; index >= 0; index--) {\n      rest.multiply(10);\n      rest.number[0] = this.number[index];\n      result[index] = 0;\n      while (bigNumber.lte(rest)) {\n        result[index]++;\n        rest.subtract(bigNumber);\n      }\n    }\n    index = 0;\n    length = result.length - 1;\n    while (result[length - index] === 0 && length - index > 0) {\n      index++;\n    }\n    if (index > 0) {\n      result.splice(-index);\n    }\n    this.rest = rest;\n    this.number = result;\n    return this;\n  };\n\n  // this.number % number\n  BigNumber.prototype.mod = function (number) {\n    return this.divide(number).rest;\n  };\n  BigNumber.prototype.power = function (number) {\n    if (typeof number === 'undefined') return;\n    var bigNumber;\n    var bigNumberPower;\n    // Convert the argument to a big number\n    if (!isValidType(number)) {\n      this.number = errors['invalid'];\n      return;\n    }\n    bigNumberPower = BigNumber(number);\n    if (bigNumberPower.isZero()) {\n      return BigNumber(1);\n    }\n    if (bigNumberPower.val() === '1') {\n      return this;\n    }\n    bigNumber = BigNumber(this);\n    this.number = [1];\n    while (bigNumberPower.gt(0)) {\n      if (!bigNumberPower.isEven()) {\n        this.multiply(bigNumber);\n        bigNumberPower.subtract(1);\n        continue;\n      }\n      bigNumber.multiply(bigNumber);\n      bigNumberPower.div(2);\n    }\n    return this;\n  };\n\n  // |this.number|\n  BigNumber.prototype.abs = function () {\n    this.sign = 1;\n    return this;\n  };\n\n  // Check if this.number is equal to 0\n  BigNumber.prototype.isZero = function () {\n    var index;\n    for (index = 0; index < this.number.length; index++) {\n      if (this.number[index] !== 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // this.number.toString()\n  BigNumber.prototype.toString = function () {\n    var index;\n    var str = '';\n    if (typeof this.number === 'string') {\n      return this.number;\n    }\n    for (index = this.number.length - 1; index >= 0; index--) {\n      str += this.number[index];\n    }\n    return this.sign > 0 ? str : '-' + str;\n  };\n\n  // Use shorcuts for functions names\n  BigNumber.prototype.plus = BigNumber.prototype.add;\n  BigNumber.prototype.minus = BigNumber.prototype.subtract;\n  BigNumber.prototype.div = BigNumber.prototype.divide;\n  BigNumber.prototype.mult = BigNumber.prototype.multiply;\n  BigNumber.prototype.pow = BigNumber.prototype.power;\n  BigNumber.prototype.val = BigNumber.prototype.toString;\n\n  // CommonJS\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = BigNumber;\n  } else if (typeof window !== 'undefined') {\n    window.BigNumber = BigNumber;\n  }\n}();","map":{"version":3,"names":["testDigit","digit","test","abs","number","bigNumber","BigNumber","sign","isArray","arg","Object","prototype","toString","call","isValidType","length","some","bool","errors","initialNumber","index","rest","shift","addDigit","charAt","substring","parseInt","push","isEven","_compare","gt","gte","equals","lte","lt","add","minus","_add","subtract","_subtract","a","b","remainder","Math","max","floor","splice","multiply","givenNumberIndex","result","isZero","divide","mod","power","bigNumberPower","val","div","str","plus","mult","pow","exports","module","window"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/big-number/big-number.js"],"sourcesContent":["/**\n * big-number.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2018 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n\n!(function() {\n    'use strict';\n\n    // Helper function which tests if a given character is a digit\n    var testDigit = function(digit) {\n        return (/^\\d$/.test(digit));\n    };\n\n    // Helper function which returns the absolute value of a given number\n    var abs = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return;\n        }\n        bigNumber = BigNumber(number);\n        bigNumber.sign = 1;\n        return bigNumber;\n    };\n\n    // Check if argument is valid array\n    var isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n\n    var isValidType = function(number) {\n        return [\n            typeof number === 'number',\n            typeof number === 'string' && number.length > 0,\n            isArray(number) && number.length > 0,\n            number instanceof BigNumber\n        ].some(function(bool) {\n            return bool === true;\n        });\n    };\n\n    var errors = {\n        'invalid': 'Invalid Number',\n        'division by zero': 'Invalid Number - Division By Zero'\n    };\n\n    // Constructor function which creates a new BigNumber object\n    // from an integer, a string, an array or other BigNumber object\n    function BigNumber(initialNumber) {\n        var index;\n\n        if (!(this instanceof BigNumber)) {\n            return new BigNumber(initialNumber);\n        }\n\n        this.number = [];\n        this.sign = 1;\n        this.rest = 0;\n\n        // The initial number can be an array, string, number of another big number\n        // e.g. array     : [3,2,1], ['+',3,2,1], ['-',3,2,1]\n        //      number    : 312\n        //      string    : '321', '+321', -321'\n        //      BigNumber : BigNumber(321)\n        // Every character except the first must be a digit\n\n        if (!isValidType(initialNumber)) {\n            this.number = errors['invalid'];\n            return;\n        }\n\n        if (isArray(initialNumber)) {\n            if (initialNumber.length && initialNumber[0] === '-' || initialNumber[0] === '+') {\n                this.sign = initialNumber[0] === '+' ? 1 : -1;\n                initialNumber.shift(0);\n            }\n            for (index = initialNumber.length - 1; index >= 0; index--) {\n                if (!this.addDigit(initialNumber[index]))\n                    return;\n            }\n        } else {\n            initialNumber = initialNumber.toString();\n            if (initialNumber.charAt(0) === '-' || initialNumber.charAt(0) === '+') {\n                this.sign = initialNumber.charAt(0) === '+' ? 1 : -1;\n                initialNumber = initialNumber.substring(1);\n            }\n\n            for (index = initialNumber.length - 1; index >= 0; index--) {\n                if (!this.addDigit(parseInt(initialNumber.charAt(index), 10))) {\n                    return;\n                }\n            }\n        }\n    }\n\n    BigNumber.prototype.addDigit = function(digit) {\n        if (testDigit(digit)) {\n            this.number.push(digit);\n        } else {\n            this.number = errors['invalid'];\n            return false;\n        }\n\n        return this;\n    };\n\n    BigNumber.prototype.isEven = function() {\n        return this.number[0] % 2 === 0;\n    };\n\n    // returns:\n    //      null if this.number is not a number\n    //      0 if this.number === number\n    //      -1 if this.number < number\n    //      1 if this.number > number\n    BigNumber.prototype._compare = function(number) {\n        var bigNumber;\n        var index;\n\n        if (!isValidType(number)) {\n            return null;\n        }\n\n        bigNumber = BigNumber(number);\n\n        // If the numbers have different signs, then the positive\n        // number is greater\n        if (this.sign !== bigNumber.sign) {\n            return this.sign;\n        }\n\n        // Else, check the length\n        if (this.number.length > bigNumber.number.length) {\n            return this.sign;\n        } else if (this.number.length < bigNumber.number.length) {\n            return this.sign * (-1);\n        }\n\n        // If they have similar length, compare the numbers\n        // digit by digit\n        for (index = this.number.length - 1; index >= 0; index--) {\n            if (this.number[index] > bigNumber.number[index]) {\n                return this.sign;\n            } else if (this.number[index] < bigNumber.number[index]) {\n                return this.sign * (-1);\n            }\n        }\n\n        return 0;\n    };\n\n    // Greater than\n    BigNumber.prototype.gt = function(number) {\n        return this._compare(number) > 0;\n    };\n\n    // Greater than or equal\n    BigNumber.prototype.gte = function(number) {\n        return this._compare(number) >= 0;\n    };\n\n    // this.number equals n\n    BigNumber.prototype.equals = function(number) {\n        return this._compare(number) === 0;\n    };\n\n    // Less than or equal\n    BigNumber.prototype.lte = function(number) {\n        return this._compare(number) <= 0;\n    };\n\n    // Less than\n    BigNumber.prototype.lt = function(number) {\n        return this._compare(number) < 0;\n    };\n\n    // Addition\n    BigNumber.prototype.add = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        bigNumber = BigNumber(number);\n\n        if (this.sign !== bigNumber.sign) {\n            if (this.sign > 0) {\n                bigNumber.sign = 1;\n                return this.minus(bigNumber);\n            }\n            else {\n                this.sign = 1;\n                return bigNumber.minus(this);\n            }\n        }\n\n        this.number = BigNumber._add(this, bigNumber);\n        return this;\n    };\n\n    // Subtraction\n    BigNumber.prototype.subtract = function(number) {\n        var bigNumber;\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        bigNumber = BigNumber(number);\n\n        if (this.sign !== bigNumber.sign) {\n            this.number = BigNumber._add(this, bigNumber);\n            return this;\n        }\n\n        // If current number is lesser than the given bigNumber, the result will be negative\n        this.sign = (this.lt(bigNumber)) ? -1 : 1;\n        this.number = (abs(this).lt(abs(bigNumber)))\n            ? BigNumber._subtract(bigNumber, this)\n            : BigNumber._subtract(this, bigNumber);\n\n        return this;\n    };\n\n    // adds two positive BigNumbers\n    BigNumber._add = function(a, b) {\n        var index;\n        var remainder = 0;\n        var length = Math.max(a.number.length, b.number.length);\n\n        for (index = 0; index < length || remainder > 0; index++) {\n            a.number[index] = (remainder += (a.number[index] || 0) + (b.number[index] || 0)) % 10;\n            remainder = Math.floor(remainder / 10);\n        }\n\n        return a.number;\n    };\n\n    // a - b\n    // a and b are 2 positive BigNumbers and a > b\n    BigNumber._subtract = function(a, b) {\n        var index;\n        var remainder = 0;\n        var length = a.number.length;\n\n        for (index = 0; index < length; index++) {\n            a.number[index] -= (b.number[index] || 0) + remainder;\n            a.number[index] += (remainder = (a.number[index] < 0) ? 1 : 0) * 10;\n        }\n        // Count the zeroes which will be removed\n        index = 0;\n        length = a.number.length - 1;\n        while (a.number[length - index] === 0 && length - index > 0) {\n            index++;\n        }\n        if (index > 0) {\n            a.number.splice(-index);\n        }\n        return a.number;\n    };\n\n    // this.number * number\n    BigNumber.prototype.multiply = function(number) {\n        if (typeof number === 'undefined') {\n            return this;\n        }\n        var bigNumber = BigNumber(number);\n        var index;\n        var givenNumberIndex;\n        var remainder = 0;\n        var result = [];\n\n        if (this.isZero() || bigNumber.isZero()) {\n            return BigNumber(0);\n        }\n\n        this.sign *= bigNumber.sign;\n\n        // multiply the numbers\n        for (index = 0; index < this.number.length; index++) {\n            for (remainder = 0, givenNumberIndex = 0; givenNumberIndex < bigNumber.number.length || remainder > 0; givenNumberIndex++) {\n                result[index + givenNumberIndex] = (remainder += (result[index + givenNumberIndex] || 0) + this.number[index] * (bigNumber.number[givenNumberIndex] || 0)) % 10;\n                remainder = Math.floor(remainder / 10);\n            }\n        }\n\n        this.number = result;\n        return this;\n    };\n\n    // this.number / number\n    BigNumber.prototype.divide = function(number) {\n        if (typeof number === 'undefined') {\n            return this;\n        }\n\n        var bigNumber = BigNumber(number);\n        var index;\n        var length;\n        var result = [];\n        var rest = BigNumber(0);\n\n        // test if one of the numbers is zero\n        if (bigNumber.isZero()) {\n            this.number = errors['division by zero'];\n            return this;\n        } else if (this.isZero()) {\n            this.rest = BigNumber(0);\n            return this;\n        }\n\n        this.sign *= bigNumber.sign;\n        bigNumber.sign = 1;\n\n        // Skip division by 1\n        if (bigNumber.number.length === 1 && bigNumber.number[0] === 1) {\n            this.rest = BigNumber(0);\n            return this;\n        }\n\n        for (index = this.number.length - 1; index >= 0; index--) {\n            rest.multiply(10);\n            rest.number[0] = this.number[index];\n            result[index] = 0;\n            while (bigNumber.lte(rest)) {\n                result[index]++;\n                rest.subtract(bigNumber);\n            }\n        }\n\n        index = 0;\n        length = result.length - 1;\n        while (result[length - index] === 0 && length - index > 0) {\n            index++;\n        }\n        if (index > 0) {\n            result.splice(-index);\n        }\n\n        this.rest = rest;\n        this.number = result;\n        return this;\n    };\n\n    // this.number % number\n    BigNumber.prototype.mod = function(number) {\n        return this.divide(number).rest;\n    };\n\n    BigNumber.prototype.power = function(number) {\n        if (typeof number === 'undefined')\n            return;\n        var bigNumber;\n        var bigNumberPower;\n        // Convert the argument to a big number\n        if (!isValidType(number)) {\n            this.number = errors['invalid'];\n            return;\n        }\n        bigNumberPower = BigNumber(number);\n        if (bigNumberPower.isZero()) {\n            return BigNumber(1);\n        }\n        if (bigNumberPower.val() === '1') {\n            return this;\n        }\n\n        bigNumber = BigNumber(this);\n\n        this.number = [1];\n        while (bigNumberPower.gt(0)) {\n            if (!bigNumberPower.isEven()) {\n                this.multiply(bigNumber);\n                bigNumberPower.subtract(1);\n                continue;\n            }\n            bigNumber.multiply(bigNumber);\n            bigNumberPower.div(2);\n        }\n\n        return this;\n    };\n\n    // |this.number|\n    BigNumber.prototype.abs = function() {\n        this.sign = 1;\n        return this;\n    };\n\n    // Check if this.number is equal to 0\n    BigNumber.prototype.isZero = function() {\n        var index;\n        for (index = 0; index < this.number.length; index++) {\n            if (this.number[index] !== 0) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n\n    // this.number.toString()\n    BigNumber.prototype.toString = function() {\n        var index;\n        var str = '';\n        if (typeof this.number === 'string') {\n            return this.number;\n        }\n\n        for (index = this.number.length - 1; index >= 0; index--) {\n            str += this.number[index];\n        }\n\n        return (this.sign > 0) ? str : ('-' + str);\n    };\n\n    // Use shorcuts for functions names\n    BigNumber.prototype.plus = BigNumber.prototype.add;\n    BigNumber.prototype.minus = BigNumber.prototype.subtract;\n    BigNumber.prototype.div = BigNumber.prototype.divide;\n    BigNumber.prototype.mult = BigNumber.prototype.multiply;\n    BigNumber.prototype.pow = BigNumber.prototype.power;\n    BigNumber.prototype.val = BigNumber.prototype.toString;\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n        module.exports = BigNumber;\n    } else if (typeof window !== 'undefined') {\n        window.BigNumber = BigNumber;\n    }\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}