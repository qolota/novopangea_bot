{"ast":null,"code":"import _regeneratorRuntime from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _=require('lodash');var fetchBuildings=require(\"./fetchBuildings\");var SHIFT_TIME_MS=12*60*60*1000;var equalizeResources=require('../utils/equalizeResources');var fetchWorkerConfigs=require('./fetchWorkerConfigs');var sumResources=require('../utils/sumResources');var multiplyResources=require('../utils/multiplyResources');var BUILDINGS_TO_TOWNHALL=require('../consts/BUILDINGS_TO_TOWNHALL');var REST_BUILDINGS=['rest','creature'];var fetchAccountBuildings=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref){var accountName,_ref$cache,cache,now,buildings,workerConfigs,ownBuildingsWithoutWageSet,ownBuildingsExpiredRentSet,ownBuildingsExpiredExternalRentSet,ownStaleBuildings,sets,unskilledJobBuildings,unskilledRestBuildings;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:accountName=_ref.accountName,_ref$cache=_ref.cache,cache=_ref$cache===void 0?{}:_ref$cache;now=Date.now();_context.t0=cache.buildings;if(_context.t0){_context.next=7;break;}_context.next=6;return fetchBuildings({});case 6:_context.t0=_context.sent;case 7:buildings=_context.t0;_context.t1=cache.workerConfigs;if(_context.t1){_context.next=13;break;}_context.next=12;return fetchWorkerConfigs({});case 12:_context.t1=_context.sent;case 13:workerConfigs=_context.t1;ownBuildingsWithoutWageSet=_(buildings).filter(function(building){return building.owner===accountName;}).filter(function(building){return building.contractWage.waxCost===0;}).filter(function(building){return building.district.level>=BUILDINGS_TO_TOWNHALL[building.level];}).value();ownBuildingsExpiredRentSet=_(buildings).filter(function(building){return building.owner===accountName;}).filter(function(building){return building.land.owner===accountName;}).filter(function(building){return building.land.rentExpireTime-now<SHIFT_TIME_MS;}).filter(function(building){return building.numWorkers===0;}).filter(function(building){return building.district.level>=BUILDINGS_TO_TOWNHALL[building.level];}).value();ownBuildingsExpiredExternalRentSet=_(buildings).filter(function(building){return building.owner===accountName;}).filter(function(building){return building.land.owner!==accountName;}).filter(function(building){return building.land.rentExpireTime<now;}).filter(function(building){return building.district.level>=BUILDINGS_TO_TOWNHALL[building.level];}).filter(function(building){return building.numWorkers===0;}).value();ownStaleBuildings=_(buildings).filter(function(building){return building.owner===accountName;}).filter(function(building){return building.district.level<BUILDINGS_TO_TOWNHALL[building.level];}).filter(function(building){return building.numWorkers===0;}).value();sets=_(buildings).groupBy(function(building){return building.district.realm.name;}).map(function(buildings,realmName){return{realmName:realmName,buildings:_(_.range(1,6)).map(function(level){var workerConfig=workerConfigs.find(function(config){return config.level===level;});var leveledResourceBuildings=_(buildings).filter(function(building){return!REST_BUILDINGS.includes(building.config.resourceType);}).filter(function(building){return building.level>=level&&building.minWorkerLevel<=level;}).filter(function(building){return building.land.rentExpireTime-now>SHIFT_TIME_MS;}).filter(function(building){return building.contractWage.waxCost>0;}).filter(function(building){return building.numWorkers<building.config.workerCapacity;}).value();// job buildings\nvar externalJobsAvailable=_(leveledResourceBuildings).filter(function(building){return building.owner!==accountName;}).filter(function(building){return!building.isOnlyOwnWorkersAllowed;}).sortBy(function(building){return-building.contractWage.waxCost;}).groupBy(function(building){var targetWage=multiplyResources({resources:building.contractWage.costs,multiplier:workerConfig.wageMultiplier});var targetResources=sumResources({resources:multiplyResources({resources:[].concat(_toConsumableArray(workerConfig.shiftCost.costs),_toConsumableArray(targetWage)),multiplier:6})});var requestedResources=equalizeResources({targetResources:targetResources,currentResources:building.account.balances});return requestedResources.length===0?'enoughResources':'notEnoughResources';}).value();var ownJobsAvailable=_(leveledResourceBuildings).filter(function(building){return building.owner===accountName;}).filter(function(building){return-building.config.shiftYield.waxCost;}).value();var bestJobBuildings=_([].concat(_toConsumableArray(externalJobsAvailable.enoughResources||[]),_toConsumableArray(ownJobsAvailable))).map(function(building){if(building.owner===accountName){if(building.resourceType==='food'){return _objectSpread(_objectSpread({},building),{},{jobProfitObsd:1});}return _objectSpread(_objectSpread({},building),{},{jobProfitObsd:building.yieldsObsd[level-1]});}return _objectSpread(_objectSpread({},building),{},{jobProfitObsd:building.wagesObsd[level-1]});}).sortBy(function(building){return building.jobProfitObsd;}).value();// rest buildings\nvar restBuildings=_(buildings).filter(function(building){return building.config.resourceType==='rest';}).filter(function(building){return building.land.rentExpireTime-now>SHIFT_TIME_MS;}).filter(function(building){return building.numWorkers<building.config.workerCapacity;}).filter(function(building){return building.contractWage.waxCost>0;}).value();var externalRestAvailable=_(restBuildings).filter(function(building){return building.owner!==accountName;}).filter(function(building){return!building.isOnlyOwnWorkersAllowed;}).sortBy(function(building){return building.nRestPrice;}).groupBy(function(building){var requestedResources=equalizeResources({targetResources:multiplyResources({resources:building.config.shiftCost.costs,multiplier:6}),currentResources:building.account.balances});return requestedResources.length===0?'enoughResources':'notEnoughResources';}).value();var ownRestAvailable=_(restBuildings).filter(function(building){return building.owner===accountName;}).sortBy(function(building){return building.nOwnRestPrice;}).value();var bestRestBuildings=_([].concat(_toConsumableArray(externalRestAvailable.enoughResources||[]),_toConsumableArray(ownRestAvailable))).map(function(building){if(building.owner===accountName){return _objectSpread(_objectSpread({},building),{},{restCostObsd:building.ownRestsObsd[level-1]});}return _objectSpread(_objectSpread({},building),{},{restCostObsd:building.externalRestsObsd[level-1]});}).sortBy(function(building){return-building.restCostObsd;}).value();var bestUnskilledRestBuildings=_(bestRestBuildings).filter(function(building){if(building.owner===accountName){return building.level<3;}return true;}).sortBy(function(building){return-building.restCostObsd;}).value();return{// jobs\nexternalJobsAvailable:externalJobsAvailable.enoughResources||[],ownJobsAvailable:ownJobsAvailable,bestJobBuildings:bestJobBuildings,// rest\nexternalRestAvailable:externalRestAvailable.enoughResources||[],ownRestAvailable:ownRestAvailable,bestRestBuildings:bestRestBuildings,bestUnskilledRestBuildings:bestUnskilledRestBuildings,// not enough resources\nexternalJobsUnavailable:externalJobsAvailable.notEnoughResources||[],externalRestUnavailable:externalRestAvailable.notEnoughResources||[]};}).value()};}).value();unskilledJobBuildings=_(sets).map(function(realm){return realm.buildings[0].bestJobBuildings;}).flatten().filter(function(building){if(building.owner===accountName){return building.level<3;}return true;}).sortBy(function(building){return building.jobProfitObsd;}).value();unskilledRestBuildings=_(sets).map(function(realm){return realm.buildings[0].bestRestBuildings;}).flatten().filter(function(building){if(building.owner===accountName){return building.level<3;}return true;}).sortBy(function(building){return-building.restCostObsd;}).value();return _context.abrupt(\"return\",{buildings:sets,ownBuildingsWithoutWageSet:ownBuildingsWithoutWageSet,ownBuildingsExpiredRentSet:ownBuildingsExpiredRentSet,ownBuildingsExpiredExternalRentSet:ownBuildingsExpiredExternalRentSet,unskilledJobBuildings:unskilledJobBuildings,unskilledRestBuildings:unskilledRestBuildings,ownStaleBuildings:ownStaleBuildings});case 22:case\"end\":return _context.stop();}},_callee);}));return function fetchAccountBuildings(_x){return _ref2.apply(this,arguments);};}();module.exports=fetchAccountBuildings;","map":{"version":3,"names":["_","require","fetchBuildings","SHIFT_TIME_MS","equalizeResources","fetchWorkerConfigs","sumResources","multiplyResources","BUILDINGS_TO_TOWNHALL","REST_BUILDINGS","fetchAccountBuildings","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","accountName","_ref$cache","cache","now","buildings","workerConfigs","ownBuildingsWithoutWageSet","ownBuildingsExpiredRentSet","ownBuildingsExpiredExternalRentSet","ownStaleBuildings","sets","unskilledJobBuildings","unskilledRestBuildings","wrap","_callee$","_context","prev","next","Date","t0","sent","t1","filter","building","owner","contractWage","waxCost","district","level","value","land","rentExpireTime","numWorkers","groupBy","realm","name","map","realmName","range","workerConfig","find","config","leveledResourceBuildings","includes","resourceType","minWorkerLevel","workerCapacity","externalJobsAvailable","isOnlyOwnWorkersAllowed","sortBy","targetWage","resources","costs","multiplier","wageMultiplier","targetResources","concat","_toConsumableArray","shiftCost","requestedResources","currentResources","account","balances","length","ownJobsAvailable","shiftYield","bestJobBuildings","enoughResources","_objectSpread","jobProfitObsd","yieldsObsd","wagesObsd","restBuildings","externalRestAvailable","nRestPrice","ownRestAvailable","nOwnRestPrice","bestRestBuildings","restCostObsd","ownRestsObsd","externalRestsObsd","bestUnskilledRestBuildings","externalJobsUnavailable","notEnoughResources","externalRestUnavailable","flatten","abrupt","stop","_x","apply","arguments","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountBuildings.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchBuildings = require(\"./fetchBuildings\");\nconst SHIFT_TIME_MS = 12 * 60 * 60 * 1000;\nconst equalizeResources = require('../utils/equalizeResources');\nconst fetchWorkerConfigs = require('./fetchWorkerConfigs');\nconst sumResources = require('../utils/sumResources');\nconst multiplyResources = require('../utils/multiplyResources');\nconst BUILDINGS_TO_TOWNHALL = require('../consts/BUILDINGS_TO_TOWNHALL');\nconst REST_BUILDINGS = ['rest', 'creature'];\n\nconst fetchAccountBuildings = async ({\n    accountName,\n    cache = {},\n}) => {\n    const now = Date.now();\n    const buildings = cache.buildings || await fetchBuildings({});\n    const workerConfigs = cache.workerConfigs || await fetchWorkerConfigs({});\n    const ownBuildingsWithoutWageSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.contractWage.waxCost === 0)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .value();\n    const ownBuildingsExpiredRentSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.land.owner === accountName)\n        .filter(building => (building.land.rentExpireTime - now) < SHIFT_TIME_MS)\n        .filter(building => building.numWorkers === 0)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .value();\n    const ownBuildingsExpiredExternalRentSet = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.land.owner !== accountName)\n        .filter(building => building.land.rentExpireTime < now)\n        .filter(building => building.district.level >= BUILDINGS_TO_TOWNHALL[building.level])\n        .filter(building => building.numWorkers === 0)\n        .value();\n    const ownStaleBuildings = _(buildings)\n        .filter(building => building.owner === accountName)\n        .filter(building => building.district.level < BUILDINGS_TO_TOWNHALL[building.level])\n        .filter(building => building.numWorkers === 0)\n        .value();\n    const sets = _(buildings)\n        .groupBy(building => building.district.realm.name)\n        .map((buildings, realmName) => ({\n            realmName,\n            buildings: _(_.range(1, 6))\n                .map(level => {\n                    const workerConfig = workerConfigs.find(config => config.level === level);\n\n                    const leveledResourceBuildings = _(buildings)\n                        .filter(building => !REST_BUILDINGS.includes(building.config.resourceType))\n                        .filter(building => building.level >= level && building.minWorkerLevel <= level)\n                        .filter(building => (building.land.rentExpireTime - now) > SHIFT_TIME_MS)\n                        .filter(building => building.contractWage.waxCost > 0)\n                        .filter(building => building.numWorkers < building.config.workerCapacity)\n                        .value();\n                    \n                    // job buildings\n                    const externalJobsAvailable = _(leveledResourceBuildings)\n                        .filter(building => building.owner !== accountName)\n                        .filter(building => !building.isOnlyOwnWorkersAllowed)\n                        .sortBy(building => -building.contractWage.waxCost)\n                        .groupBy(building => {\n                            const targetWage = multiplyResources({\n                                resources: building.contractWage.costs,\n                                multiplier: workerConfig.wageMultiplier,\n                            });\n                            const targetResources = sumResources({\n                                resources: multiplyResources({\n                                    resources: [\n                                        ...workerConfig.shiftCost.costs,\n                                        ...targetWage,\n                                    ],\n                                    multiplier: 6,\n                                }),\n                            });\n                            \n                            const requestedResources = equalizeResources({\n                                targetResources,\n                                currentResources: building.account.balances,\n                            });\n                \n                            return requestedResources.length === 0\n                                ? 'enoughResources'\n                                : 'notEnoughResources';\n                        })\n                        .value();\n                    const ownJobsAvailable = _(leveledResourceBuildings)\n                        .filter(building => building.owner === accountName)\n                        .filter(building => -building.config.shiftYield.waxCost)\n                        .value();\n                    const bestJobBuildings = _([\n                        ...externalJobsAvailable.enoughResources || [],\n                        ...ownJobsAvailable,\n                    ])\n                        .map(building => {\n                            if (building.owner === accountName) {\n                                if (building.resourceType === 'food') {\n                                    return {\n                                        ...building,\n                                        jobProfitObsd: 1,\n                                    };\n                                }\n\n                                return {\n                                    ...building,\n                                    jobProfitObsd: building.yieldsObsd[level - 1],\n                                };\n                            }\n\n                            return {\n                                ...building,\n                                jobProfitObsd: building.wagesObsd[level - 1],\n                            };\n                        })\n                        .sortBy(building => building.jobProfitObsd)\n                        .value();\n\n                    // rest buildings\n                    const restBuildings = _(buildings)\n                        .filter(building => building.config.resourceType === 'rest')\n                        .filter(building => (building.land.rentExpireTime - now) > SHIFT_TIME_MS)\n                        .filter(building => building.numWorkers < building.config.workerCapacity)\n                        .filter(building => building.contractWage.waxCost > 0)\n                        .value();\n                    const externalRestAvailable = _(restBuildings)\n                        .filter(building => building.owner !== accountName)\n                        .filter(building => !building.isOnlyOwnWorkersAllowed)\n                        .sortBy(building => building.nRestPrice)\n                        .groupBy(building => {\n                            const requestedResources = equalizeResources({\n                                targetResources: multiplyResources({\n                                    resources: building.config.shiftCost.costs,\n                                    multiplier: 6,\n                                }),\n                                currentResources: building.account.balances,\n                            });\n\n                            return requestedResources.length === 0\n                                ? 'enoughResources'\n                                : 'notEnoughResources';\n                        })\n                        .value();\n                    const ownRestAvailable = _(restBuildings)\n                        .filter(building => building.owner === accountName)\n                        .sortBy(building => building.nOwnRestPrice)\n                        .value();\n                    const bestRestBuildings = _([\n                        ...externalRestAvailable.enoughResources || [],\n                        ...ownRestAvailable,\n                    ])\n                        .map(building => {\n                            if (building.owner === accountName) {\n                                return {\n                                    ...building,\n                                    restCostObsd: building.ownRestsObsd[level - 1],\n                                };\n                            }\n\n                            return {\n                                ...building,\n                                restCostObsd: building.externalRestsObsd[level - 1],\n                            };\n                        })\n                        .sortBy(building => -building.restCostObsd)\n                        .value();\n                    const bestUnskilledRestBuildings = _(bestRestBuildings)\n                        .filter(building => {\n                            if (building.owner === accountName) {\n                                return building.level < 3;\n                            }\n                \n                            return true;\n                        })\n                        .sortBy(building => -building.restCostObsd)\n                        .value();\n\n                    return {\n                        // jobs\n                        externalJobsAvailable: externalJobsAvailable.enoughResources || [],\n                        ownJobsAvailable,\n                        bestJobBuildings,\n\n                        // rest\n                        externalRestAvailable: externalRestAvailable.enoughResources || [],\n                        ownRestAvailable,\n                        bestRestBuildings,\n                        bestUnskilledRestBuildings,\n\n                        // not enough resources\n                        externalJobsUnavailable: externalJobsAvailable.notEnoughResources || [],\n                        externalRestUnavailable: externalRestAvailable.notEnoughResources || [],\n                    };\n                })\n                .value(),\n        }))\n        .value();\n    \n    const unskilledJobBuildings = _(sets)\n        .map(realm => realm.buildings[0].bestJobBuildings)\n        .flatten()\n        .filter(building => {\n            if (building.owner === accountName) {\n                return building.level < 3;\n            }\n\n            return true;\n        })\n        .sortBy(building => building.jobProfitObsd)\n        .value();\n    const unskilledRestBuildings = _(sets)\n        .map(realm => realm.buildings[0].bestRestBuildings)\n        .flatten()\n        .filter(building => {\n            if (building.owner === accountName) {\n                return building.level < 3;\n            }\n\n            return true;\n        })\n        .sortBy(building => -building.restCostObsd)\n        .value();\n\n    return {\n        buildings: sets,\n        ownBuildingsWithoutWageSet,\n        ownBuildingsExpiredRentSet,\n        ownBuildingsExpiredExternalRentSet,\n        unskilledJobBuildings,\n        unskilledRestBuildings,\n        ownStaleBuildings,\n    };\n};\n\nmodule.exports = fetchAccountBuildings;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}