{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Signature = void 0;\nvar BN = require(\"bn.js\");\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\nvar eosjs_key_conversions_1 = require(\"./eosjs-key-conversions\");\n/** Represents/stores a Signature and provides easy conversion for use with `elliptic` lib */\nvar Signature = /** @class */function () {\n  function Signature(signature, ec) {\n    this.signature = signature;\n    this.ec = ec;\n  }\n  /** Instantiate Signature from an EOSIO-format Signature */\n  Signature.fromString = function (sig, ec) {\n    var signature = eosjs_numeric_1.stringToSignature(sig);\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(signature.type);\n    }\n    return new Signature(signature, ec);\n  };\n  /** Instantiate Signature from an `elliptic`-format Signature */\n  Signature.fromElliptic = function (ellipticSig, keyType, ec) {\n    var r = ellipticSig.r.toArray('be', 32);\n    var s = ellipticSig.s.toArray('be', 32);\n    var eosioRecoveryParam;\n    if (keyType === eosjs_numeric_1.KeyType.k1 || keyType === eosjs_numeric_1.KeyType.r1) {\n      eosioRecoveryParam = ellipticSig.recoveryParam + 27;\n      if (ellipticSig.recoveryParam <= 3) {\n        eosioRecoveryParam += 4;\n      }\n    } else if (keyType === eosjs_numeric_1.KeyType.wa) {\n      eosioRecoveryParam = ellipticSig.recoveryParam;\n    }\n    var sigData = new Uint8Array([eosioRecoveryParam].concat(r, s));\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(keyType);\n    }\n    return new Signature({\n      type: keyType,\n      data: sigData\n    }, ec);\n  };\n  /** Export Signature as `elliptic`-format Signature\n   * NOTE: This isn't an actual elliptic-format Signature, as ec.Signature is not exported by the library.\n   * That's also why the return type is `any`.  We're *actually* returning an object with the 3 params\n   * not an ec.Signature.\n   * Further NOTE: @types/elliptic shows ec.Signature as exported; it is *not*.  Hence the `any`.\n   */\n  Signature.prototype.toElliptic = function () {\n    var lengthOfR = 32;\n    var lengthOfS = 32;\n    var r = new BN(this.signature.data.slice(1, lengthOfR + 1));\n    var s = new BN(this.signature.data.slice(lengthOfR + 1, lengthOfR + lengthOfS + 1));\n    var ellipticRecoveryBitField;\n    if (this.signature.type === eosjs_numeric_1.KeyType.k1 || this.signature.type === eosjs_numeric_1.KeyType.r1) {\n      ellipticRecoveryBitField = this.signature.data[0] - 27;\n      if (ellipticRecoveryBitField > 3) {\n        ellipticRecoveryBitField -= 4;\n      }\n    } else if (this.signature.type === eosjs_numeric_1.KeyType.wa) {\n      ellipticRecoveryBitField = this.signature.data[0];\n    }\n    var recoveryParam = ellipticRecoveryBitField & 3;\n    return {\n      r: r,\n      s: s,\n      recoveryParam: recoveryParam\n    };\n  };\n  /** Export Signature as EOSIO-format Signature */\n  Signature.prototype.toString = function () {\n    return eosjs_numeric_1.signatureToString(this.signature);\n  };\n  /** Export Signature in binary format */\n  Signature.prototype.toBinary = function () {\n    return this.signature.data;\n  };\n  /** Get key type from signature */\n  Signature.prototype.getType = function () {\n    return this.signature.type;\n  };\n  /** Verify a signature with a message or hashed message digest and public key */\n  Signature.prototype.verify = function (data, publicKey, shouldHash, encoding) {\n    if (shouldHash === void 0) {\n      shouldHash = true;\n    }\n    if (encoding === void 0) {\n      encoding = 'utf8';\n    }\n    if (shouldHash) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, encoding);\n      }\n      data = this.ec.hash().update(data).digest();\n    }\n    var ellipticSignature = this.toElliptic();\n    var ellipticPublicKey = publicKey.toElliptic();\n    return this.ec.verify(data, ellipticSignature, ellipticPublicKey, encoding);\n  };\n  /** Recover a public key from a message or hashed message digest and signature */\n  Signature.prototype.recover = function (data, shouldHash, encoding) {\n    if (shouldHash === void 0) {\n      shouldHash = true;\n    }\n    if (encoding === void 0) {\n      encoding = 'utf8';\n    }\n    if (shouldHash) {\n      if (typeof data === 'string') {\n        data = Buffer.from(data, encoding);\n      }\n      data = this.ec.hash().update(data).digest();\n    }\n    var ellipticSignature = this.toElliptic();\n    var recoveredPublicKey = this.ec.recoverPubKey(data, ellipticSignature, ellipticSignature.recoveryParam, encoding);\n    var ellipticKPub = this.ec.keyFromPublic(recoveredPublicKey);\n    return eosjs_key_conversions_1.PublicKey.fromElliptic(ellipticKPub, this.getType(), this.ec);\n  };\n  return Signature;\n}();\nexports.Signature = Signature;","map":{"version":3,"names":["BN","require","eosjs_numeric_1","eosjs_key_conversions_1","Signature","signature","ec","fromString","sig","stringToSignature","constructElliptic","type","fromElliptic","ellipticSig","keyType","r","toArray","s","eosioRecoveryParam","KeyType","k1","r1","recoveryParam","wa","sigData","Uint8Array","concat","data","prototype","toElliptic","lengthOfR","lengthOfS","slice","ellipticRecoveryBitField","toString","signatureToString","toBinary","getType","verify","publicKey","shouldHash","encoding","Buffer","from","hash","update","digest","ellipticSignature","ellipticPublicKey","recover","recoveredPublicKey","recoverPubKey","ellipticKPub","keyFromPublic","PublicKey","exports"],"sources":["../src/Signature.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}