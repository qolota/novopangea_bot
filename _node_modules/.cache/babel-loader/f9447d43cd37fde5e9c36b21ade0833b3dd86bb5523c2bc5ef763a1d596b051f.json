{"ast":null,"code":"const _ = require('lodash');\nconst PLANTS = require('../plants/configs/PLANTS');\nconst fetchAssets = require('../../atomicassets/api/fetchAssets');\nconst feedBeasts = require('./actions/feedBeasts');\nconst fetchBeasts = require('../battles/api/fetchBeasts');\nconst ACCOUNT_CAPABILITIES = require('../../configs/ACCOUNT_CAPABILITIES');\nconst fetchAccountAssetsWaxData = require('../../atomicassets/api/fetchAccountAssetsWaxData');\n\n// const FRUITS_LEFT_LIMIT = 30;\n\n// const fetchFruits = async ({accountName}) => {\n\n//     // let fruits = [];\n\n//     // for (let i = 0; i < PLANTS.length; i++) {\n//     //     const nextFrutis = await fetchAssets({\n//     //         params: {\n//     //           collection_name: 'beastgardens',\n//     //           template_id: PLANTS[i].fruitTemplateId,\n//     //           owner: accountName,\n//     //         },\n//     //     });\n\n//     //     fruits = [\n//     //         ...fruits,\n//     //         ...nextFrutis.slice(FRUITS_LEFT_LIMIT),\n//     //     ];\n//     // }\n\n//     return fruits;\n// };\n\nconst feedingCalcNextAction = async ({\n  accountName\n}) => {\n  const feedingBeastIds = ACCOUNT_CAPABILITIES[accountName].beastgarden_feeding_beasts_list;\n  const beasts = await fetchBeasts({\n    accountName\n  });\n  const availableBeasts = _(beasts).filter(beast => {\n    if (!beast.isAvailable) {\n      return false;\n    }\n    if (feedingBeastIds.find(id => id === Number(beast.id)) == null) {\n      return false;\n    }\n    return true;\n  }).value();\n  const feedingBeasts = _.sampleSize(availableBeasts, 4);\n  if (feedingBeasts.length === 0) {\n    return {\n      action: 'wait',\n      message: 'All feeding beasts resting now'\n    };\n  }\n  const {\n    fruits\n  } = await fetchAccountAssetsWaxData({\n    accountName,\n    assetParams: [{\n      key: 'fruits',\n      params: {\n        collectionName: 'beastgardens',\n        schemaName: 'fruits'\n      }\n    }]\n  });\n  const feedingFruits = _.sampleSize(fruits, feedingBeasts.length);\n  if (feedingFruits.length < feedingBeasts.length) {\n    return {\n      action: 'wait',\n      message: 'Not enough fruits'\n    };\n  }\n  return {\n    action: 'feed_beasts',\n    actions: feedBeasts({\n      accountName,\n      beastIds: _(feedingBeasts).map(b => b.id).value(),\n      fruitIds: _(feedingFruits).map(fruit => fruit.id).value()\n    })\n  };\n};\nmodule.exports = feedingCalcNextAction;","map":{"version":3,"names":["_","require","PLANTS","fetchAssets","feedBeasts","fetchBeasts","ACCOUNT_CAPABILITIES","fetchAccountAssetsWaxData","feedingCalcNextAction","accountName","feedingBeastIds","beastgarden_feeding_beasts_list","beasts","availableBeasts","filter","beast","isAvailable","find","id","Number","value","feedingBeasts","sampleSize","length","action","message","fruits","assetParams","key","params","collectionName","schemaName","feedingFruits","actions","beastIds","map","b","fruitIds","fruit","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/feeding/feedingCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst PLANTS = require('../plants/configs/PLANTS');\nconst fetchAssets = require('../../atomicassets/api/fetchAssets');\nconst feedBeasts = require('./actions/feedBeasts');\nconst fetchBeasts = require('../battles/api/fetchBeasts');\nconst ACCOUNT_CAPABILITIES = require('../../configs/ACCOUNT_CAPABILITIES');\nconst fetchAccountAssetsWaxData = require('../../atomicassets/api/fetchAccountAssetsWaxData');\n  \n// const FRUITS_LEFT_LIMIT = 30;\n\n// const fetchFruits = async ({accountName}) => {\n    \n\n//     // let fruits = [];\n\n//     // for (let i = 0; i < PLANTS.length; i++) {\n//     //     const nextFrutis = await fetchAssets({\n//     //         params: {\n//     //           collection_name: 'beastgardens',\n//     //           template_id: PLANTS[i].fruitTemplateId,\n//     //           owner: accountName,\n//     //         },\n//     //     });\n\n//     //     fruits = [\n//     //         ...fruits,\n//     //         ...nextFrutis.slice(FRUITS_LEFT_LIMIT),\n//     //     ];\n//     // }\n\n//     return fruits;\n// };\n\n\nconst feedingCalcNextAction = async ({accountName}) => {\n    const feedingBeastIds = ACCOUNT_CAPABILITIES[accountName].beastgarden_feeding_beasts_list;\n    const beasts = await fetchBeasts({\n        accountName,\n    });\n    const availableBeasts = _(beasts)\n        .filter(beast => {\n            if (!beast.isAvailable) {\n                return false;\n            }\n\n            if (feedingBeastIds.find(id => id === Number(beast.id)) == null) {\n                return false;\n            }\n\n            return true;\n        })\n        .value();\n    const feedingBeasts = _.sampleSize(availableBeasts, 4);\n    \n    if (feedingBeasts.length === 0) {\n        return {\n            action: 'wait',\n            message: 'All feeding beasts resting now',\n        };\n    }\n\n    const {\n        fruits,\n    } = await fetchAccountAssetsWaxData({\n        accountName,\n        assetParams: [\n            {\n                key: 'fruits',\n                params: {\n                    collectionName: 'beastgardens',\n                    schemaName: 'fruits',\n                },\n            },\n        ],\n    });\n    const feedingFruits = _.sampleSize(fruits, feedingBeasts.length);\n\n    if (feedingFruits.length < feedingBeasts.length) {\n        return {\n            action: 'wait',\n            message: 'Not enough fruits',\n        };\n    }\n\n    return {\n        action: 'feed_beasts',\n        actions: feedBeasts({\n            accountName,\n            beastIds: _(feedingBeasts)\n                .map(b => b.id)\n                .value(),\n            fruitIds: _(feedingFruits)\n                .map(fruit => fruit.id)\n                .value(),\n        }),\n    };\n\n};\n\nmodule.exports = feedingCalcNextAction;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,MAAM,GAAGD,OAAO,CAAC,0BAA0B,CAAC;AAClD,MAAME,WAAW,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AACjE,MAAMG,UAAU,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAClD,MAAMI,WAAW,GAAGJ,OAAO,CAAC,4BAA4B,CAAC;AACzD,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,oCAAoC,CAAC;AAC1E,MAAMM,yBAAyB,GAAGN,OAAO,CAAC,kDAAkD,CAAC;;AAE7F;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,MAAMO,qBAAqB,GAAG,MAAAA,CAAO;EAACC;AAAW,CAAC,KAAK;EACnD,MAAMC,eAAe,GAAGJ,oBAAoB,CAACG,WAAW,CAAC,CAACE,+BAA+B;EACzF,MAAMC,MAAM,GAAG,MAAMP,WAAW,CAAC;IAC7BI;EACJ,CAAC,CAAC;EACF,MAAMI,eAAe,GAAGb,CAAC,CAACY,MAAM,CAAC,CAC5BE,MAAM,CAACC,KAAK,IAAI;IACb,IAAI,CAACA,KAAK,CAACC,WAAW,EAAE;MACpB,OAAO,KAAK;IAChB;IAEA,IAAIN,eAAe,CAACO,IAAI,CAACC,EAAE,IAAIA,EAAE,KAAKC,MAAM,CAACJ,KAAK,CAACG,EAAE,CAAC,CAAC,IAAI,IAAI,EAAE;MAC7D,OAAO,KAAK;IAChB;IAEA,OAAO,IAAI;EACf,CAAC,CAAC,CACDE,KAAK,CAAC,CAAC;EACZ,MAAMC,aAAa,GAAGrB,CAAC,CAACsB,UAAU,CAACT,eAAe,EAAE,CAAC,CAAC;EAEtD,IAAIQ,aAAa,CAACE,MAAM,KAAK,CAAC,EAAE;IAC5B,OAAO;MACHC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACb,CAAC;EACL;EAEA,MAAM;IACFC;EACJ,CAAC,GAAG,MAAMnB,yBAAyB,CAAC;IAChCE,WAAW;IACXkB,WAAW,EAAE,CACT;MACIC,GAAG,EAAE,QAAQ;MACbC,MAAM,EAAE;QACJC,cAAc,EAAE,cAAc;QAC9BC,UAAU,EAAE;MAChB;IACJ,CAAC;EAET,CAAC,CAAC;EACF,MAAMC,aAAa,GAAGhC,CAAC,CAACsB,UAAU,CAACI,MAAM,EAAEL,aAAa,CAACE,MAAM,CAAC;EAEhE,IAAIS,aAAa,CAACT,MAAM,GAAGF,aAAa,CAACE,MAAM,EAAE;IAC7C,OAAO;MACHC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACb,CAAC;EACL;EAEA,OAAO;IACHD,MAAM,EAAE,aAAa;IACrBS,OAAO,EAAE7B,UAAU,CAAC;MAChBK,WAAW;MACXyB,QAAQ,EAAElC,CAAC,CAACqB,aAAa,CAAC,CACrBc,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAClB,EAAE,CAAC,CACdE,KAAK,CAAC,CAAC;MACZiB,QAAQ,EAAErC,CAAC,CAACgC,aAAa,CAAC,CACrBG,GAAG,CAACG,KAAK,IAAIA,KAAK,CAACpB,EAAE,CAAC,CACtBE,KAAK,CAAC;IACf,CAAC;EACL,CAAC;AAEL,CAAC;AAEDmB,MAAM,CAACC,OAAO,GAAGhC,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}