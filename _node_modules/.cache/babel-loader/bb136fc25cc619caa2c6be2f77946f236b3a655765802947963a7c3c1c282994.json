{"ast":null,"code":"const _ = require('lodash');\nconst fetchGrowthModifiers = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'hsettings',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const growthModifiers = _(data.rows).map(gm => ({\n    minGrowthProgress: Number(gm.min_process) / 100,\n    maxGrowthProgress: Number(gm.max_process) / 100,\n    growthModifier: Number(gm.power_percent_modifier)\n  })).value();\n  return growthModifiers;\n};\nmodule.exports = fetchGrowthModifiers;","map":{"version":3,"names":["_","require","fetchGrowthModifiers","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","growthModifiers","map","gm","minGrowthProgress","Number","min_process","maxGrowthProgress","max_process","growthModifier","power_percent_modifier","value","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchGrowthModifiers.js"],"sourcesContent":["const _ = require('lodash');\n\nconst fetchGrowthModifiers = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'hsettings',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n\n  const growthModifiers = _(data.rows)\n    .map((gm) => ({\n      minGrowthProgress: Number(gm.min_process) / 100,\n      maxGrowthProgress: Number(gm.max_process) / 100,\n      growthModifier: Number(gm.power_percent_modifier),\n    }))\n    .value();\n  return growthModifiers;\n};\n\nmodule.exports = fetchGrowthModifiers;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EACvC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC1EC,OAAO,EAAE;MACPC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,IAAI,EAAE,cAAc;MACpBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,cAAc;MACrBC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAIU,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,eAAe,GAAGzB,CAAC,CAACsB,IAAI,CAACC,IAAI,CAAC,CACjCG,GAAG,CAAEC,EAAE,KAAM;IACZC,iBAAiB,EAAEC,MAAM,CAACF,EAAE,CAACG,WAAW,CAAC,GAAG,GAAG;IAC/CC,iBAAiB,EAAEF,MAAM,CAACF,EAAE,CAACK,WAAW,CAAC,GAAG,GAAG;IAC/CC,cAAc,EAAEJ,MAAM,CAACF,EAAE,CAACO,sBAAsB;EAClD,CAAC,CAAC,CAAC,CACFC,KAAK,CAAC,CAAC;EACV,OAAOV,eAAe;AACxB,CAAC;AAEDW,MAAM,CAACC,OAAO,GAAGnC,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}