{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchWaxUsd = require('../../core/fetchWaxUsd');\nconst formatPrice = ({\n  price\n}) => {\n  const _price = Number(price.split(' ')[0]);\n  const currency = price.split(' ')[1];\n  return {\n    price: _price,\n    currency\n  };\n};\nconst convertToWaxPrice = ({\n  price,\n  currency,\n  waxUsdPrice\n}) => {\n  if (currency === 'USD') {\n    return price / waxUsdPrice;\n  }\n  if (currency == 'WAX') {\n    return price;\n  }\n  throw new Error(`convertToWaxPrice: ${currency} is not identified`);\n};\nconst fetchSalesWaxData = async ({\n  lowerBound\n}) => {\n  const waxUsdPrice = await fetchWaxUsd();\n  const sales = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.ATOMIC_MARKET,\n      scope: CONTRACTS.ATOMIC_MARKET,\n      table: 'sales',\n      lower_bound: lowerBound\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const {\n        price,\n        currency\n      } = formatPrice({\n        price: row.listing_price\n      });\n      return {\n        id: row.sale_id,\n        offerId: row.offer_id,\n        sellerAccountName: row.seller,\n        assetIds: row.asset_ids,\n        price,\n        currency,\n        waxPrice: convertToWaxPrice({\n          price,\n          currency,\n          waxUsdPrice\n        }),\n        settlementSymbol: row.settlement_symbol,\n        makerMarketplace: row.maker_marketplace,\n        collectionName: row.collection_name,\n        collectionFee: Number(row.collection_fee)\n      };\n    },\n    ignoreHttpErrorStatuses: [500],\n    customLowerBoundProcessor: ({\n      lowerBound\n    }) => {\n      console.log(Number(lowerBound), 1000);\n      return Number(lowerBound) + 1000;\n    }\n  });\n  if (sales.length === 0) {\n    return {\n      lowerBound,\n      sales\n    };\n  }\n  return {\n    lowerBound: sales[sales.length - 1].id,\n    sales\n  };\n};\nmodule.exports = fetchSalesWaxData;","map":{"version":3,"names":["_","require","CONTRACTS","fetchAllWaxData2","fetchWaxUsd","formatPrice","price","_price","Number","split","currency","convertToWaxPrice","waxUsdPrice","Error","fetchSalesWaxData","lowerBound","sales","params","code","ATOMIC_MARKET","scope","table","lower_bound","customProcessor","row","listing_price","id","sale_id","offerId","offer_id","sellerAccountName","seller","assetIds","asset_ids","waxPrice","settlementSymbol","settlement_symbol","makerMarketplace","maker_marketplace","collectionName","collection_name","collectionFee","collection_fee","ignoreHttpErrorStatuses","customLowerBoundProcessor","console","log","length","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/api/fetchSalesWaxData.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchWaxUsd = require('../../core/fetchWaxUsd');\n\nconst formatPrice = ({price}) => {\n    const _price = Number(price.split(' ')[0]);\n    const currency = price.split(' ')[1];\n\n    return {\n        price: _price,\n        currency,\n    };\n}\nconst convertToWaxPrice = ({\n    price,\n    currency,\n    waxUsdPrice,\n}) => {\n    if (currency === 'USD') {\n        return price / waxUsdPrice;\n    }\n\n    if (currency == 'WAX') {\n        return price;\n    }\n    \n    throw new Error(`convertToWaxPrice: ${currency} is not identified`);\n};\n\nconst fetchSalesWaxData = async ({\n    lowerBound,\n}) => {\n    const waxUsdPrice = await fetchWaxUsd();\n    const sales = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.ATOMIC_MARKET,\n            scope: CONTRACTS.ATOMIC_MARKET,\n            table: 'sales',\n            lower_bound: lowerBound,\n        },\n        customProcessor: ({row}) => {\n            const {\n                price,\n                currency,\n            } = formatPrice({\n                price: row.listing_price,\n            });\n\n            return {\n                id: row.sale_id,\n                offerId: row.offer_id,\n                sellerAccountName: row.seller,\n                assetIds: row.asset_ids,\n                price,\n                currency,\n                waxPrice: convertToWaxPrice({\n                    price,\n                    currency,\n                    waxUsdPrice,\n                }),\n                settlementSymbol: row.settlement_symbol,\n                makerMarketplace: row.maker_marketplace,\n                collectionName: row.collection_name,\n                collectionFee: Number(row.collection_fee),\n            };\n        },\n        ignoreHttpErrorStatuses: [500],\n        customLowerBoundProcessor: ({lowerBound}) => {\n            console.log(Number(lowerBound), 1000)\n            return Number(lowerBound) + 1000;\n        },\n    });\n\n    if (sales.length === 0) {\n        return {\n            lowerBound,\n            sales,\n        };\n    }\n\n    return {\n        lowerBound: sales[sales.length - 1].id,\n        sales,\n    };\n};\n\nmodule.exports = fetchSalesWaxData;"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,gBAAgB,GAAGF,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAMG,WAAW,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAErD,MAAMI,WAAW,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAC7B,MAAMC,MAAM,GAAGC,MAAM,CAACF,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMC,QAAQ,GAAGJ,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEpC,OAAO;IACHH,KAAK,EAAEC,MAAM;IACbG;EACJ,CAAC;AACL,CAAC;AACD,MAAMC,iBAAiB,GAAGA,CAAC;EACvBL,KAAK;EACLI,QAAQ;EACRE;AACJ,CAAC,KAAK;EACF,IAAIF,QAAQ,KAAK,KAAK,EAAE;IACpB,OAAOJ,KAAK,GAAGM,WAAW;EAC9B;EAEA,IAAIF,QAAQ,IAAI,KAAK,EAAE;IACnB,OAAOJ,KAAK;EAChB;EAEA,MAAM,IAAIO,KAAK,CAAE,sBAAqBH,QAAS,oBAAmB,CAAC;AACvE,CAAC;AAED,MAAMI,iBAAiB,GAAG,MAAAA,CAAO;EAC7BC;AACJ,CAAC,KAAK;EACF,MAAMH,WAAW,GAAG,MAAMR,WAAW,CAAC,CAAC;EACvC,MAAMY,KAAK,GAAG,MAAMb,gBAAgB,CAAC;IACjCc,MAAM,EAAE;MACJC,IAAI,EAAEhB,SAAS,CAACiB,aAAa;MAC7BC,KAAK,EAAElB,SAAS,CAACiB,aAAa;MAC9BE,KAAK,EAAE,OAAO;MACdC,WAAW,EAAEP;IACjB,CAAC;IACDQ,eAAe,EAAEA,CAAC;MAACC;IAAG,CAAC,KAAK;MACxB,MAAM;QACFlB,KAAK;QACLI;MACJ,CAAC,GAAGL,WAAW,CAAC;QACZC,KAAK,EAAEkB,GAAG,CAACC;MACf,CAAC,CAAC;MAEF,OAAO;QACHC,EAAE,EAAEF,GAAG,CAACG,OAAO;QACfC,OAAO,EAAEJ,GAAG,CAACK,QAAQ;QACrBC,iBAAiB,EAAEN,GAAG,CAACO,MAAM;QAC7BC,QAAQ,EAAER,GAAG,CAACS,SAAS;QACvB3B,KAAK;QACLI,QAAQ;QACRwB,QAAQ,EAAEvB,iBAAiB,CAAC;UACxBL,KAAK;UACLI,QAAQ;UACRE;QACJ,CAAC,CAAC;QACFuB,gBAAgB,EAAEX,GAAG,CAACY,iBAAiB;QACvCC,gBAAgB,EAAEb,GAAG,CAACc,iBAAiB;QACvCC,cAAc,EAAEf,GAAG,CAACgB,eAAe;QACnCC,aAAa,EAAEjC,MAAM,CAACgB,GAAG,CAACkB,cAAc;MAC5C,CAAC;IACL,CAAC;IACDC,uBAAuB,EAAE,CAAC,GAAG,CAAC;IAC9BC,yBAAyB,EAAEA,CAAC;MAAC7B;IAAU,CAAC,KAAK;MACzC8B,OAAO,CAACC,GAAG,CAACtC,MAAM,CAACO,UAAU,CAAC,EAAE,IAAI,CAAC;MACrC,OAAOP,MAAM,CAACO,UAAU,CAAC,GAAG,IAAI;IACpC;EACJ,CAAC,CAAC;EAEF,IAAIC,KAAK,CAAC+B,MAAM,KAAK,CAAC,EAAE;IACpB,OAAO;MACHhC,UAAU;MACVC;IACJ,CAAC;EACL;EAEA,OAAO;IACHD,UAAU,EAAEC,KAAK,CAACA,KAAK,CAAC+B,MAAM,GAAG,CAAC,CAAC,CAACrB,EAAE;IACtCV;EACJ,CAAC;AACL,CAAC;AAEDgC,MAAM,CAACC,OAAO,GAAGnC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}