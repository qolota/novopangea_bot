{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchCollectionsWaxData = require('./fetchCollectionsWaxData');\nconst deserializeData = require('../utils/deserializeData');\nconst CORE_ATOMICHUB_PARAMS = require('../consts/CORE_ATOMICHUB_PARAMS');\nconst firstMintAssetIds = require('../data/mint-1-asset-ids-1686139302999.json');\nconst getCollectionNames = ({\n  assets,\n  params\n}) => {\n  const coreParams = _.pick(params, CORE_ATOMICHUB_PARAMS);\n  return _(assets).filter(asset => _.isMatch(asset.params, coreParams)).map(asset => asset.collectionName).uniq().value();\n};\n\n// asset params\n// {\n//   key,\n//   params,\n//   customProcessor = () => {},\n// }\nconst fetchAccountAssetsWaxData = async ({\n  accountName,\n  assetParams = []\n}) => {\n  let assets = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.ATOMIC_ASSETS,\n      scope: accountName,\n      table: 'assets'\n    },\n    customProcessor: ({\n      row\n    }) => {\n      return {\n        id: row.asset_id,\n        collectionName: row.collection_name,\n        schemaName: row.schema_name,\n        templateId: row.template_id,\n        ramPayer: row.ram_payer,\n        backedTokens: _(row.backed_tokens).map(row => {\n          const [value, symbol] = row.split(' ');\n          return {\n            value: Number(value),\n            symbol\n          };\n        }).value(),\n        immutableSerializedData: row.immutable_serialized_data,\n        mutableSerializedData: row.mutable_serialized_data,\n        params: {\n          collectionName: row.collection_name,\n          schemaName: row.schema_name,\n          templateId: row.template_id\n        }\n      };\n    }\n  });\n  const collectionNames = _(assetParams).map(assetParams => getCollectionNames({\n    assets,\n    params: assetParams.params\n  })).flatten().uniq().value();\n  console.log(collectionNames);\n  let collections = [];\n  for (let i = 0; i < collectionNames.length; i++) {\n    const nextCollections = await fetchCollectionsWaxData({\n      collectionName: collectionNames[i]\n    });\n    collections = [...collections, ...nextCollections];\n  }\n  const assetGroups = _(assetParams).map(assetParams => {\n    const coreParams = _.pick(assetParams.params, CORE_ATOMICHUB_PARAMS);\n    const otherParams = _.omit(assetParams.params, CORE_ATOMICHUB_PARAMS);\n    const customProcessor = assetParams.customProcessor || (() => {});\n    const _assets = _(assets).filter(asset => _.isMatch(asset.params, coreParams)).map(asset => {\n      const collection = collections.find(collection => collection.collectionName === asset.collectionName);\n      const template = collection.templates.find(template => template.id === asset.templateId);\n      const schema = collection.schemas.find(schema => schema.schemaName === asset.schemaName);\n      const templateImmutableData = deserializeData({\n        schema: schema.templateSchema,\n        serializedData: asset.immutableSerializedData\n      });\n      const assetImmutableData = template.immutableData;\n      const assetMutableData = deserializeData({\n        schema: schema.templateSchema,\n        serializedData: asset.mutableSerializedData\n      });\n      return {\n        ..._.omit(asset, ['immutableSerializedData', 'mutableSerializedData']),\n        template,\n        schema,\n        collection: _.omit(collection, ['templates', 'schemas']),\n        templateImmutableData,\n        assetImmutableData,\n        assetMutableData,\n        params: {\n          ...templateImmutableData,\n          ...assetImmutableData,\n          ...assetMutableData,\n          ...asset.params\n        }\n      };\n    }).filter(asset => _.isMatch(asset.params, otherParams)).map(asset => {\n      return {\n        id: asset.id,\n        mintId: firstMintAssetIds.includes(asset.id) ? 1 : null,\n        owner: accountName,\n        collectionName: asset.collectionName,\n        schemaName: asset.schemaName,\n        templateId: asset.templateId,\n        isBurned: false,\n        name: asset.template.immutableData.name,\n        ...customProcessor({\n          asset\n        })\n      };\n    }).value();\n    return {\n      key: assetParams.key,\n      assets: _assets,\n      params: assetParams.params\n    };\n  }).reduce((assetGroups, assetGroup) => {\n    assetGroups[assetGroup.key] = assetGroup.assets;\n    return assetGroups;\n  }, {});\n  return assetGroups;\n};\nmodule.exports = fetchAccountAssetsWaxData;","map":{"version":3,"names":["_","require","CONTRACTS","fetchAllWaxData2","fetchCollectionsWaxData","deserializeData","CORE_ATOMICHUB_PARAMS","firstMintAssetIds","getCollectionNames","assets","params","coreParams","pick","filter","asset","isMatch","map","collectionName","uniq","value","fetchAccountAssetsWaxData","accountName","assetParams","code","ATOMIC_ASSETS","scope","table","customProcessor","row","id","asset_id","collection_name","schemaName","schema_name","templateId","template_id","ramPayer","ram_payer","backedTokens","backed_tokens","symbol","split","Number","immutableSerializedData","immutable_serialized_data","mutableSerializedData","mutable_serialized_data","collectionNames","flatten","console","log","collections","i","length","nextCollections","assetGroups","otherParams","omit","_assets","collection","find","template","templates","schema","schemas","templateImmutableData","templateSchema","serializedData","assetImmutableData","immutableData","assetMutableData","mintId","includes","owner","isBurned","name","key","reduce","assetGroup","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/api/fetchAccountAssetsWaxData.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst fetchCollectionsWaxData = require('./fetchCollectionsWaxData');\nconst deserializeData = require('../utils/deserializeData');\nconst CORE_ATOMICHUB_PARAMS  = require('../consts/CORE_ATOMICHUB_PARAMS')\nconst firstMintAssetIds = require('../data/mint-1-asset-ids-1686139302999.json');\n\nconst getCollectionNames = ({\n    assets,\n    params,\n}) => {\n    const coreParams = _.pick(params, CORE_ATOMICHUB_PARAMS);\n\n    return _(assets)\n        .filter(asset => _.isMatch(asset.params, coreParams))\n        .map(asset => asset.collectionName)\n        .uniq()\n        .value();\n};\n\n// asset params\n// {\n//   key,\n//   params,\n//   customProcessor = () => {},\n// }\nconst fetchAccountAssetsWaxData = async ({\n    accountName,\n    assetParams = [],\n}) => {\n    let assets = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.ATOMIC_ASSETS,\n            scope: accountName,\n            table: 'assets',\n        },\n        customProcessor: ({row}) => {\n            return {\n                id: row.asset_id,\n                collectionName: row.collection_name,\n                schemaName: row.schema_name,\n                templateId: row.template_id,\n                ramPayer: row.ram_payer,\n                backedTokens: _(row.backed_tokens)\n                    .map(row => {\n                        const [\n                            value,\n                            symbol,\n                        ] = row.split(' ');\n\n                        return {\n                            value: Number(value),\n                            symbol,\n                        };\n                    })\n                    .value(),\n                immutableSerializedData: row.immutable_serialized_data,\n                mutableSerializedData: row.mutable_serialized_data,\n                params: {\n                    collectionName: row.collection_name,\n                    schemaName: row.schema_name,\n                    templateId: row.template_id,\n                },\n            };\n        },\n    });\n        \n    const collectionNames = _(assetParams)\n        .map(assetParams => getCollectionNames({\n            assets,\n            params: assetParams.params,\n        }))\n        .flatten()\n        .uniq()\n        .value();\n\n    console.log(collectionNames);\n    let collections = [];\n\n    for (let i = 0; i < collectionNames.length; i++) {\n        const nextCollections = await fetchCollectionsWaxData({\n            collectionName: collectionNames[i],\n        });\n        collections = [\n            ...collections,\n            ...nextCollections,\n        ];\n    }\n\n    const assetGroups = _(assetParams)\n        .map(assetParams => {\n            const coreParams = _.pick(assetParams.params, CORE_ATOMICHUB_PARAMS);\n            const otherParams = _.omit(assetParams.params, CORE_ATOMICHUB_PARAMS);\n            const customProcessor = assetParams.customProcessor || (() => {});\n\n            const _assets = _(assets)\n                .filter(asset => _.isMatch(asset.params, coreParams))\n                .map(asset => {\n                    const collection = collections\n                        .find(collection => collection.collectionName === asset.collectionName);\n                    const template = collection.templates\n                        .find(template => template.id === asset.templateId);\n                    const schema = collection.schemas\n                        .find(schema => schema.schemaName === asset.schemaName);\n                    const templateImmutableData = deserializeData({\n                        schema: schema.templateSchema,\n                        serializedData: asset.immutableSerializedData,\n                    });\n                    const assetImmutableData = template.immutableData;\n                    const assetMutableData = deserializeData({\n                        schema: schema.templateSchema,\n                        serializedData: asset.mutableSerializedData,\n                    });\n        \n                    return {\n                        ..._.omit(asset, [\n                            'immutableSerializedData',\n                            'mutableSerializedData',\n                        ]),\n                        template,\n                        schema,\n                        collection: _.omit(collection, [\n                            'templates',\n                            'schemas',\n                        ]),\n                        templateImmutableData,\n                        assetImmutableData,\n                        assetMutableData,\n                        params: {\n                            ...templateImmutableData,\n                            ...assetImmutableData,\n                            ...assetMutableData,\n                            ...asset.params,\n                        },\n                    };\n                })\n                .filter(asset => _.isMatch(asset.params, otherParams))\n                .map((asset) => {\n                    return {\n                        id: asset.id,\n                        mintId: firstMintAssetIds.includes(asset.id)\n                            ? 1\n                            : null,\n                        owner: accountName,\n                        collectionName: asset.collectionName,\n                        schemaName: asset.schemaName,\n                        templateId: asset.templateId,\n                        isBurned: false,\n                        name: asset.template.immutableData.name,\n                        ...customProcessor({\n                            asset,\n                        }),\n                    };\n                })\n                .value();\n\n            return {\n                key: assetParams.key,\n                assets: _assets,\n                params: assetParams.params,\n            };\n        })\n        .reduce((assetGroups, assetGroup) => {\n            assetGroups[assetGroup.key] = assetGroup.assets;\n\n            return assetGroups;\n        }, {});\n    \n    return assetGroups;\n};\n\nmodule.exports = fetchAccountAssetsWaxData;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}