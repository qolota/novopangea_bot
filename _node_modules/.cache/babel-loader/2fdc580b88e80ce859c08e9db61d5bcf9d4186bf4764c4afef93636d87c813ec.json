{"ast":null,"code":"const _ = require('lodash');\nconst fetchPlantsPerSeasons = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'pseasons',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const plantsPerSeasons = _(data.rows).map(ps => ({\n    claimPower: Number(ps.claim_power),\n    dailyPool: ps.daily_pool,\n    plantId: ps.plant_id,\n    seasonId: ps.season_id\n  })).value();\n  return plantsPerSeasons;\n};\nmodule.exports = fetchPlantsPerSeasons;","map":{"version":3,"names":["_","require","fetchPlantsPerSeasons","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","plantsPerSeasons","map","ps","claimPower","Number","claim_power","dailyPool","daily_pool","plantId","plant_id","seasonId","season_id","value","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchPlantsPerSeasons.js"],"sourcesContent":["const _ = require('lodash');\n\nconst fetchPlantsPerSeasons = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'pseasons',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n\n  const plantsPerSeasons = _(data.rows)\n    .map((ps) => ({\n      claimPower: Number(ps.claim_power),\n      dailyPool: ps.daily_pool,\n      plantId: ps.plant_id,\n      seasonId: ps.season_id,\n    }))\n    .value();\n  return plantsPerSeasons;\n};\n\nmodule.exports = fetchPlantsPerSeasons;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAMC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC1EC,OAAO,EAAE;MACPC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,IAAI,EAAE,cAAc;MACpBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,cAAc;MACrBC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE,UAAU;MACjBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAIU,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,gBAAgB,GAAGzB,CAAC,CAACsB,IAAI,CAACC,IAAI,CAAC,CAClCG,GAAG,CAAEC,EAAE,KAAM;IACZC,UAAU,EAAEC,MAAM,CAACF,EAAE,CAACG,WAAW,CAAC;IAClCC,SAAS,EAAEJ,EAAE,CAACK,UAAU;IACxBC,OAAO,EAAEN,EAAE,CAACO,QAAQ;IACpBC,QAAQ,EAAER,EAAE,CAACS;EACf,CAAC,CAAC,CAAC,CACFC,KAAK,CAAC,CAAC;EACV,OAAOZ,gBAAgB;AACzB,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGrC,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}