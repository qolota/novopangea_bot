{"ast":null,"code":"const _ = require('lodash');\nconst setBuildWage = require('./actions/setBuildWage');\nconst wakeupWorkers = require('./actions/wakeupWorkers');\nconst multiplyResources = require('./utils/multiplyResources');\nconst sumResources = require('./utils/sumResources');\nconst exchangeTokens = require('./actions/exchangeTokens');\nconst equalizeResources = require('./utils/equalizeResources');\nconst getExchangeRate = require('./utils/getExchangeRate');\nconst RESOURCES = require('./consts/RESOURSES');\nconst MIN_TRANSACTION_VALUE = require('./consts/MIN_TRANSACTION_VALUE');\nconst EXCHANGE_STRATEGY = require('./consts/EXCHANGE_STRATEGY');\nconst findResource = require('./utils/findResource');\nconst startShift = require('./actions/startShift');\nconst {\n  default: log\n} = require('../utils/log');\nconst renewRent = require('./actions/renewRent');\nconst feedOneWorker = require('./actions/feedOneWorker');\nconst stakeBuilding = require('./actions/stakeBuilding');\nconst fetchAllGameDat = require('./api/fetchAllGameData');\nconst removeBuilding = require('./actions/removeBuilding');\nconst setLandRent = require('./actions/setLandRent');\nconst startUpgrade = require('./actions/startUpgrade');\nconst finishUpgrade = require('./actions/finishUpgrade');\nconst exchangeResources = require('./utils/exchangeResources');\nconst findBuildings = ({\n  buildings,\n  realmName,\n  level,\n  buildingSetName\n}) => {\n  return buildings.find(b => b.realmName === realmName).buildings[level - 1][buildingSetName];\n};\nconst findLands = ({\n  lands,\n  realmName,\n  landSetName\n}) => {\n  return lands.find(land => land.realmName === realmName)[landSetName];\n};\nconst MAX_LAND_RENT_PRICE_OBSD = 0.00000331;\nconst MIN_RENT_BUILDING_LEVELS = {\n  rest: 3,\n  materials: 4,\n  food: 4,\n  energy: 4\n};\nconst JOB_MIN_PROFITS_OBSD = [2, 4.39400, 6.59100, 7.69000, 8.72000];\nconst REST_MAX_COST_OBSD = [1.1, 1.510, 1.873, 2.055, 2.237];\n\n// -------------------------------------------------------- //\n// ---------               BALANCE               ---------- //\n// -------------------------------------------------------- //\nconst MAX_OBSD_BALANCE = 20;\nconst getNextStateAfterTransferExcessObsdToNovo = ({\n  prevState,\n  accountName\n}) => {\n  const obsdBalance = findResource({\n    resources: prevState.resources,\n    symbol: RESOURCES.OBSD\n  });\n  if (obsdBalance.value <= MAX_OBSD_BALANCE) {\n    return;\n  }\n  const excessObsResource = {\n    value: _.floor((obsdBalance.value - MAX_OBSD_BALANCE + 3) / MIN_TRANSACTION_VALUE.NOVO) * MIN_TRANSACTION_VALUE.NOVO,\n    symbol: RESOURCES.OBSD\n  };\n  return {\n    action: 'exchange',\n    actions: [exchangeTokens({\n      accountName,\n      valueFrom: excessObsResource.value,\n      symbolFrom: excessObsResource.symbol,\n      symbolTo: RESOURCES.NOVO\n    })],\n    resources: sumResources({\n      resources: [...prevState.resources, {\n        value: -excessObsResource.value,\n        symbol: excessObsResource.symbol\n      }]\n    }),\n    availableWorkers: _.cloneDeep(prevState.availableWorkers),\n    availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    availableLands: _.cloneDeep(prevState.availableLands),\n    settings: _.cloneDeep(prevState.settings)\n  };\n};\nconst getNextStateAfterTransferAllResourecesToObsd = ({\n  prevState,\n  exchange,\n  accountName\n}) => {\n  const restBalances = _([RESOURCES.NOVOE, RESOURCES.NOVOM, RESOURCES.NOVOF]).map(symbol => findResource({\n    resources: prevState.resources,\n    symbol\n  })).value();\n  const hasRestResources = _.some(restBalances, b => {\n    return b.value >= MIN_TRANSACTION_VALUE[b.symbol];\n  });\n  if (!hasRestResources) {\n    return;\n  }\n\n  // convert all resources to OBSD\n  const exchangeRestResources = getExchangeRate({\n    exchange,\n    resources: _(restBalances).map(b => ({\n      value: _.floor(b.value / MIN_TRANSACTION_VALUE[b.symbol]) * MIN_TRANSACTION_VALUE[b.symbol],\n      symbol: b.symbol\n    })).filter(b => b.value > 0).value(),\n    exchangeStrategy: EXCHANGE_STRATEGY\n  });\n  const exchangedObsdBalance = sumResources({\n    resources: _(exchangeRestResources).map(r => ({\n      value: r.valueFrom,\n      symbol: r.symbolFrom\n    })).value()\n  });\n  return {\n    action: 'exchange',\n    actions: _(exchangeRestResources).map(b => exchangeTokens({\n      accountName,\n      valueFrom: b.valueTo,\n      symbolFrom: b.symbolTo,\n      symbolTo: b.symbolFrom\n    })).value(),\n    resources: sumResources({\n      resources: [...prevState.resources, ...exchangedObsdBalance, ..._(exchangeRestResources).map(b => ({\n        value: -b.valueTo,\n        symbol: b.symbolTo\n      })).value()]\n    }),\n    availableWorkers: _.cloneDeep(prevState.availableWorkers),\n    availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    availableLands: _.cloneDeep(prevState.availableLands),\n    settings: _.cloneDeep(prevState.settings)\n  };\n};\n\n// -------------------------------------------------------- //\n// ---------                JOB                  ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterOwnShiftStart = ({\n  prevState,\n  accountName,\n  exchange,\n  building,\n  worker,\n  account\n}) => {\n  const totalYield = multiplyResources({\n    resources: building.shiftYield.costs,\n    multiplier: worker.config.yieldMultiplier\n  });\n  const nextState = exchangeResources({\n    accountName,\n    exchange,\n    balances: prevState.resources,\n    maxBalances: account.maxBalances,\n    requestedResources: worker.config.shiftCost.costs\n  });\n  if (nextState.action === 'stop') {\n    return nextState;\n  }\n  return {\n    action: 'start_own_shift',\n    actions: [...nextState.actions, startShift({\n      accountName,\n      assetId: worker.assetId,\n      realmId: building.realmId,\n      districtId: building.districtId,\n      buildingId: building.id\n    })],\n    resources: sumResources({\n      resources: [...nextState.nextBalances, ...totalYield]\n    }),\n    availableWorkers: _.cloneDeep(prevState.availableWorkers),\n    availableBuildings: _.cloneDeep(prevState.availableBuildings)\n  };\n};\nconst getNextStateAfterExternalShiftStart = ({\n  prevState,\n  accountName,\n  building,\n  worker,\n  account // TODO validate max storage capacity\n}) => {\n  return {\n    action: 'start_external_shift',\n    actions: [startShift({\n      accountName,\n      assetId: worker.assetId,\n      realmId: building.realmId,\n      districtId: building.districtId,\n      buildingId: building.id\n    })],\n    resources: sumResources({\n      resources: [...prevState.resources,\n      // total shift wage\n      ...multiplyResources({\n        resources: building.contractWage.costs,\n        multiplier: worker.config.wageMultiplier\n      })]\n    }),\n    availableWorkers: _.cloneDeep(prevState.availableWorkers),\n    availableBuildings: _.cloneDeep(prevState.availableBuildings)\n  };\n};\nconst getNextStateAfterShiftStart = ({\n  prevState,\n  accountName,\n  exchange,\n  account\n}) => {\n  if (prevState.availableWorkers.length === 0) {\n    return;\n  }\n  if (prevState.availableBuildings.length === 0) {\n    return;\n  }\n\n  // find a suitable building for a next worker\n  const _prevState = _.cloneDeep(prevState);\n  const worker = _prevState.availableWorkers.pop();\n  const building = _prevState.availableBuildings.pop();\n  building.numWorkers++;\n  if (building.numWorkers < building.maxWorkers) {\n    _prevState.availableBuildings.push(building);\n  }\n  if (building.isOwnBuilding) {\n    return getNextStateAfterOwnShiftStart({\n      prevState: _prevState,\n      accountName,\n      exchange,\n      building,\n      worker,\n      account\n    });\n  }\n  return getNextStateAfterExternalShiftStart({\n    prevState: _prevState,\n    accountName,\n    building,\n    worker,\n    account\n  });\n};\nconst _prepShiftBuildings = ({\n  accountName,\n  buildings,\n  level\n}) => {\n  return _(buildings).map(building => ({\n    id: building.id,\n    realmId: building.district.realm.id,\n    districtId: building.district.id,\n    isOwnBuilding: building.owner === accountName,\n    numWorkers: building.numWorkers,\n    maxWorkers: building.config.workerCapacity,\n    // wage fields for both own and external jobs\n    jobProfitObsd: building.jobProfitObsd,\n    contractWage: building.contractWage,\n    shiftYield: building.config.shiftYield\n  })).filter(building => building.jobProfitObsd > JOB_MIN_PROFITS_OBSD[level - 1]).sortBy(building => building.jobProfitObsd).value();\n};\nconst _getStartMixedShiftAction = ({\n  accountName,\n  exchange,\n  account,\n  gameSettings,\n  realm,\n  actionName\n}) => {\n  const states = [{\n    action: 'init',\n    resources: account.balances,\n    availableWorkers: _.cloneDeep(realm.availableWorkers),\n    availableBuildings: _.cloneDeep(realm.availableBuildings)\n  }];\n  while (true) {\n    const prevState = states[states.length - 1];\n    if (prevState.availableWorkers.length === 0) {\n      break;\n    }\n    if (prevState.availableBuildings.length === 0) {\n      break;\n    }\n    const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n      prevState,\n      accountName\n    });\n    if (nextStateTransferExcessObsdToNovo != null) {\n      states.push(nextStateTransferExcessObsdToNovo);\n      continue;\n    }\n    const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n      prevState,\n      exchange,\n      accountName\n    });\n    if (nextStateAfterTransferAllResourecesToObsd != null) {\n      states.push(nextStateAfterTransferAllResourecesToObsd);\n      continue;\n    }\n    const nextStateAfterShiftStart = getNextStateAfterShiftStart({\n      prevState,\n      accountName,\n      exchange,\n      account\n    });\n    if (nextStateAfterShiftStart != null) {\n      if (nextStateAfterShiftStart.action === 'stop') {\n        log({\n          project: gameSettings.name,\n          message: nextStateAfterShiftStart.action.message\n        });\n        break;\n      }\n      states.push(nextStateAfterShiftStart);\n    }\n  }\n  const actions = _(states).map(state => state.actions).compact().flatten().value();\n  if (actions.length === 0) {\n    return;\n  }\n  return {\n    action: actionName,\n    isMultipleTransactions: true,\n    actions: _.chunk(actions, 16)\n  };\n};\nconst getStartMixedShiftAction = ({\n  accountName,\n  exchange,\n  account,\n  buildings,\n  workers,\n  gameSettings\n}) => {\n  if (workers.length === 0) {\n    return;\n  }\n  const realms = _(workers).groupBy(worker => worker.level).map((workers, level) => {\n    const _level = Number(level);\n    return _(workers).groupBy(worker => worker.realmName).map((workers, realmName) => ({\n      realmName,\n      level: _level,\n      availableWorkers: workers,\n      availableBuildings: _prepShiftBuildings({\n        accountName,\n        buildings: findBuildings({\n          buildings,\n          realmName,\n          level: _level,\n          buildingSetName: 'bestJobBuildings'\n        }),\n        level: _level\n      })\n    })).value();\n  }).flatten().sortBy(realm => -realm.level).value();\n\n  // processing one realm at once\n  const realm = realms.find(realm => realm.availableBuildings.length > 0);\n  if (realm == null) {\n    log({\n      project: gameSettings.name,\n      message: `[SKILLED] No available job buildings but ${workers.length} available workers`\n    });\n    return null;\n  }\n  return _getStartMixedShiftAction({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName: 'start_mixed_shifts'\n  });\n};\nconst getStartMixedUnskilledShiftAction = ({\n  accountName,\n  exchange,\n  account,\n  buildings,\n  workers,\n  gameSettings\n}) => {\n  if (workers.length === 0) {\n    return;\n  }\n  const realm = {\n    availableWorkers: workers,\n    availableBuildings: _prepShiftBuildings({\n      accountName,\n      buildings,\n      level: 1\n    })\n  };\n  // console.log(`[UNSKILLED] Job buildings: `, realm);\n\n  return _getStartMixedShiftAction({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName: 'start_mixed_unskilled_shifts'\n  });\n};\n\n// -------------------------------------------------------- //\n// ---------                REST                 ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterRestStart = ({\n  prevState,\n  accountName,\n  exchange,\n  account\n}) => {\n  if (prevState.availableWorkers.length === 0) {\n    return;\n  }\n  if (prevState.availableBuildings.length === 0) {\n    return;\n  }\n\n  // find a suitable building for a next worker\n  const availableWorkers = _.cloneDeep(prevState.availableWorkers);\n  const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n  const worker = availableWorkers.pop();\n  const building = availableBuildings.pop();\n  building.numWorkers++;\n  if (building.numWorkers < building.maxWorkers) {\n    availableBuildings.push(building);\n  }\n\n  // calculate total cost depends on rest building ownership\n  let totalCosts;\n  if (building.isOwnBuilding) {\n    totalCosts = sumResources({\n      resources: [...building.shiftCost.costs, ...worker.config.foodCost.costs]\n    });\n  } else {\n    totalCosts = sumResources({\n      resources: [...building.contractWage.costs, ...worker.config.foodCost.costs]\n    });\n  }\n  const nextState = exchangeResources({\n    accountName,\n    exchange,\n    balances: prevState.resources,\n    maxBalances: account.maxBalances,\n    requestedResources: totalCosts\n  });\n  if (nextState.action === 'stop') {\n    return nextState;\n  }\n  return {\n    action: building.isOwnBuilding ? 'start_own_rest' : 'start_external_rest',\n    actions: [...nextState.actions, feedOneWorker({\n      accountName,\n      buildingId: building.id,\n      workerId: worker.id,\n      realmId: building.realmId,\n      districtId: building.districtId\n    })],\n    resources: sumResources({\n      resources: [...nextState.nextBalances]\n    }),\n    availableWorkers,\n    availableBuildings\n  };\n};\nconst _getStartMixedRestAction = ({\n  accountName,\n  exchange,\n  account,\n  gameSettings,\n  realm,\n  actionName\n}) => {\n  const states = [{\n    action: 'init',\n    resources: account.balances,\n    availableWorkers: _.cloneDeep(realm.availableWorkers),\n    availableBuildings: _.cloneDeep(realm.availableBuildings)\n  }];\n  while (true) {\n    const prevState = states[states.length - 1];\n    if (prevState.availableWorkers.length === 0) {\n      break;\n    }\n    if (prevState.availableBuildings.length === 0) {\n      break;\n    }\n    const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n      prevState,\n      accountName\n    });\n    if (nextStateTransferExcessObsdToNovo != null) {\n      states.push(nextStateTransferExcessObsdToNovo);\n      continue;\n    }\n    const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n      prevState,\n      exchange,\n      accountName\n    });\n    if (nextStateAfterTransferAllResourecesToObsd != null) {\n      states.push(nextStateAfterTransferAllResourecesToObsd);\n      continue;\n    }\n    const nextStateAfterRestStart = getNextStateAfterRestStart({\n      prevState,\n      accountName,\n      exchange,\n      account\n    });\n    if (nextStateAfterRestStart != null) {\n      if (nextStateAfterRestStart.action === 'stop') {\n        log({\n          project: gameSettings.name,\n          message: nextStateAfterRestStart.action.message\n        });\n        break;\n      }\n      states.push(nextStateAfterRestStart);\n    }\n  }\n  const actions = _(states).map(state => state.actions).compact().flatten().value();\n  if (actions.length === 0) {\n    return;\n  }\n  return {\n    action: actionName,\n    isMultipleTransactions: true,\n    actions: _.chunk(actions, 16)\n  };\n};\nconst _prepRestBuildings = ({\n  accountName,\n  buildings,\n  level\n}) => {\n  return _(buildings).map(building => ({\n    id: building.id,\n    realmId: building.district.realm.id,\n    districtId: building.district.id,\n    isOwnBuilding: building.owner === accountName,\n    numWorkers: building.numWorkers,\n    maxWorkers: building.config.workerCapacity,\n    // wage fields for both own and external jobs\n    restCostObsd: building.restCostObsd,\n    contractWage: building.contractWage,\n    shiftCost: building.config.shiftCost\n  })).filter(building => building.restCostObsd < REST_MAX_COST_OBSD[level - 1]).sortBy(building => -building.restCostObsd).value();\n};\nconst getStartMixedRestAction = ({\n  accountName,\n  exchange,\n  account,\n  buildings,\n  workers,\n  gameSettings\n}) => {\n  if (workers.length === 0) {\n    return;\n  }\n  const realms = _(workers).groupBy(worker => worker.level).map((workers, level) => {\n    const _level = Number(level);\n    return _(workers).groupBy(worker => worker.district.realm.name).map((workers, realmName) => ({\n      realmName,\n      level: _level,\n      availableWorkers: workers,\n      availableBuildings: _prepRestBuildings({\n        accountName,\n        buildings: findBuildings({\n          buildings,\n          realmName,\n          level: _level,\n          buildingSetName: 'bestRestBuildings'\n        }),\n        level: _level\n      })\n    })).value();\n  }).flatten().sortBy(realm => -realm.level).value();\n\n  // processing one realm at once\n  const realm = realms.find(realm => realm.availableBuildings.length > 0);\n  if (realm == null) {\n    log({\n      project: gameSettings.name,\n      message: `[SKILLED] No available rest buildings but ${workers.length} available workers`\n    });\n    return null;\n  }\n  return _getStartMixedRestAction({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName: 'start_mixed_rests'\n  });\n};\nconst getStartMixedUnskilledRestAction = ({\n  accountName,\n  exchange,\n  account,\n  buildings,\n  workers,\n  gameSettings\n}) => {\n  if (workers.length === 0) {\n    return;\n  }\n  const realms = _(workers).groupBy(worker => worker.district.realm.name).map((workers, realmName) => ({\n    realmName,\n    availableWorkers: workers,\n    availableBuildings: _prepRestBuildings({\n      accountName,\n      buildings: findBuildings({\n        buildings,\n        realmName,\n        level: 1,\n        buildingSetName: 'bestUnskilledRestBuildings'\n      }),\n      level: 1\n    })\n  })).value();\n\n  // processing one realm at once\n  const realm = realms.find(realm => realm.availableBuildings.length > 0);\n  if (realm == null) {\n    log({\n      project: gameSettings.name,\n      message: `[UNSKILLED] No available rest buildings but ${workers.length} available workers`\n    });\n    return null;\n  }\n  return _getStartMixedRestAction({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName: 'start_mixed_unskilled_rests'\n  });\n};\n\n// -------------------------------------------------------- //\n// ---------                 RENT                ---------- //\n// -------------------------------------------------------- //\nconst getRenewRentAction = ({\n  accountName,\n  exchange,\n  account,\n  buildings,\n  gameSettings\n}) => {\n  if (buildings.length === 0) {\n    return;\n  }\n  const lands = _(buildings).map(building => building.land).value();\n  const totalCosts = sumResources({\n    resources: _(lands).map(land => land.config.plotRentAmount.costs).flatten().value()\n  });\n  const nextState = exchangeResources({\n    accountName,\n    exchange,\n    balances: account.balances,\n    maxBalances: account.maxBalances,\n    requestedResources: totalCosts\n  });\n  if (nextState.action === 'stop') {\n    log({\n      project: gameSettings.name,\n      message: nextState.message\n    });\n    return null;\n  }\n  return {\n    action: 'renew_rent',\n    actions: [...nextState.actions, renewRent({\n      accountName,\n      landIds: _(lands).map(land => land.id).value()\n    })]\n  };\n};\nconst getNextStateAfterRentLandStart = ({\n  prevState,\n  accountName,\n  landConfigs,\n  exchange,\n  account\n}) => {\n  if (prevState.availableBuildings.length === 0) {\n    return;\n  }\n  if (prevState.availableLands.length === 0) {\n    return;\n  }\n\n  // find a suitable building for a next worker\n  const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n  const availableLands = _.cloneDeep(prevState.availableLands);\n  const building = availableBuildings.pop();\n  const land = availableLands.pop();\n  const landConfig = _(landConfigs).sortBy(config => config.rentTime).value()[0];\n\n  // calculate total cost depends on land ownership\n  let totalCosts = [];\n  if (land.isOwnLand) {\n    if (!land.isAvailableForRent) {\n      totalCosts = [...landConfig.plotRentAmount.costs];\n    }\n  } else {\n    totalCosts = [...land.rentCost.costs];\n  }\n  const nextState = exchangeResources({\n    accountName,\n    exchange,\n    balances: prevState.resources,\n    maxBalances: account.maxBalances,\n    requestedResources: totalCosts\n  });\n  if (nextState.action === 'stop') {\n    return nextState;\n  }\n  return {\n    action: land.isOwnLand ? 'start_own_land_rent' : 'start_external_land_rent',\n    actions: _.compact([...nextState.actions, land.isOwnLand && !land.isAvailableForRent ? setLandRent({\n      accountName,\n      id: land.id,\n      rentObsd: 0,\n      isOwnerOccupied: true,\n      landConfigId: landConfig.id\n    }) : null, stakeBuilding({\n      accountName,\n      assetId: building.assetId,\n      realmId: land.realmId,\n      districtId: land.districtId,\n      landId: land.id\n    })]),\n    resources: sumResources({\n      resources: [...nextState.nextBalances]\n    }),\n    availableBuildings,\n    availableLands\n  };\n};\nconst getRentMixedLandsAction = ({\n  accountName,\n  exchange,\n  account,\n  lands,\n  buildings,\n  landConfigs,\n  gameSettings\n}) => {\n  const qualifiedBuildings = _(buildings).filter(building => building.level >= MIN_RENT_BUILDING_LEVELS[building.config.resourceType]).value();\n  if (qualifiedBuildings.length === 0) {\n    return;\n  }\n  const realms = _(qualifiedBuildings).groupBy(building => building.realmName).map((buildings, realmName) => ({\n    realmName,\n    availableBuildings: buildings,\n    availableLands: _(findLands({\n      lands,\n      realmName,\n      landSetName: 'bestLands'\n    })).map(land => ({\n      id: land.id,\n      realmId: land.district.realm.id,\n      districtId: land.district.id,\n      owner: land.owner,\n      isOwnLand: land.owner === accountName,\n      isAvailableForRent: land.isAvailableForRent,\n      rentPriceObsd: land.rentPriceObsd,\n      rentCost: land.rentCost\n    })).filter(land => land.rentPriceObsd < MAX_LAND_RENT_PRICE_OBSD).sortBy(land => -land.rentPriceObsd).value()\n  })).value();\n\n  // process one realm at a time\n  const realm = realms.find(realm => realm.availableLands.length > 0);\n  if (realm == null) {\n    log({\n      project: gameSettings.name,\n      message: `No available lands but ${qualifiedBuildings.length} available buildings: ${qualifiedBuildings.map(b => b.realmName).join(', ')}`\n    });\n    return;\n  }\n  const states = [{\n    action: 'init',\n    resources: account.balances,\n    availableBuildings: _.cloneDeep(realm.availableBuildings),\n    availableLands: _.cloneDeep(realm.availableLands)\n  }];\n  while (true) {\n    const prevState = states[states.length - 1];\n    if (prevState.availableBuildings.length === 0) {\n      break;\n    }\n    if (prevState.availableLands.length === 0) {\n      break;\n    }\n    const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n      prevState,\n      accountName\n    });\n    if (nextStateTransferExcessObsdToNovo != null) {\n      states.push(nextStateTransferExcessObsdToNovo);\n      continue;\n    }\n    const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n      prevState,\n      exchange,\n      accountName\n    });\n    if (nextStateAfterTransferAllResourecesToObsd != null) {\n      states.push(nextStateAfterTransferAllResourecesToObsd);\n      continue;\n    }\n    const nextStateAfterRentLandStart = getNextStateAfterRentLandStart({\n      prevState,\n      accountName,\n      exchange,\n      landConfigs,\n      account\n    });\n    if (nextStateAfterRentLandStart != null) {\n      if (nextStateAfterRentLandStart.action === 'stop') {\n        log({\n          project: gameSettings.name,\n          message: nextStateAfterRentLandStart.action.message\n        });\n        break;\n      }\n      states.push(nextStateAfterRentLandStart);\n    }\n  }\n  const actions = _(states).map(state => state.actions).compact().flatten().value();\n  if (actions.length === 0) {\n    return;\n  }\n  return {\n    action: 'rent_mixed_lands',\n    isMultipleTransactions: true,\n    actions: _.chunk(actions, 16)\n  };\n};\n\n// -------------------------------------------------------- //\n// ---------               UPGRADE               ---------- //\n// -------------------------------------------------------- //\n\nconst getNextStateAfterStartWorkerUpgrade = ({\n  prevState,\n  accountName,\n  exchange,\n  account\n}) => {\n  const settings = _.cloneDeep(prevState.settings);\n  const {\n    worker,\n    config\n  } = settings.pop();\n  const nextState = exchangeResources({\n    accountName,\n    exchange,\n    balances: prevState.resources,\n    maxBalances: account.maxBalances,\n    requestedResources: config.upgradeCost.costs\n  });\n  if (nextState.action === 'stop') {\n    return nextState;\n  }\n  return {\n    action: 'upgrading_workers',\n    actions: [...nextState.actions, startUpgrade({\n      accountName,\n      assetId: worker.id\n    })],\n    resources: sumResources({\n      resources: [...nextState.nextBalances]\n    }),\n    settings\n  };\n};\nconst getStartWorkerUpgradesAction = ({\n  account,\n  exchange,\n  accountName,\n  upgradeConfigs,\n  workers,\n  gameSettings\n}) => {\n  if (workers.length === 0) {\n    return;\n  }\n  const settings = _(workers).map(worker => ({\n    worker,\n    config: upgradeConfigs.find(config => config.key === worker.realmName).configs.find(config => config.baseLevel === worker.level)\n  })).value();\n  const states = [{\n    action: 'init',\n    resources: account.balances,\n    settings: _.cloneDeep(settings)\n  }];\n  while (true) {\n    const prevState = states[states.length - 1];\n    if (prevState.settings.length === 0) {\n      break;\n    }\n    const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n      prevState,\n      accountName\n    });\n    if (nextStateTransferExcessObsdToNovo != null) {\n      states.push(nextStateTransferExcessObsdToNovo);\n      continue;\n    }\n    const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n      prevState,\n      exchange,\n      accountName\n    });\n    if (nextStateAfterTransferAllResourecesToObsd != null) {\n      states.push(nextStateAfterTransferAllResourecesToObsd);\n      continue;\n    }\n    const nextStateAfterStartWorkerUpgrade = getNextStateAfterStartWorkerUpgrade({\n      prevState,\n      accountName,\n      exchange,\n      account\n    });\n    if (nextStateAfterStartWorkerUpgrade != null) {\n      if (nextStateAfterStartWorkerUpgrade.action === 'stop') {\n        log({\n          project: gameSettings.name,\n          message: nextStateAfterStartWorkerUpgrade.action.message\n        });\n        break;\n      }\n      states.push(nextStateAfterStartWorkerUpgrade);\n    }\n  }\n  const actions = _(states).map(state => state.actions).compact().flatten().value();\n  if (actions.length === 0) {\n    return;\n  }\n  return {\n    action: 'upgrade_workers',\n    isMultipleTransactions: true,\n    actions: _.chunk(actions, 16)\n  };\n};\nconst getFinishUpgradesAction = ({\n  accountName,\n  upgrades\n}) => {\n  const now = Date.now();\n  const finishedUpgrades = _(upgrades).filter(upgrade => upgrade.owner === accountName).filter(upgrade => upgrade.endTime < now).value();\n  if (finishedUpgrades.length === 0) {\n    return;\n  }\n  return {\n    action: 'finish_upgrades',\n    actions: _(finishedUpgrades).map(upgrade => finishUpgrade({\n      accountName,\n      assetId: upgrade.assetId\n    })).value()\n  };\n};\n\n// -------------------------------------------------------- //\n// ---------             ENTRY POIN              ---------- //\n// -------------------------------------------------------- //\nconst playGameCalcNextAction = async ({\n  accountName,\n  gameSettings\n}) => {\n  const {\n    exchange,\n    account,\n    accountBuildings,\n    accountWorkers,\n    accountLands,\n    accountTransfers,\n    landConfigs,\n    upgradeConfigs,\n    upgrades\n  } = await fetchAllGameDat({\n    accountName\n  });\n\n  // showing alert if some buildings places in district with inappropriate town hall level\n  if (accountBuildings.ownStaleBuildings.length > 0) {\n    const staleRealms = _(accountBuildings.ownStaleBuildings).map(building => building.district.realm.name).uniq().value();\n    log({\n      project: gameSettings.name,\n      message: `[ACTION NEEDED] ${accountBuildings.ownStaleBuildings.length} stale buildings, need to be moved to another district, relams: ${staleRealms.join(', ')}`\n    });\n  }\n\n  // wake up all available workers\n  if (accountWorkers.readyToWakeupWorkers.length > 0) {\n    return {\n      action: 'wakeup',\n      actions: [wakeupWorkers({\n        accountName,\n        workerIds: _(accountWorkers.readyToWakeupWorkers).map(worker => worker.id).value()\n      })]\n    };\n  }\n\n  // set wage for all avaialbe buildings\n  if (accountBuildings.ownBuildingsWithoutWageSet.length > 0) {\n    return {\n      action: 'set_building_wage',\n      actions: _(accountBuildings.ownBuildingsWithoutWageSet).map(b => setBuildWage({\n        accountName,\n        id: b.id,\n        wageObsd: b.config.minimumWage.obsdCost,\n        isOnlyOwnWorkersAllowed: true,\n        minWorkerLevel: 1\n      })).value()\n    };\n  }\n\n  // prolong rent for buildings placed on your lands\n  if (accountBuildings.ownBuildingsExpiredExternalRentSet.length > 0) {\n    return {\n      action: 'cancel_external_rent',\n      actions: _(accountBuildings.ownBuildingsExpiredExternalRentSet).map(building => removeBuilding({\n        accountName,\n        buildingId: building.id\n      })).value()\n    };\n  }\n  const startMixedShiftsAction = getStartMixedShiftAction({\n    accountName,\n    exchange,\n    account,\n    buildings: accountBuildings.buildings,\n    workers: [...accountWorkers.readyToWorkWorkers],\n    gameSettings\n  });\n  const startMixedUnskilledShiftsAction = getStartMixedUnskilledShiftAction({\n    accountName,\n    exchange,\n    account,\n    buildings: accountBuildings.unskilledJobBuildings,\n    workers: accountWorkers.readyToWorkUnskilledWorkers,\n    gameSettings\n  });\n  const startMixedUnskilledRestAction = getStartMixedUnskilledRestAction({\n    accountName,\n    exchange,\n    account,\n    buildings: accountBuildings.buildings,\n    workers: accountWorkers.readyToRestUnskilledWorkers,\n    gameSettings\n  });\n  const startMixedRestsAction = getStartMixedRestAction({\n    accountName,\n    exchange,\n    account,\n    buildings: accountBuildings.buildings,\n    workers: accountWorkers.readyToRestWorkers,\n    gameSettings\n  });\n  const startRenewRentAction = getRenewRentAction({\n    accountName,\n    exchange,\n    account,\n    buildings: accountBuildings.ownBuildingsExpiredRentSet,\n    gameSettings\n  });\n  const rentExternalLandsAction = getRentMixedLandsAction({\n    accountName,\n    exchange,\n    account,\n    lands: accountLands.lands,\n    buildings: accountTransfers.buildings,\n    landConfigs,\n    gameSettings\n  });\n  const startWorkerUpgradesAction = getStartWorkerUpgradesAction({\n    account,\n    exchange,\n    accountName,\n    upgradeConfigs: upgradeConfigs.workers,\n    workers: accountWorkers.readyToUpgradeWorkers,\n    gameSettings\n  });\n  const finishUpgradesAction = getFinishUpgradesAction({\n    accountName,\n    upgrades\n  });\n  if (finishUpgradesAction != null) {\n    return finishUpgradesAction;\n  }\n  if (startWorkerUpgradesAction != null) {\n    return startWorkerUpgradesAction;\n  }\n  if (rentExternalLandsAction != null) {\n    return rentExternalLandsAction;\n  }\n  if (startMixedRestsAction != null) {\n    return startMixedRestsAction;\n  }\n  if (startMixedUnskilledRestAction != null) {\n    return startMixedUnskilledRestAction;\n  }\n  if (startRenewRentAction != null) {\n    return startRenewRentAction;\n  }\n  if (startMixedShiftsAction != null) {\n    return startMixedShiftsAction;\n  }\n  if (startMixedUnskilledShiftsAction != null) {\n    return startMixedUnskilledShiftsAction;\n  }\n  return {\n    action: 'wait',\n    message: `Nothing to do for ${accountName}`\n  };\n};\nmodule.exports = playGameCalcNextAction;","map":{"version":3,"names":["_","require","setBuildWage","wakeupWorkers","multiplyResources","sumResources","exchangeTokens","equalizeResources","getExchangeRate","RESOURCES","MIN_TRANSACTION_VALUE","EXCHANGE_STRATEGY","findResource","startShift","default","log","renewRent","feedOneWorker","stakeBuilding","fetchAllGameDat","removeBuilding","setLandRent","startUpgrade","finishUpgrade","exchangeResources","findBuildings","buildings","realmName","level","buildingSetName","find","b","findLands","lands","landSetName","land","MAX_LAND_RENT_PRICE_OBSD","MIN_RENT_BUILDING_LEVELS","rest","materials","food","energy","JOB_MIN_PROFITS_OBSD","REST_MAX_COST_OBSD","MAX_OBSD_BALANCE","getNextStateAfterTransferExcessObsdToNovo","prevState","accountName","obsdBalance","resources","symbol","OBSD","value","excessObsResource","floor","NOVO","action","actions","valueFrom","symbolFrom","symbolTo","availableWorkers","cloneDeep","availableBuildings","availableLands","settings","getNextStateAfterTransferAllResourecesToObsd","exchange","restBalances","NOVOE","NOVOM","NOVOF","map","hasRestResources","some","exchangeRestResources","filter","exchangeStrategy","exchangedObsdBalance","r","valueTo","getNextStateAfterOwnShiftStart","building","worker","account","totalYield","shiftYield","costs","multiplier","config","yieldMultiplier","nextState","balances","maxBalances","requestedResources","shiftCost","assetId","realmId","districtId","buildingId","id","nextBalances","getNextStateAfterExternalShiftStart","contractWage","wageMultiplier","getNextStateAfterShiftStart","length","_prevState","pop","numWorkers","maxWorkers","push","isOwnBuilding","_prepShiftBuildings","district","realm","owner","workerCapacity","jobProfitObsd","sortBy","_getStartMixedShiftAction","gameSettings","actionName","states","nextStateTransferExcessObsdToNovo","nextStateAfterTransferAllResourecesToObsd","nextStateAfterShiftStart","project","name","message","state","compact","flatten","isMultipleTransactions","chunk","getStartMixedShiftAction","workers","realms","groupBy","_level","Number","getStartMixedUnskilledShiftAction","getNextStateAfterRestStart","totalCosts","foodCost","workerId","_getStartMixedRestAction","nextStateAfterRestStart","_prepRestBuildings","restCostObsd","getStartMixedRestAction","getStartMixedUnskilledRestAction","getRenewRentAction","plotRentAmount","landIds","getNextStateAfterRentLandStart","landConfigs","landConfig","rentTime","isOwnLand","isAvailableForRent","rentCost","rentObsd","isOwnerOccupied","landConfigId","landId","getRentMixedLandsAction","qualifiedBuildings","resourceType","rentPriceObsd","join","nextStateAfterRentLandStart","getNextStateAfterStartWorkerUpgrade","upgradeCost","getStartWorkerUpgradesAction","upgradeConfigs","key","configs","baseLevel","nextStateAfterStartWorkerUpgrade","getFinishUpgradesAction","upgrades","now","Date","finishedUpgrades","upgrade","endTime","playGameCalcNextAction","accountBuildings","accountWorkers","accountLands","accountTransfers","ownStaleBuildings","staleRealms","uniq","readyToWakeupWorkers","workerIds","ownBuildingsWithoutWageSet","wageObsd","minimumWage","obsdCost","isOnlyOwnWorkersAllowed","minWorkerLevel","ownBuildingsExpiredExternalRentSet","startMixedShiftsAction","readyToWorkWorkers","startMixedUnskilledShiftsAction","unskilledJobBuildings","readyToWorkUnskilledWorkers","startMixedUnskilledRestAction","readyToRestUnskilledWorkers","startMixedRestsAction","readyToRestWorkers","startRenewRentAction","ownBuildingsExpiredRentSet","rentExternalLandsAction","startWorkerUpgradesAction","readyToUpgradeWorkers","finishUpgradesAction","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/playGameCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst setBuildWage = require('./actions/setBuildWage');\nconst wakeupWorkers = require('./actions/wakeupWorkers');\nconst multiplyResources = require('./utils/multiplyResources');\nconst sumResources = require('./utils/sumResources');\nconst exchangeTokens = require('./actions/exchangeTokens');\nconst equalizeResources = require('./utils/equalizeResources');\nconst getExchangeRate = require('./utils/getExchangeRate');\nconst RESOURCES = require('./consts/RESOURSES');\nconst MIN_TRANSACTION_VALUE = require('./consts/MIN_TRANSACTION_VALUE');\nconst EXCHANGE_STRATEGY = require('./consts/EXCHANGE_STRATEGY');\nconst findResource = require('./utils/findResource');\nconst startShift = require('./actions/startShift');\nconst { default: log} = require('../utils/log');\nconst renewRent = require('./actions/renewRent');\nconst feedOneWorker = require('./actions/feedOneWorker');\nconst stakeBuilding = require('./actions/stakeBuilding');\nconst fetchAllGameDat = require('./api/fetchAllGameData');\nconst removeBuilding = require('./actions/removeBuilding');\nconst setLandRent = require('./actions/setLandRent');\nconst startUpgrade = require('./actions/startUpgrade');\nconst finishUpgrade = require('./actions/finishUpgrade');\nconst exchangeResources = require('./utils/exchangeResources');\n\nconst findBuildings = ({\n    buildings,\n    realmName,\n    level,\n    buildingSetName,\n}) => {\n    return buildings\n        .find(b => b.realmName === realmName)\n        .buildings[level - 1][buildingSetName];\n};\n\nconst findLands = ({\n    lands,\n    realmName,\n    landSetName,\n}) => {\n    return lands.find(land => land.realmName === realmName)[landSetName];\n};\n\nconst MAX_LAND_RENT_PRICE_OBSD = 0.00000331;\nconst MIN_RENT_BUILDING_LEVELS = {\n    rest: 3,\n    materials: 4,\n    food: 4,\n    energy: 4,\n};\nconst JOB_MIN_PROFITS_OBSD = [\n    2,\n    4.39400,\n    6.59100,\n    7.69000,\n    8.72000,\n];\n\nconst REST_MAX_COST_OBSD = [\n    1.1,\n    1.510,\n    1.873,\n    2.055,\n    2.237,\n];\n\n// -------------------------------------------------------- //\n// ---------               BALANCE               ---------- //\n// -------------------------------------------------------- //\nconst MAX_OBSD_BALANCE = 20;\n\nconst getNextStateAfterTransferExcessObsdToNovo = ({\n    prevState,\n    accountName,\n}) => {\n    const obsdBalance = findResource({\n        resources: prevState.resources,\n        symbol: RESOURCES.OBSD,\n    });\n    \n    if (obsdBalance.value <= MAX_OBSD_BALANCE) {\n        return;\n    }\n\n    const excessObsResource = {\n        value: _.floor((obsdBalance.value - MAX_OBSD_BALANCE + 3) / MIN_TRANSACTION_VALUE.NOVO) * MIN_TRANSACTION_VALUE.NOVO,\n        symbol: RESOURCES.OBSD,\n    };\n\n    return {\n        action: 'exchange',\n        actions: [\n            exchangeTokens({\n                accountName,\n                valueFrom: excessObsResource.value,\n                symbolFrom: excessObsResource.symbol,\n                symbolTo: RESOURCES.NOVO,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                {\n                    value: -excessObsResource.value,\n                    symbol: excessObsResource.symbol,\n                },\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n        availableLands: _.cloneDeep(prevState.availableLands),\n        settings: _.cloneDeep(prevState.settings),\n    };\n};\n\nconst getNextStateAfterTransferAllResourecesToObsd = ({\n    prevState,\n    exchange,\n    accountName,\n}) => {\n    const restBalances = _([\n        RESOURCES.NOVOE,\n        RESOURCES.NOVOM,\n        RESOURCES.NOVOF,\n    ])\n        .map(symbol => findResource({\n            resources: prevState.resources,\n            symbol,\n        }))\n        .value();\n    const hasRestResources = _.some(restBalances, b => {\n        return b.value >= MIN_TRANSACTION_VALUE[b.symbol];\n    });\n\n    if (!hasRestResources) {\n        return;\n    }\n\n    // convert all resources to OBSD\n    const exchangeRestResources = getExchangeRate({\n        exchange,\n        resources: _(restBalances)\n            .map(b => ({\n                value: _.floor(b.value / MIN_TRANSACTION_VALUE[b.symbol]) * MIN_TRANSACTION_VALUE[b.symbol],\n                symbol: b.symbol,\n            }))\n            .filter(b => b.value > 0)\n            .value(),\n        exchangeStrategy: EXCHANGE_STRATEGY,\n    });\n    const exchangedObsdBalance = sumResources({\n        resources: _(exchangeRestResources)\n            .map(r => ({\n                value: r.valueFrom,\n                symbol: r.symbolFrom,\n            }))\n            .value(),\n    });\n\n    return {\n        action: 'exchange',\n        actions: _(exchangeRestResources)\n            .map(b => exchangeTokens({\n                accountName,\n                valueFrom: b.valueTo,\n                symbolFrom: b.symbolTo,\n                symbolTo: b.symbolFrom,\n            }))\n            .value(),\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                ...exchangedObsdBalance,\n                ..._(exchangeRestResources)\n                    .map(b => ({\n                        value: -b.valueTo,\n                        symbol: b.symbolTo,\n                    }))\n                    .value(),\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n        availableLands: _.cloneDeep(prevState.availableLands),\n        settings: _.cloneDeep(prevState.settings),\n    };\n};\n\n// -------------------------------------------------------- //\n// ---------                JOB                  ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterOwnShiftStart = ({\n    prevState,\n    accountName,\n    exchange,\n    building,\n    worker,\n    account,\n}) => {\n    const totalYield = multiplyResources({\n        resources: building.shiftYield.costs,\n        multiplier: worker.config.yieldMultiplier,\n    });\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: worker.config.shiftCost.costs,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: 'start_own_shift',\n        actions: [\n            ...nextState.actions,\n            startShift({\n                accountName,\n                assetId: worker.assetId,\n                realmId: building.realmId,\n                districtId: building.districtId,\n                buildingId: building.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n                ...totalYield,\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    };\n};\n\nconst getNextStateAfterExternalShiftStart = ({\n    prevState,\n    accountName,\n    building,\n    worker,\n    account, // TODO validate max storage capacity\n}) => {\n    return {\n        action: 'start_external_shift',\n        actions: [\n            startShift({\n                accountName,\n                assetId: worker.assetId,\n                realmId: building.realmId,\n                districtId: building.districtId,\n                buildingId: building.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...prevState.resources,\n                // total shift wage\n                ...multiplyResources({\n                    resources: building.contractWage.costs,\n                    multiplier: worker.config.wageMultiplier,\n                }),\n            ],\n        }),\n        availableWorkers: _.cloneDeep(prevState.availableWorkers),\n        availableBuildings: _.cloneDeep(prevState.availableBuildings),\n    };\n};\n\nconst getNextStateAfterShiftStart = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableWorkers.length === 0) {\n        return;\n    }\n\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const _prevState = _.cloneDeep(prevState);\n    const worker = _prevState.availableWorkers.pop();\n    const building = _prevState.availableBuildings.pop();\n    building.numWorkers++;\n\n    if (building.numWorkers < building.maxWorkers) {\n        _prevState.availableBuildings.push(building);\n    }\n\n    if (building.isOwnBuilding) {\n        return getNextStateAfterOwnShiftStart({\n            prevState: _prevState,\n            accountName,\n            exchange,\n            building,\n            worker,\n            account,\n        });\n    }\n\n    return getNextStateAfterExternalShiftStart({\n        prevState: _prevState,\n        accountName,\n        building,\n        worker,\n        account,\n    });\n};\n\nconst _prepShiftBuildings = ({\n    accountName,\n    buildings,\n    level,\n}) => {\n    return _(buildings)\n        .map(building => ({\n            id: building.id,\n            realmId: building.district.realm.id,\n            districtId: building.district.id,\n            isOwnBuilding: building.owner === accountName,\n            numWorkers: building.numWorkers,\n            maxWorkers: building.config.workerCapacity,\n            // wage fields for both own and external jobs\n            jobProfitObsd: building.jobProfitObsd,\n            contractWage: building.contractWage,\n            shiftYield: building.config.shiftYield,\n        }))\n        .filter(building => building.jobProfitObsd > JOB_MIN_PROFITS_OBSD[level - 1])\n        .sortBy(building => building.jobProfitObsd)\n        .value();\n};\n\nconst _getStartMixedShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName,\n}) => {\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableWorkers: _.cloneDeep(realm.availableWorkers),\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableWorkers.length === 0) {\n            break;\n        }\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterShiftStart = getNextStateAfterShiftStart({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterShiftStart != null) {\n            if (nextStateAfterShiftStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterShiftStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterShiftStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n\n    return {\n        action: actionName,\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst getStartMixedShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.level)\n        .map((workers, level) => {\n            const _level = Number(level);\n            return _(workers)\n                .groupBy(worker => worker.realmName)\n                .map((workers, realmName) => ({\n                    realmName,\n                    level: _level,\n                    availableWorkers: workers,\n                    availableBuildings: _prepShiftBuildings({\n                        accountName,\n                        buildings: findBuildings({\n                            buildings,\n                            realmName,\n                            level: _level,\n                            buildingSetName: 'bestJobBuildings'\n                        }),\n                        level: _level,\n                    }),\n                }))\n                .value();\n        })\n        .flatten()\n        .sortBy(realm => -realm.level)\n        .value();\n\n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[SKILLED] No available job buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_shifts',\n    });\n};\n\nconst getStartMixedUnskilledShiftAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n    \n    const realm = {\n        availableWorkers: workers,\n        availableBuildings: _prepShiftBuildings({\n            accountName,\n            buildings,\n            level: 1,\n        }),\n    };\n    // console.log(`[UNSKILLED] Job buildings: `, realm);\n\n    return _getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_unskilled_shifts',\n    });\n};\n\n// -------------------------------------------------------- //\n// ---------                REST                 ---------- //\n// -------------------------------------------------------- //\nconst getNextStateAfterRestStart = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableWorkers.length === 0) {\n        return;\n    }\n\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const availableWorkers = _.cloneDeep(prevState.availableWorkers);\n    const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n    const worker = availableWorkers.pop();\n    const building = availableBuildings.pop();\n    building.numWorkers++;\n\n    if (building.numWorkers < building.maxWorkers) {\n        availableBuildings.push(building);\n    }\n\n    // calculate total cost depends on rest building ownership\n    let totalCosts;\n    if (building.isOwnBuilding) {\n        totalCosts = sumResources({\n            resources: [\n                ...building.shiftCost.costs,\n                ...worker.config.foodCost.costs,\n            ],\n        });\n    } else {\n        totalCosts = sumResources({\n            resources: [\n                ...building.contractWage.costs,\n                ...worker.config.foodCost.costs,\n            ],\n        });\n    }\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: building.isOwnBuilding\n            ? 'start_own_rest'\n            : 'start_external_rest',\n        actions: [\n            ...nextState.actions,\n            feedOneWorker({\n                accountName,\n                buildingId: building.id,\n                workerId: worker.id,\n                realmId: building.realmId,\n                districtId: building.districtId,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        availableWorkers,\n        availableBuildings,\n    };\n};\n\nconst _getStartMixedRestAction = ({\n    accountName,\n    exchange,\n    account,\n    gameSettings,\n    realm,\n    actionName,\n}) => {\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableWorkers: _.cloneDeep(realm.availableWorkers),\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableWorkers.length === 0) {\n            break;\n        }\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterRestStart = getNextStateAfterRestStart({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterRestStart != null) {\n            if (nextStateAfterRestStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterRestStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterRestStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n    \n    return {\n        action: actionName,\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst _prepRestBuildings = ({\n    accountName,\n    buildings,\n    level,\n}) => {\n    return _(buildings)\n        .map(building => ({\n            id: building.id,\n            realmId: building.district.realm.id,\n            districtId: building.district.id,\n            isOwnBuilding: building.owner === accountName,\n            numWorkers: building.numWorkers,\n            maxWorkers: building.config.workerCapacity,\n            // wage fields for both own and external jobs\n            restCostObsd: building.restCostObsd,\n            contractWage: building.contractWage,\n            shiftCost: building.config.shiftCost,\n        }))\n        .filter(building => building.restCostObsd < REST_MAX_COST_OBSD[level - 1])\n        .sortBy(building => -building.restCostObsd)\n        .value();\n};\n\nconst getStartMixedRestAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.level)\n        .map((workers, level) => {\n            const _level = Number(level);\n            return _(workers)\n                .groupBy(worker => worker.district.realm.name)\n                .map((workers, realmName) => ({\n                    realmName,\n                    level: _level,\n                    availableWorkers: workers,\n                    availableBuildings: _prepRestBuildings({\n                        accountName,\n                        buildings: findBuildings({\n                            buildings,\n                            realmName,\n                            level: _level,\n                            buildingSetName: 'bestRestBuildings'\n                        }),\n                        level: _level,\n                    }),\n                }))\n                .value();\n        })\n        .flatten()\n        .sortBy(realm => -realm.level)\n        .value();\n    \n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[SKILLED] No available rest buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_rests',\n    });\n};\n\nconst getStartMixedUnskilledRestAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const realms = _(workers)\n        .groupBy(worker => worker.district.realm.name)\n        .map((workers, realmName) => ({\n            realmName,\n            availableWorkers: workers,\n            availableBuildings: _prepRestBuildings({\n                accountName,\n                buildings: findBuildings({\n                    buildings,\n                    realmName,\n                    level: 1,\n                    buildingSetName: 'bestUnskilledRestBuildings'\n                }),\n                level: 1,\n            }),\n        }))\n        .value();\n    \n    // processing one realm at once\n    const realm = realms.find(realm => realm.availableBuildings.length > 0);\n    \n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `[UNSKILLED] No available rest buildings but ${workers.length} available workers`,\n        });\n        return null;\n    }\n\n    return _getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        gameSettings,\n        realm,\n        actionName: 'start_mixed_unskilled_rests',\n    });\n};\n\n// -------------------------------------------------------- //\n// ---------                 RENT                ---------- //\n// -------------------------------------------------------- //\nconst getRenewRentAction = ({\n    accountName,\n    exchange,\n    account,\n    buildings,\n    gameSettings,\n}) => {\n    if (buildings.length === 0) {\n        return;\n    }\n\n    const lands = _(buildings)\n        .map(building => building.land)\n        .value();\n    \n    const totalCosts = sumResources({\n        resources: _(lands)\n            .map(land => land.config.plotRentAmount.costs)\n            .flatten()\n            .value(),\n    });\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: account.balances,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        log({\n            project: gameSettings.name,\n            message: nextState.message,\n        });\n        return null;\n    }\n\n    return {\n        action: 'renew_rent',\n        actions: [\n            ...nextState.actions,\n            renewRent({\n                accountName,\n                landIds: _(lands)\n                    .map(land => land.id)\n                    .value(),\n            }),\n        ],\n    };\n};\n\nconst getNextStateAfterRentLandStart = ({\n    prevState,\n    accountName,\n    landConfigs,\n    exchange,\n    account,\n}) => {\n    if (prevState.availableBuildings.length === 0) {\n        return;\n    }\n\n    if (prevState.availableLands.length === 0) {\n        return;\n    }\n\n    // find a suitable building for a next worker\n    const availableBuildings = _.cloneDeep(prevState.availableBuildings);\n    const availableLands = _.cloneDeep(prevState.availableLands);\n    const building = availableBuildings.pop();\n    const land = availableLands.pop();\n    const landConfig = _(landConfigs)\n        .sortBy(config => config.rentTime)\n        .value()[0];\n\n    // calculate total cost depends on land ownership\n    let totalCosts = [];\n    if (land.isOwnLand) {\n        if (!land.isAvailableForRent) {\n            totalCosts = [\n                ...landConfig.plotRentAmount.costs,\n            ];\n        }\n    } else {\n        totalCosts = [\n            ...land.rentCost.costs,\n        ];\n    }\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: totalCosts,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: land.isOwnLand\n            ? 'start_own_land_rent'\n            : 'start_external_land_rent',\n        actions: _.compact([\n            ...nextState.actions,\n            land.isOwnLand && !land.isAvailableForRent\n                ? setLandRent({\n                    accountName,\n                    id: land.id,\n                    rentObsd: 0,\n                    isOwnerOccupied: true,\n                    landConfigId: landConfig.id,\n                })\n                : null,\n            stakeBuilding({\n                accountName,\n                assetId: building.assetId,\n                realmId: land.realmId,\n                districtId: land.districtId,\n                landId: land.id,\n            }),\n        ]),\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        availableBuildings,\n        availableLands,\n    };\n};\n\nconst getRentMixedLandsAction = ({\n    accountName,\n    exchange,\n    account,\n    lands,\n    buildings,\n    landConfigs,\n    gameSettings,\n}) => {\n    const qualifiedBuildings = _(buildings)\n        .filter(building => building.level >= MIN_RENT_BUILDING_LEVELS[building.config.resourceType])\n        .value();\n\n    if (qualifiedBuildings.length === 0) {\n        return;\n    }\n\n    const realms = _(qualifiedBuildings)\n        .groupBy(building => building.realmName)\n        .map((buildings, realmName) => ({\n            realmName,\n            availableBuildings: buildings,\n            availableLands: _(findLands({\n                lands,\n                realmName,\n                landSetName: 'bestLands',\n            }))\n                .map(land => ({\n                    id: land.id,\n                    realmId: land.district.realm.id,\n                    districtId: land.district.id,\n                    owner: land.owner,\n                    isOwnLand: land.owner === accountName,\n                    isAvailableForRent: land.isAvailableForRent,\n                    rentPriceObsd: land.rentPriceObsd,\n                    rentCost: land.rentCost,\n                }))\n                .filter(land => land.rentPriceObsd < MAX_LAND_RENT_PRICE_OBSD)\n                .sortBy(land => -land.rentPriceObsd)\n                .value(),\n        }))\n        .value();\n\n    // process one realm at a time\n    const realm = realms.find(realm => realm.availableLands.length > 0);\n\n    if (realm == null) {\n        log({\n            project: gameSettings.name,\n            message: `No available lands but ${qualifiedBuildings.length} available buildings: ${qualifiedBuildings.map(b => b.realmName).join(', ')}`,\n        });\n        return;\n    }\n\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            availableBuildings: _.cloneDeep(realm.availableBuildings),\n            availableLands: _.cloneDeep(realm.availableLands),\n        },\n    ];\n\n    while (true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.availableBuildings.length === 0) {\n            break;\n        }\n        if (prevState.availableLands.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterRentLandStart = getNextStateAfterRentLandStart({\n            prevState,\n            accountName,\n            exchange,\n            landConfigs,\n            account,\n        });\n\n        if (nextStateAfterRentLandStart != null) {\n            if (nextStateAfterRentLandStart.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterRentLandStart.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterRentLandStart);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n\n    if (actions.length === 0) {\n        return;\n    }\n\n    return {\n        action: 'rent_mixed_lands',\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\n// -------------------------------------------------------- //\n// ---------               UPGRADE               ---------- //\n// -------------------------------------------------------- //\n\nconst getNextStateAfterStartWorkerUpgrade = ({\n    prevState,\n    accountName,\n    exchange,\n    account,\n}) => {\n    const settings = _.cloneDeep(prevState.settings);\n    const {\n        worker,\n        config,\n    } = settings.pop();\n\n    const nextState = exchangeResources({\n        accountName,\n        exchange,\n        balances: prevState.resources,\n        maxBalances: account.maxBalances,\n        requestedResources: config.upgradeCost.costs,\n    });\n\n    if (nextState.action === 'stop') {\n        return nextState;\n    }\n\n    return {\n        action: 'upgrading_workers',\n        actions: [\n            ...nextState.actions,\n            startUpgrade({\n                accountName,\n                assetId: worker.id,\n            }),\n        ],\n        resources: sumResources({\n            resources: [\n                ...nextState.nextBalances,\n            ],\n        }),\n        settings,\n    };\n};\n\nconst getStartWorkerUpgradesAction = ({\n    account,\n    exchange,\n    accountName,\n    upgradeConfigs,\n    workers,\n    gameSettings,\n}) => {\n    if (workers.length === 0) {\n        return;\n    }\n\n    const settings = _(workers)\n        .map(worker => ({\n            worker,\n            config: upgradeConfigs\n                .find(config => config.key === worker.realmName)\n                .configs\n                .find(config => config.baseLevel === worker.level),\n        }))\n        .value();\n\n    const states = [\n        {\n            action: 'init',\n            resources: account.balances,\n            settings: _.cloneDeep(settings),\n        },\n    ];\n\n    while(true) {\n        const prevState = states[states.length - 1];\n\n        if (prevState.settings.length === 0) {\n            break;\n        }\n\n        const nextStateTransferExcessObsdToNovo = getNextStateAfterTransferExcessObsdToNovo({\n            prevState,\n            accountName,\n        });\n\n        if (nextStateTransferExcessObsdToNovo != null) {\n            states.push(nextStateTransferExcessObsdToNovo);\n            continue;\n        }\n\n        const nextStateAfterTransferAllResourecesToObsd = getNextStateAfterTransferAllResourecesToObsd({\n            prevState,\n            exchange,\n            accountName,\n        });\n\n        if (nextStateAfterTransferAllResourecesToObsd != null) {\n            states.push(nextStateAfterTransferAllResourecesToObsd);\n            continue;\n        }\n\n        const nextStateAfterStartWorkerUpgrade = getNextStateAfterStartWorkerUpgrade({\n            prevState,\n            accountName,\n            exchange,\n            account,\n        });\n\n        if (nextStateAfterStartWorkerUpgrade != null) {\n            if (nextStateAfterStartWorkerUpgrade.action === 'stop') {\n                log({\n                    project: gameSettings.name,\n                    message: nextStateAfterStartWorkerUpgrade.action.message,\n                });\n                break;\n            }\n\n            states.push(nextStateAfterStartWorkerUpgrade);\n        }\n    }\n\n    const actions = _(states)\n        .map(state => state.actions)\n        .compact()\n        .flatten()\n        .value();\n    \n    if (actions.length === 0) {\n        return;\n    }\n    \n    return {\n        action: 'upgrade_workers',\n        isMultipleTransactions: true,\n        actions: _.chunk(actions, 16),\n    };\n};\n\nconst getFinishUpgradesAction = ({\n    accountName,\n    upgrades,\n}) => {\n    const now = Date.now();\n\n    const finishedUpgrades = _(upgrades)\n        .filter(upgrade => upgrade.owner === accountName)\n        .filter(upgrade => upgrade.endTime < now)\n        .value();\n\n    if (finishedUpgrades.length === 0) {\n        return;\n    }\n\n    return {\n        action: 'finish_upgrades',\n        actions: _(finishedUpgrades)\n            .map(upgrade => finishUpgrade({\n                accountName,\n                assetId: upgrade.assetId,\n            }))\n            .value(),\n    }\n};\n\n// -------------------------------------------------------- //\n// ---------             ENTRY POIN              ---------- //\n// -------------------------------------------------------- //\nconst playGameCalcNextAction = async ({\n    accountName,\n    gameSettings,\n}) => {\n    const {\n        exchange,\n        account,\n        accountBuildings,\n        accountWorkers,\n        accountLands,\n        accountTransfers,\n        landConfigs,\n        upgradeConfigs,\n        upgrades,\n    } = await fetchAllGameDat({\n        accountName,\n    });\n\n    // showing alert if some buildings places in district with inappropriate town hall level\n    if (accountBuildings.ownStaleBuildings.length > 0) {\n        const staleRealms = _(accountBuildings.ownStaleBuildings)\n            .map(building => building.district.realm.name)\n            .uniq()\n            .value();\n        log({\n            project: gameSettings.name,\n            message: `[ACTION NEEDED] ${accountBuildings.ownStaleBuildings.length} stale buildings, need to be moved to another district, relams: ${staleRealms.join(', ')}`,\n        });\n    }\n\n    // wake up all available workers\n    if (accountWorkers.readyToWakeupWorkers.length > 0) {\n        return {\n            action: 'wakeup',\n            actions: [\n                wakeupWorkers({\n                    accountName,\n                    workerIds: _(accountWorkers.readyToWakeupWorkers)\n                        .map(worker => worker.id)\n                        .value(),\n                }),\n            ],\n        };\n    }\n    \n    // set wage for all avaialbe buildings\n    if (accountBuildings.ownBuildingsWithoutWageSet.length > 0) {\n        return {\n            action: 'set_building_wage',\n            actions: _(accountBuildings.ownBuildingsWithoutWageSet)\n                .map(b => setBuildWage({\n                    accountName,\n                    id: b.id,\n                    wageObsd: b.config.minimumWage.obsdCost,\n                    isOnlyOwnWorkersAllowed: true,\n                    minWorkerLevel: 1,\n                }))\n                .value(),\n        };\n    }\n    \n    // prolong rent for buildings placed on your lands\n    if (accountBuildings.ownBuildingsExpiredExternalRentSet.length > 0) {\n        return {\n            action: 'cancel_external_rent',\n            actions: _(accountBuildings.ownBuildingsExpiredExternalRentSet)\n                .map(building => removeBuilding({\n                    accountName,\n                    buildingId: building.id,\n                }))\n                .value(),\n        };\n    }\n    const startMixedShiftsAction = getStartMixedShiftAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: [\n            ...accountWorkers.readyToWorkWorkers,\n        ],\n        gameSettings,\n    });\n\n    const startMixedUnskilledShiftsAction = getStartMixedUnskilledShiftAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.unskilledJobBuildings,\n        workers: accountWorkers.readyToWorkUnskilledWorkers,\n        gameSettings,\n    });\n\n    const startMixedUnskilledRestAction = getStartMixedUnskilledRestAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: accountWorkers.readyToRestUnskilledWorkers,\n        gameSettings,\n    });\n    \n    const startMixedRestsAction = getStartMixedRestAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.buildings,\n        workers: accountWorkers.readyToRestWorkers,\n        gameSettings,\n    });\n\n    const startRenewRentAction = getRenewRentAction({\n        accountName,\n        exchange,\n        account,\n        buildings: accountBuildings.ownBuildingsExpiredRentSet,\n        gameSettings,\n    });\n\n    const rentExternalLandsAction = getRentMixedLandsAction({\n        accountName,\n        exchange,\n        account,\n        lands: accountLands.lands,\n        buildings: accountTransfers.buildings,\n        landConfigs,\n        gameSettings,\n    });\n\n    const startWorkerUpgradesAction = getStartWorkerUpgradesAction({\n        account,\n        exchange,\n        accountName,\n        upgradeConfigs: upgradeConfigs.workers,\n        workers: accountWorkers.readyToUpgradeWorkers,\n        gameSettings,\n    });\n\n    const finishUpgradesAction = getFinishUpgradesAction({\n        accountName,\n        upgrades,\n    });\n\n    if (finishUpgradesAction != null) {\n        return finishUpgradesAction;\n    }\n\n    if (startWorkerUpgradesAction != null) {\n        return startWorkerUpgradesAction;\n    }\n\n    if (rentExternalLandsAction != null) {\n        return rentExternalLandsAction;\n    }\n    \n    if (startMixedRestsAction != null) {\n        return startMixedRestsAction;\n    }\n\n    if (startMixedUnskilledRestAction != null) {\n        return startMixedUnskilledRestAction;\n    }\n    \n    if (startRenewRentAction != null) {\n        return startRenewRentAction;\n    }\n\n    if (startMixedShiftsAction != null) {\n        return startMixedShiftsAction;\n    }\n\n    if (startMixedUnskilledShiftsAction != null) {\n        return startMixedUnskilledShiftsAction;\n    }\n\n    return {\n        action: 'wait',\n        message: `Nothing to do for ${accountName}`,\n    };\n};\n\nmodule.exports = playGameCalcNextAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}