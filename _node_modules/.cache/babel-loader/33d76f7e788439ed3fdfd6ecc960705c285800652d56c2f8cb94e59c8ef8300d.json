{"ast":null,"code":"const _ = require('lodash');\nconst fetchSales = require('./api/fetchSales');\nconst fetchAssets = require('./api/fetchAssets');\nconst cancelSales = require('./actions/cancelSales');\nconst announceSales = require('./actions/announceSales');\nconst announceSaleCalcNextAction = async ({\n  accountName,\n  gameSettings: {\n    saleSettings\n  }\n}) => {\n  const sales = _(await fetchSales({\n    params: {\n      collection_name: saleSettings.collectionName,\n      template_id: saleSettings.templateId,\n      ...saleSettings.params\n    }\n  })).filter(sale => sale.mintId !== '1').sortBy(sale => sale.waxPrice).value();\n  const accountAssets = await fetchAssets({\n    params: {\n      owner: accountName,\n      template_id: saleSettings.templateId,\n      ...saleSettings.params\n    }\n  });\n  if (accountAssets.length === 0) {\n    return {\n      action: 'wait',\n      message: `[[[[[[[[ No assets \"${saleSettings.name}\" left. Cancel selling.`\n    };\n  }\n  const accountSales = _(sales).filter(sale => sale.seller === accountName).value();\n  const otherSales = _(sales).filter(sale => sale.seller !== accountName).value();\n  const otherSalesPrice = otherSales.length === 0 ? null : otherSales[0].waxPrice;\n  let staleAccountSales = [];\n  let cheapAccountSales = [];\n  if (otherSalesPrice != null) {\n    // TODO: implement fixMinPrice to keep sales on market even\n    // if they higher than the cheapes market sale\n    staleAccountSales = _(accountSales).filter(sale => sale.waxPrice >= otherSalesPrice).value();\n    cheapAccountSales = _(accountSales).filter(sale => {\n      let comparePrice = otherSalesPrice;\n      if (saleSettings.fixStartPrice) {\n        comparePrice = saleSettings.startPrice < otherSalesPrice ? saleSettings.startPrice : otherSalesPrice;\n      }\n      if (sale.waxPrice > comparePrice) {\n        return false;\n      }\n      return 1 - sale.waxPrice / comparePrice > saleSettings.allowedDiscountPriceRate;\n    }).value();\n  }\n  const cancelingSales = _([...staleAccountSales, ...cheapAccountSales]).uniqBy(sale => sale.id).value();\n  const maxSalesCount = accountAssets.length - saleSettings.targetAssetsCount;\n  const newSalesCount = saleSettings.maxSaleCount - (accountSales.length - cancelingSales.length);\n  const effectiveSalesCount = newSalesCount > maxSalesCount ? maxSalesCount : newSalesCount;\n  let discountPrice = otherSalesPrice == null ? saleSettings.startPrice : (1 - saleSettings.discountPriceRate) * otherSalesPrice;\n  if (saleSettings.fixStartPrice) {\n    if (discountPrice > saleSettings.startPrice) {\n      discountPrice = saleSettings.startPrice;\n    }\n  }\n  const shouldAnnounceSales = discountPrice > saleSettings.minPrice && effectiveSalesCount > 0;\n  if (shouldAnnounceSales) {\n    const sellingAssets = _(accountAssets).filter(asset => _.every(accountSales, sale => sale.assetId != asset.id)).sampleSize(effectiveSalesCount).value();\n    if (sellingAssets.length > 0) {\n      return {\n        action: 'announce_sales',\n        actions: [...cancelSales({\n          sales: cancelingSales\n        }), ...announceSales({\n          assets: sellingAssets,\n          price: discountPrice\n        })],\n        message: `Announcing \"${saleSettings.name}\" ${sellingAssets.length} sales and canceling ${cancelingSales.length} outdated sales`\n      };\n    }\n  }\n  if (cancelingSales.length > 0) {\n    return {\n      action: 'cancel_stale_sales',\n      message: `Canceling \"${saleSettings.name}\" sales`,\n      actions: cancelSales({\n        sales: cancelingSales\n      }),\n      cancelingSales\n    };\n  }\n  if (discountPrice <= saleSettings.minPrice) {\n    return {\n      action: 'wait',\n      message: `>>>>>> Current \"${saleSettings.name}\" market price ${otherSalesPrice} is too low, the limit is ${saleSettings.minPrice}`\n    };\n  }\n  return {\n    action: 'wait',\n    message: `No need to announce new sales for \"${saleSettings.name}\"`,\n    info: {\n      accountSalesCount: accountSales.length,\n      otherSalesCount: otherSales.length,\n      accountAssetsCount: accountAssets.length,\n      otherSalesPrice,\n      maxSalesCount,\n      newSalesCount,\n      effectiveSalesCount,\n      discountPrice,\n      shouldAnnounceSales\n    }\n  };\n};\nmodule.exports = announceSaleCalcNextAction;","map":{"version":3,"names":["_","require","fetchSales","fetchAssets","cancelSales","announceSales","announceSaleCalcNextAction","accountName","gameSettings","saleSettings","sales","params","collection_name","collectionName","template_id","templateId","filter","sale","mintId","sortBy","waxPrice","value","accountAssets","owner","length","action","message","name","accountSales","seller","otherSales","otherSalesPrice","staleAccountSales","cheapAccountSales","comparePrice","fixStartPrice","startPrice","allowedDiscountPriceRate","cancelingSales","uniqBy","id","maxSalesCount","targetAssetsCount","newSalesCount","maxSaleCount","effectiveSalesCount","discountPrice","discountPriceRate","shouldAnnounceSales","minPrice","sellingAssets","asset","every","assetId","sampleSize","actions","assets","price","info","accountSalesCount","otherSalesCount","accountAssetsCount","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/announceSaleCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchSales = require('./api/fetchSales');\nconst fetchAssets = require('./api/fetchAssets');\nconst cancelSales = require('./actions/cancelSales');\nconst announceSales = require('./actions/announceSales');\n\nconst announceSaleCalcNextAction = async ({\n    accountName,\n    gameSettings: {\n        saleSettings,\n    },\n}) => {\n    const sales = _(await fetchSales({\n            params: {\n                collection_name: saleSettings.collectionName,\n                template_id: saleSettings.templateId,\n                ...saleSettings.params,\n            },\n        }))\n        .filter(sale => sale.mintId !== '1')\n        .sortBy(sale => sale.waxPrice)\n        .value();\n    const accountAssets = await fetchAssets({\n        params: {\n            owner: accountName,\n            template_id: saleSettings.templateId,\n            ...saleSettings.params,\n        },\n    });\n\n    if (accountAssets.length === 0) {\n        return {\n            action: 'wait',\n            message: `[[[[[[[[ No assets \"${saleSettings.name}\" left. Cancel selling.`\n        };\n    }\n\n    const accountSales = _(sales)\n        .filter(sale => sale.seller === accountName)\n        .value();\n    const otherSales = _(sales)\n        .filter(sale => sale.seller !== accountName)\n        .value();\n    const otherSalesPrice = otherSales.length === 0\n        ? null\n        : otherSales[0].waxPrice;\n\n    let staleAccountSales = [];\n    let cheapAccountSales = [];\n    if (otherSalesPrice != null) {\n        // TODO: implement fixMinPrice to keep sales on market even\n        // if they higher than the cheapes market sale\n        staleAccountSales = _(accountSales)\n            .filter(sale => sale.waxPrice >= otherSalesPrice)\n            .value();\n        cheapAccountSales = _(accountSales)\n            .filter(sale => {\n                let comparePrice = otherSalesPrice;\n                if (saleSettings.fixStartPrice) {\n                    comparePrice = saleSettings.startPrice < otherSalesPrice\n                        ? saleSettings.startPrice\n                        : otherSalesPrice;\n                }\n\n                if (sale.waxPrice > comparePrice) {\n                    return false;\n                }\n\n                return (1 - sale.waxPrice / comparePrice) > saleSettings.allowedDiscountPriceRate;\n            })\n            .value();\n    }\n\n    const cancelingSales = _([\n        ...staleAccountSales,\n        ...cheapAccountSales,\n    ])\n        .uniqBy(sale => sale.id)\n        .value();\n    const maxSalesCount = accountAssets.length - saleSettings.targetAssetsCount;\n    const newSalesCount = saleSettings.maxSaleCount - (accountSales.length - cancelingSales.length);\n    const effectiveSalesCount = newSalesCount > maxSalesCount\n        ? maxSalesCount\n        : newSalesCount;\n    let discountPrice = otherSalesPrice == null \n        ? saleSettings.startPrice\n        : (1 - saleSettings.discountPriceRate) * otherSalesPrice;\n    if (saleSettings.fixStartPrice) {\n        if (discountPrice > saleSettings.startPrice) {\n            discountPrice = saleSettings.startPrice;\n        }\n    }\n    const shouldAnnounceSales = discountPrice > saleSettings.minPrice\n        && effectiveSalesCount > 0;\n    \n    if (shouldAnnounceSales) {\n        const sellingAssets = _(accountAssets)\n            .filter(asset => _.every(accountSales, sale => sale.assetId != asset.id))\n            .sampleSize(effectiveSalesCount)\n            .value();\n        \n        if (sellingAssets.length > 0) {\n            return {\n                action: 'announce_sales',\n                actions: [\n                    ...cancelSales({\n                        sales: cancelingSales,\n                    }),\n                    ...announceSales({\n                        assets: sellingAssets,\n                        price: discountPrice,\n                    }),\n                ],\n                message: `Announcing \"${saleSettings.name}\" ${sellingAssets.length} sales and canceling ${cancelingSales.length} outdated sales`,\n            };\n        }\n    }\n\n    if (cancelingSales.length > 0) {\n        return {\n            action: 'cancel_stale_sales',\n            message: `Canceling \"${saleSettings.name}\" sales`,\n            actions: cancelSales({\n                sales: cancelingSales,\n            }),\n            cancelingSales,\n        };\n    }\n\n    if (discountPrice <= saleSettings.minPrice) {\n        return {\n            action: 'wait',\n            message: `>>>>>> Current \"${saleSettings.name}\" market price ${otherSalesPrice} is too low, the limit is ${saleSettings.minPrice}`,\n        };\n    }\n\n    return {\n        action: 'wait',\n        message: `No need to announce new sales for \"${saleSettings.name}\"`,\n        info: {\n            accountSalesCount: accountSales.length,\n            otherSalesCount: otherSales.length,\n            accountAssetsCount: accountAssets.length,\n            otherSalesPrice,\n            maxSalesCount,\n            newSalesCount,\n            effectiveSalesCount,\n            discountPrice,\n            shouldAnnounceSales,\n        },\n    };\n};\n\nmodule.exports = announceSaleCalcNextAction;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}