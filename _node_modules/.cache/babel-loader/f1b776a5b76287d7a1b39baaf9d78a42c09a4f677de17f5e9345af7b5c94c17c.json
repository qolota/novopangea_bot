{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst fetchRealms = require('./fetchRealms');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst SCHEMAS = require('../consts/SCHEMAS');\nconst fetchUpgradeConfigs = async ({\n  cache = {}\n}) => {\n  const exchange = cache.exchange || (await fetchExchange());\n  const novoPrice = cache.novoPrice || (await fetchNovoPrice());\n  const realms = cache.realms || (await fetchRealms());\n  const upgradeConfigs = await fetchAllWaxData2({\n    params: {\n      code: CONTRACTS.GAME,\n      scope: CONTRACTS.GAME,\n      table: \"upnftcfg\"\n    },\n    customProcessor: ({\n      row\n    }) => {\n      const baseLevel = Number(row.rarity.split(' ')[1]);\n      return {\n        id: row.id,\n        schema: row.schema,\n        baseLevel,\n        nextLevel: baseLevel + 1,\n        resourceType: row.resource.toLowerCase(),\n        realm: realms.find(r => r.name === row.realm),\n        upgradeCost: convertAllCosts({\n          costs: row.cost,\n          exchange,\n          novoPrice\n        })\n      };\n    }\n  });\n  const buildingUpgradeConfigs = _(upgradeConfigs).filter(c => c.schema === SCHEMAS.BUILDING).groupBy(c => `${c.resourceType}+${c.realm.name}`).map((configs, key) => ({\n    key,\n    configs: _(configs).map(config => ({\n      ...config,\n      totalWaxUpgradeCost: _(configs).filter(c => c.baseLevel <= config.baseLevel).sumBy(c => c.upgradeCost.waxCost)\n    })).sortBy(c => c.baseLevel).value()\n  })).value();\n  const workerUpgradeConfigs = _(upgradeConfigs).filter(c => c.schema === SCHEMAS.WORKER).map(c => _.omit(c, ['resource'])).groupBy(c => c.realm.name).map((configs, key) => ({\n    key,\n    configs: _(configs).map(config => ({\n      ...config,\n      totalWaxUpgradeCost: _(configs).filter(c => c.baseLevel <= config.baseLevel).sumBy(c => c.upgradeCost.waxCost)\n    })).sortBy(c => c.baseLevel).value()\n  })).value();\n  const configs = {\n    buildings: buildingUpgradeConfigs,\n    workers: workerUpgradeConfigs\n  };\n  return configs;\n};\nmodule.exports = fetchUpgradeConfigs;","map":{"version":3,"names":["_","require","fetchAllWaxData2","CONTRACTS","fetchExchange","fetchNovoPrice","fetchRealms","convertAllCosts","SCHEMAS","fetchUpgradeConfigs","cache","exchange","novoPrice","realms","upgradeConfigs","params","code","GAME","scope","table","customProcessor","row","baseLevel","Number","rarity","split","id","schema","nextLevel","resourceType","resource","toLowerCase","realm","find","r","name","upgradeCost","costs","cost","buildingUpgradeConfigs","filter","c","BUILDING","groupBy","map","configs","key","config","totalWaxUpgradeCost","sumBy","waxCost","sortBy","value","workerUpgradeConfigs","WORKER","omit","buildings","workers","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchUpgradeConfigs.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData2 = require('../../core/fetchAllWaxData2');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchExchange = require('./fetchExchange');\nconst fetchNovoPrice = require('./fetchNovoPrice');\nconst fetchRealms = require('./fetchRealms');\nconst convertAllCosts = require('../utils/convertAllCosts');\nconst SCHEMAS = require('../consts/SCHEMAS');\n\nconst fetchUpgradeConfigs = async ({\n    cache = {}\n}) => {\n    const exchange = cache.exchange || await fetchExchange();\n    const novoPrice = cache.novoPrice || await fetchNovoPrice();\n    const realms = cache.realms || await fetchRealms();\n    const upgradeConfigs = await fetchAllWaxData2({\n        params: {\n            code: CONTRACTS.GAME,\n            scope: CONTRACTS.GAME,\n            table: \"upnftcfg\",\n        },\n        customProcessor: ({row}) => {\n            const baseLevel = Number(row.rarity.split(' ')[1]);\n\n            return {\n                id: row.id,\n                schema: row.schema,\n                baseLevel,\n                nextLevel: baseLevel + 1,\n                resourceType: row.resource.toLowerCase(),\n                realm: realms.find(r => r.name === row.realm),\n                upgradeCost: convertAllCosts({\n                    costs: row.cost,\n                    exchange,\n                    novoPrice,\n                }),\n            };\n        },\n    });\n\n    const buildingUpgradeConfigs = _(upgradeConfigs)\n        .filter(c => c.schema === SCHEMAS.BUILDING)\n        .groupBy(c => `${c.resourceType}+${c.realm.name}`)\n        .map((configs, key) => ({\n            key,\n            configs: _(configs)\n                .map(config => ({\n                    ...config,\n                    totalWaxUpgradeCost: _(configs)\n                        .filter(c => c.baseLevel <= config.baseLevel)\n                        .sumBy(c => c.upgradeCost.waxCost),\n                }))\n                .sortBy(c => c.baseLevel)\n                .value(),\n        }))\n        .value();\n    const workerUpgradeConfigs = _(upgradeConfigs)\n        .filter(c => c.schema === SCHEMAS.WORKER)\n        .map(c => _.omit(c, ['resource']))\n        .groupBy(c => c.realm.name)\n        .map((configs, key) => ({\n            key,\n            configs: _(configs)\n                .map(config => ({\n                    ...config,\n                    totalWaxUpgradeCost: _(configs)\n                        .filter(c => c.baseLevel <= config.baseLevel)\n                        .sumBy(c => c.upgradeCost.waxCost),\n                }))\n                .sortBy(c => c.baseLevel)\n                .value(),\n        }))\n        .value();\n\n    const configs = {\n        buildings: buildingUpgradeConfigs,\n        workers: workerUpgradeConfigs,\n    };\n\n    return configs;\n};\n\nmodule.exports = fetchUpgradeConfigs;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}