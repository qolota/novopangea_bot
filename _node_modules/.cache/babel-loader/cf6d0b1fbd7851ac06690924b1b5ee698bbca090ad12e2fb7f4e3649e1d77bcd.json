{"ast":null,"code":"const _ = require('lodash');\nconst fetchLastClaimTime = require(\"./api/fetchLastClaimTime\");\nconst claimFuel = require('./actions/claimFuel');\nconst fetchPlayerInfo = require('./api/fetchPlayerInfo');\nconst claimPrizes = require('./actions/claimPrizes');\nconst fetchTodayDeathRally = require('./api/fetchTodayDeathRally');\nconst fetchAssets = require('../atomicassets/api/fetchAssets');\nconst claimDeathRallyAssets = require('./actions/claimDeathRallyAssets');\nconst getTodayTimestamp = require('../utils/getTodayTimestamp');\nconst claimCharm = require('./actions/claimCharm');\nconst fetchTomorrowDeathRally = require('./api/fetchTomorrowDeathRally');\nconst WAITING_TIME = 1 * 60 * 60 * 1000;\nconst claimCalcNextAction = async ({\n  accountName\n}) => {\n  const actions = [];\n\n  // claim prizes\n  const playerInfo = await fetchPlayerInfo({\n    accountName\n  });\n  if (playerInfo.pendingPrizes.length > 0) {\n    return {\n      action: 'claim_prizes',\n      actions: [claimPrizes({\n        accountName,\n        limit: playerInfo.pendingPrizes.length\n      })]\n    };\n  }\n\n  // claim fuel\n  const lastClaimTime = await fetchLastClaimTime({\n    accountName\n  });\n  if (Date.now() - lastClaimTime > WAITING_TIME) {\n    return {\n      action: 'claim_fuel',\n      actions: [claimFuel({\n        accountName\n      })]\n    };\n  }\n\n  // claim death rally assets\n  const todayDeathRallyTeams = await fetchTodayDeathRally();\n  const todayDeathRallyAccountVehicleIds = _(todayDeathRallyTeams).filter(team => team.accountName === accountName).map(team => team.vehicleId).value();\n  const tomorrowDeathRallyTeams = await fetchTomorrowDeathRally();\n  const tomorrowDeathRallyAccountVehicleIds = _(tomorrowDeathRallyTeams).filter(team => team.accountName === accountName).map(team => team.vehicleId).value();\n  const isTodayDeathRallyEnded = _(todayDeathRallyTeams).find(deathRally => deathRally.time > 0) != null;\n  const deathRallyAccountVehicleIds = _(todayDeathRallyAccountVehicleIds).filter(vehicleId => !tomorrowDeathRallyAccountVehicleIds.find(_vehicleId => _vehicleId === vehicleId)).value();\n  if (isTodayDeathRallyEnded && deathRallyAccountVehicleIds.length > 0) {\n    const deathRallyVehicles = await fetchAssets({\n      params: {\n        ids: deathRallyAccountVehicleIds.join(',')\n      }\n    });\n    const unclaimedVehicles = _(deathRallyVehicles).filter(vehicle => vehicle.owner !== accountName).value();\n    if (unclaimedVehicles.length > 0) {\n      return {\n        action: 'claim_assets',\n        actions: [claimDeathRallyAssets({\n          accountName,\n          raceId: getTodayTimestamp()\n        })]\n      };\n    }\n  }\n\n  // claim charm\n  const unclaimedCharmBalance = playerInfo.balances.find(balance => balance.key === 'CHARM').value;\n  if (unclaimedCharmBalance > 0) {\n    return {\n      action: 'claim_charm',\n      actions: [claimCharm({\n        accountName\n      })]\n    };\n  }\n\n  // if (actions.length > 0) {\n  //     return {\n  //         action: 'claim',\n  //         actions,\n  //     };\n  // }\n\n  return {\n    action: 'wait',\n    message: `Claimed already`\n  };\n};\nmodule.exports = claimCalcNextAction;","map":{"version":3,"names":["_","require","fetchLastClaimTime","claimFuel","fetchPlayerInfo","claimPrizes","fetchTodayDeathRally","fetchAssets","claimDeathRallyAssets","getTodayTimestamp","claimCharm","fetchTomorrowDeathRally","WAITING_TIME","claimCalcNextAction","accountName","actions","playerInfo","pendingPrizes","length","action","limit","lastClaimTime","Date","now","todayDeathRallyTeams","todayDeathRallyAccountVehicleIds","filter","team","map","vehicleId","value","tomorrowDeathRallyTeams","tomorrowDeathRallyAccountVehicleIds","isTodayDeathRallyEnded","find","deathRally","time","deathRallyAccountVehicleIds","_vehicleId","deathRallyVehicles","params","ids","join","unclaimedVehicles","vehicle","owner","raceId","unclaimedCharmBalance","balances","balance","key","message","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novarallywax/claimCalcNextAction.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchLastClaimTime = require(\"./api/fetchLastClaimTime\");\nconst claimFuel = require('./actions/claimFuel');\nconst fetchPlayerInfo = require('./api/fetchPlayerInfo');\nconst claimPrizes = require('./actions/claimPrizes');\nconst fetchTodayDeathRally = require('./api/fetchTodayDeathRally');\nconst fetchAssets = require('../atomicassets/api/fetchAssets');\nconst claimDeathRallyAssets = require('./actions/claimDeathRallyAssets');\nconst getTodayTimestamp = require('../utils/getTodayTimestamp');\nconst claimCharm = require('./actions/claimCharm');\nconst fetchTomorrowDeathRally = require('./api/fetchTomorrowDeathRally');\n\nconst WAITING_TIME = 1 * 60 * 60 * 1000;\n\nconst claimCalcNextAction = async ({\n    accountName,\n}) => {\n    const actions = [];\n\n    // claim prizes\n    const playerInfo = await fetchPlayerInfo({\n        accountName,\n    });\n    if (playerInfo.pendingPrizes.length > 0) {\n        return {\n            action: 'claim_prizes',\n            actions: [\n                claimPrizes({\n                    accountName,\n                    limit: playerInfo.pendingPrizes.length,\n                })\n            ],\n        };\n    }\n\n    // claim fuel\n    const lastClaimTime = await fetchLastClaimTime({\n        accountName,\n    });\n    if ((Date.now() - lastClaimTime) > WAITING_TIME) {\n        return {\n            action: 'claim_fuel',\n            actions: [\n                claimFuel({\n                    accountName,\n                })\n            ],\n        }\n    }\n\n    // claim death rally assets\n    const todayDeathRallyTeams = await fetchTodayDeathRally();\n    const todayDeathRallyAccountVehicleIds = _(todayDeathRallyTeams)\n        .filter(team => team.accountName === accountName)\n        .map(team => team.vehicleId)\n        .value();\n    const tomorrowDeathRallyTeams = await fetchTomorrowDeathRally();\n    const tomorrowDeathRallyAccountVehicleIds = _(tomorrowDeathRallyTeams)\n        .filter(team => team.accountName === accountName)\n        .map(team => team.vehicleId)\n        .value();\n    const isTodayDeathRallyEnded = _(todayDeathRallyTeams)\n        .find(deathRally => deathRally.time > 0) != null;\n    const deathRallyAccountVehicleIds = _(todayDeathRallyAccountVehicleIds)\n        .filter(vehicleId => !tomorrowDeathRallyAccountVehicleIds.find(_vehicleId => _vehicleId === vehicleId))\n        .value();\n    if (isTodayDeathRallyEnded && deathRallyAccountVehicleIds.length > 0) {\n        const deathRallyVehicles = await fetchAssets({\n            params: {\n                ids: deathRallyAccountVehicleIds.join(','),\n            },\n        });\n        const unclaimedVehicles = _(deathRallyVehicles)\n            .filter(vehicle => vehicle.owner !== accountName)\n            .value();\n\n        if (unclaimedVehicles.length > 0) {\n            return {\n                action: 'claim_assets',\n                actions: [\n                    claimDeathRallyAssets({\n                        accountName,\n                        raceId: getTodayTimestamp(),\n                    })\n                ],\n            };\n        }\n    }\n\n    // claim charm\n    const unclaimedCharmBalance = playerInfo.balances.find(balance => balance.key === 'CHARM').value;\n    if (unclaimedCharmBalance > 0) {\n        return {\n            action: 'claim_charm',\n            actions: [\n                claimCharm({\n                    accountName,\n                }),\n            ],\n        }\n    }\n\n    // if (actions.length > 0) {\n    //     return {\n    //         action: 'claim',\n    //         actions,\n    //     };\n    // }\n\n    return {\n        action: 'wait',\n        message: `Claimed already`,\n    };\n};\n\nmodule.exports = claimCalcNextAction;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}