{"ast":null,"code":"import _regeneratorRuntime from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"/Users/germangurov/projects/wax_bot/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _=require('lodash');var fetchLands=require(\"./fetchLands\");var fetchAccountLands=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref){var accountName,_ref$cache,cache,lands,sets;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:accountName=_ref.accountName,_ref$cache=_ref.cache,cache=_ref$cache===void 0?{}:_ref$cache;_context.t0=cache.lands;if(_context.t0){_context.next=6;break;}_context.next=5;return fetchLands({});case 5:_context.t0=_context.sent;case 6:lands=_context.t0;sets=_(lands).groupBy(function(land){return land.district.realm.name;}).map(function(lands,realmName){var qualifiedLands=_(lands).filter(function(land){var townhallAccount=land.district.accounts.find(function(account){return account.accountName===accountName;});if(townhallAccount==null){return false;}return townhallAccount.stakedNovo>=200;}).value();var ownLandsAvailable=_(qualifiedLands).filter(function(land){return land.owner===accountName;}).filter(function(land){return land.rentExpireTime===0;}).filter(function(land){return land.district.level>=2;}).sortBy(function(land){return-land.rentPriceObsd;}).value();var externalLandsAvailable=_(qualifiedLands).filter(function(land){return land.owner!==accountName;}).filter(function(land){return!land.isOwnerOccupied;}).filter(function(land){return land.rentExpireTime===0;}).filter(function(land){return land.isAvailableForRent;}).filter(function(land){return land.district.level>=2;}).sortBy(function(land){return-land.rentPriceObsd;}).value();var bestLands=_([].concat(_toConsumableArray(ownLandsAvailable),_toConsumableArray(externalLandsAvailable))).map(function(land){if(land.owner===accountName){return _objectSpread(_objectSpread({},land),{},{rentPriceObsd:land.ownRentPriceObsd});}return _objectSpread(_objectSpread({},land),{},{rentPriceObsd:land.externalRentPriceObsd});}).sortBy(function(land){return-land.rentPriceObsd;}).value();return{realmName:realmName,bestLands:bestLands,ownLandsAvailable:ownLandsAvailable,externalLandsAvailable:externalLandsAvailable};}).value();return _context.abrupt(\"return\",{lands:sets});case 9:case\"end\":return _context.stop();}},_callee);}));return function fetchAccountLands(_x){return _ref2.apply(this,arguments);};}();module.exports=fetchAccountLands;","map":{"version":3,"names":["_","require","fetchLands","fetchAccountLands","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","accountName","_ref$cache","cache","lands","sets","wrap","_callee$","_context","prev","next","t0","sent","groupBy","land","district","realm","name","map","realmName","qualifiedLands","filter","townhallAccount","accounts","find","account","stakedNovo","value","ownLandsAvailable","owner","rentExpireTime","level","sortBy","rentPriceObsd","externalLandsAvailable","isOwnerOccupied","isAvailableForRent","bestLands","concat","_toConsumableArray","_objectSpread","ownRentPriceObsd","externalRentPriceObsd","abrupt","stop","_x","apply","arguments","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/novopangea/api/fetchAccountLands.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchLands = require(\"./fetchLands\");\n\nconst fetchAccountLands = async ({\n    accountName,\n    cache = {},\n}) => {\n    const lands = cache.lands || await fetchLands({});\n\n    const sets = _(lands)\n        .groupBy(land => land.district.realm.name)\n        .map((lands, realmName) => {\n            const qualifiedLands = _(lands)\n                .filter(land => {\n                    const townhallAccount = land.district.accounts.find(account => account.accountName === accountName);\n\n                    if (townhallAccount == null) {\n                        return false;\n                    }\n\n                    return townhallAccount.stakedNovo >= 200;\n                })\n                .value();\n            const ownLandsAvailable = _(qualifiedLands)\n                .filter(land => land.owner === accountName)\n                .filter(land => land.rentExpireTime === 0)\n                .filter(land => land.district.level >= 2)\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n\n            const externalLandsAvailable = _(qualifiedLands)\n                .filter(land => land.owner !== accountName)\n                .filter(land => !land.isOwnerOccupied)\n                .filter(land => land.rentExpireTime === 0)\n                .filter(land => land.isAvailableForRent)\n                .filter(land => land.district.level >= 2)\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n\n            const bestLands = _([\n                ...ownLandsAvailable,\n                ...externalLandsAvailable,\n            ])\n                .map(land => {\n                    if (land.owner === accountName) {\n                        return {\n                            ...land,\n                            rentPriceObsd: land.ownRentPriceObsd,\n                        };\n                    }\n\n                    return {\n                        ...land,\n                        rentPriceObsd: land.externalRentPriceObsd,\n                    };\n                })\n                .sortBy(land => -land.rentPriceObsd)\n                .value();\n            \n            return {\n                realmName,\n                bestLands,\n                ownLandsAvailable,\n                externalLandsAvailable,\n            };\n        })\n        .value();\n\n        return {\n            lands: sets,\n        };\n};\n\nmodule.exports = fetchAccountLands;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}