{"ast":null,"code":"const _ = require('lodash');\nconst fetchForecasts = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*'\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100000',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'forecasts',\n      upper_bound: null\n    }),\n    method: 'POST'\n  });\n  const data = await res.json();\n  if (data.rows.length === 0) {\n    return [];\n  }\n  const forecasts = _(data.rows).map(forecast => ({\n    id: forecast.id,\n    startAt: new Date(`${forecast.start_at}Z`),\n    endAt: new Date(`${forecast.end_at}Z`),\n    plantsClaimpower: _(forecast.plant_claimpower).map(pc => ({\n      plantId: pc.plant_id,\n      claimPower: Number(pc.claim_power)\n    })).value(),\n    seasonId: forecast.season_id,\n    weatherId: forecast.weather_id,\n    temperature: forecast.temperature\n  })).map(forecast => ({\n    ...forecast,\n    hasStarted: Date.now() > forecast.startAt.getTime(),\n    hasEnded: Date.now() > forecast.endAt.getTime()\n  })).map(forecast => _(forecast.plantsClaimpower).map(pc => ({\n    ...pc,\n    ..._.omit(forecast, ['plantsClaimpower'])\n  })).value()).flatten().filter(forecast => !forecast.hasEnded).groupBy(forecast => forecast.plantId).value();\n  return forecasts;\n};\nmodule.exports = fetchForecasts;","map":{"version":3,"names":["_","require","fetchForecasts","res","fetch","headers","accept","body","JSON","stringify","code","index_position","json","key_type","limit","lower_bound","reverse","scope","show_payer","table","upper_bound","method","data","rows","length","forecasts","map","forecast","id","startAt","Date","start_at","endAt","end_at","plantsClaimpower","plant_claimpower","pc","plantId","plant_id","claimPower","Number","claim_power","value","seasonId","season_id","weatherId","weather_id","temperature","hasStarted","now","getTime","hasEnded","omit","flatten","filter","groupBy","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/beastgarden/plants/api/fetchForecasts.js"],"sourcesContent":["const _ = require('lodash');\n\nconst fetchForecasts = async () => {\n  const res = await fetch('https://wax.greymass.com/v1/chain/get_table_rows', {\n    headers: {\n      accept: '*/*',\n    },\n    body: JSON.stringify({\n      code: 'beastharvest',\n      index_position: 1,\n      json: true,\n      key_type: '',\n      limit: '100000',\n      lower_bound: null,\n      reverse: false,\n      scope: 'beastharvest',\n      show_payer: false,\n      table: 'forecasts',\n      upper_bound: null,\n    }),\n    method: 'POST',\n  });\n\n  const data = await res.json();\n\n  if (data.rows.length === 0) {\n    return [];\n  }\n\n  const forecasts = _(data.rows)\n    .map((forecast) => ({\n      id: forecast.id,\n      startAt: new Date(`${forecast.start_at}Z`),\n      endAt: new Date(`${forecast.end_at}Z`),\n      plantsClaimpower: _(forecast.plant_claimpower)\n        .map((pc) => ({\n          plantId: pc.plant_id,\n          claimPower: Number(pc.claim_power),\n        }))\n        .value(),\n      seasonId: forecast.season_id,\n      weatherId: forecast.weather_id,\n      temperature: forecast.temperature,\n    }))\n    .map((forecast) => ({\n      ...forecast,\n      hasStarted: Date.now() > forecast.startAt.getTime(),\n      hasEnded: Date.now() > forecast.endAt.getTime(),\n    }))\n    .map((forecast) =>\n      _(forecast.plantsClaimpower)\n        .map((pc) => ({\n          ...pc,\n          ..._.omit(forecast, ['plantsClaimpower']),\n        }))\n        .value(),\n    )\n    .flatten()\n    .filter((forecast) => !forecast.hasEnded)\n    .groupBy((forecast) => forecast.plantId)\n    .value();\n  return forecasts;\n};\n\nmodule.exports = fetchForecasts;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,kDAAkD,EAAE;IAC1EC,OAAO,EAAE;MACPC,MAAM,EAAE;IACV,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,IAAI,EAAE,cAAc;MACpBC,cAAc,EAAE,CAAC;MACjBC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,QAAQ;MACfC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,cAAc;MACrBC,UAAU,EAAE,KAAK;MACjBC,KAAK,EAAE,WAAW;MAClBC,WAAW,EAAE;IACf,CAAC,CAAC;IACFC,MAAM,EAAE;EACV,CAAC,CAAC;EAEF,MAAMC,IAAI,GAAG,MAAMnB,GAAG,CAACS,IAAI,CAAC,CAAC;EAE7B,IAAIU,IAAI,CAACC,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1B,OAAO,EAAE;EACX;EAEA,MAAMC,SAAS,GAAGzB,CAAC,CAACsB,IAAI,CAACC,IAAI,CAAC,CAC3BG,GAAG,CAAEC,QAAQ,KAAM;IAClBC,EAAE,EAAED,QAAQ,CAACC,EAAE;IACfC,OAAO,EAAE,IAAIC,IAAI,CAAE,GAAEH,QAAQ,CAACI,QAAS,GAAE,CAAC;IAC1CC,KAAK,EAAE,IAAIF,IAAI,CAAE,GAAEH,QAAQ,CAACM,MAAO,GAAE,CAAC;IACtCC,gBAAgB,EAAElC,CAAC,CAAC2B,QAAQ,CAACQ,gBAAgB,CAAC,CAC3CT,GAAG,CAAEU,EAAE,KAAM;MACZC,OAAO,EAAED,EAAE,CAACE,QAAQ;MACpBC,UAAU,EAAEC,MAAM,CAACJ,EAAE,CAACK,WAAW;IACnC,CAAC,CAAC,CAAC,CACFC,KAAK,CAAC,CAAC;IACVC,QAAQ,EAAEhB,QAAQ,CAACiB,SAAS;IAC5BC,SAAS,EAAElB,QAAQ,CAACmB,UAAU;IAC9BC,WAAW,EAAEpB,QAAQ,CAACoB;EACxB,CAAC,CAAC,CAAC,CACFrB,GAAG,CAAEC,QAAQ,KAAM;IAClB,GAAGA,QAAQ;IACXqB,UAAU,EAAElB,IAAI,CAACmB,GAAG,CAAC,CAAC,GAAGtB,QAAQ,CAACE,OAAO,CAACqB,OAAO,CAAC,CAAC;IACnDC,QAAQ,EAAErB,IAAI,CAACmB,GAAG,CAAC,CAAC,GAAGtB,QAAQ,CAACK,KAAK,CAACkB,OAAO,CAAC;EAChD,CAAC,CAAC,CAAC,CACFxB,GAAG,CAAEC,QAAQ,IACZ3B,CAAC,CAAC2B,QAAQ,CAACO,gBAAgB,CAAC,CACzBR,GAAG,CAAEU,EAAE,KAAM;IACZ,GAAGA,EAAE;IACL,GAAGpC,CAAC,CAACoD,IAAI,CAACzB,QAAQ,EAAE,CAAC,kBAAkB,CAAC;EAC1C,CAAC,CAAC,CAAC,CACFe,KAAK,CAAC,CACX,CAAC,CACAW,OAAO,CAAC,CAAC,CACTC,MAAM,CAAE3B,QAAQ,IAAK,CAACA,QAAQ,CAACwB,QAAQ,CAAC,CACxCI,OAAO,CAAE5B,QAAQ,IAAKA,QAAQ,CAACU,OAAO,CAAC,CACvCK,KAAK,CAAC,CAAC;EACV,OAAOjB,SAAS;AAClB,CAAC;AAED+B,MAAM,CAACC,OAAO,GAAGvD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}