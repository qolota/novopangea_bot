{"ast":null,"code":"const _ = require('lodash');\nconst fetchSalesWaxData = require('./api/fetchSalesWaxData');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst fetchAllWaxData2 = require('../core/fetchAllWaxData2');\nconst CONTRACTS = require('./consts/CONTRACTS');\nconst fetchCollectionsWaxData = require('./api/fetchCollectionsWaxData');\nconst deserializeData = require('./utils/deserializeData');\n\n// const START_SALE_ID = 37170154;\nconst START_SALE_ID = 129579380;\nlet lowerBound = START_SALE_ID;\nlet collections = [];\nconst buyAssetsCalcNextActions = async ({\n  accountName,\n  gameSettings\n}) => {\n  const buyAssetsList = ACCOUNT_CAPABILITIES[accountName].atomichub_buy_assets_list || [];\n  const selectedCollectionNames = _(buyAssetsList).map(settings => settings.params.collectionName).compact().uniq().value();\n  if (collections.length === 0) {\n    for (let i = 0; i < selectedCollectionNames.length; i++) {\n      const nextCollections = await fetchCollectionsWaxData({\n        collectionName: selectedCollectionNames[i]\n      });\n      collections = [...collections, ...nextCollections];\n    }\n  }\n  const {\n    sales: nextSales,\n    lowerBound: nextlowerBound\n  } = await fetchSalesWaxData({\n    lowerBound\n  });\n  lowerBound = nextlowerBound;\n  const selectedNextSales = _(nextSales).filter(sale => selectedCollectionNames.includes(sale.collectionName)).filter(sale => sale.assetIds.length === 1).filter(sale => sale.sellerAccountName !== accountName).value();\n  const sales = [];\n  for (let i = 0; i < selectedNextSales.length; i++) {\n    const sale = selectedNextSales[i];\n    const assetId = sale.assetIds[0];\n    let assets = _(await fetchAllWaxData2({\n      params: {\n        code: CONTRACTS.ATOMIC_ASSETS,\n        scope: sale.sellerAccountName,\n        table: 'assets',\n        lower_bound: assetId,\n        upper_bound: assetId\n      },\n      customProcessor: ({\n        row\n      }) => {\n        return {\n          id: row.asset_id,\n          collectionName: row.collection_name,\n          schemaName: row.schema_name,\n          templateId: row.template_id,\n          ramPayer: row.ram_payer,\n          backedTokens: _(row.backed_tokens).map(row => {\n            const [value, symbol] = row.split(' ');\n            return {\n              value: Number(value),\n              symbol\n            };\n          }).value(),\n          immutableSerializedData: row.immutable_serialized_data,\n          mutableSerializedData: row.mutable_serialized_data,\n          params: {\n            collectionName: row.collection_name,\n            schemaName: row.schema_name,\n            templateId: row.template_id\n          }\n        };\n      }\n    })).map(asset => {\n      const collection = collections.find(collection => collection.collectionName === asset.collectionName);\n      const template = collection.templates.find(template => template.id === asset.templateId);\n      const schema = collection.schemas.find(schema => schema.schemaName === asset.schemaName);\n      const templateImmutableData = deserializeData({\n        schema: schema.templateSchema,\n        serializedData: asset.immutableSerializedData\n      });\n      const assetImmutableData = template.immutableData;\n      const assetMutableData = deserializeData({\n        schema: schema.templateSchema,\n        serializedData: asset.mutableSerializedData\n      });\n      return {\n        ...sale,\n        asset: {\n          ..._.omit(asset, ['immutableSerializedData', 'mutableSerializedData']),\n          params: {\n            ...templateImmutableData,\n            ...assetImmutableData,\n            ...assetMutableData,\n            ...asset.params\n          }\n        }\n      };\n    }).value();\n    sales.push(assets[0]);\n  }\n  const saleGroups = _(buyAssetsList).map(settings => {\n    return {\n      settings,\n      sales: _(sales).filter(sale => _.isMatch(sale.asset.params, settings.params)).filter(sale => sale.waxPrice <= settings.buySettings.maxPrice).value()\n    };\n  }).filter(sales => sales.sales.length > 0).value();\n  return {\n    action: 'wait',\n    message: `New sales: ${nextSales.length}, target sales ${sales.length}, target sale groups: ${saleGroups.length}`,\n    info: saleGroups\n  };\n};\n\n// buyAssetsCalcNextActions({\n//     accountName: '5oyiw.wam',\n// });\n\nmodule.exports = buyAssetsCalcNextActions;","map":{"version":3,"names":["_","require","fetchSalesWaxData","ACCOUNT_CAPABILITIES","fetchAllWaxData2","CONTRACTS","fetchCollectionsWaxData","deserializeData","START_SALE_ID","lowerBound","collections","buyAssetsCalcNextActions","accountName","gameSettings","buyAssetsList","atomichub_buy_assets_list","selectedCollectionNames","map","settings","params","collectionName","compact","uniq","value","length","i","nextCollections","sales","nextSales","nextlowerBound","selectedNextSales","filter","sale","includes","assetIds","sellerAccountName","assetId","assets","code","ATOMIC_ASSETS","scope","table","lower_bound","upper_bound","customProcessor","row","id","asset_id","collection_name","schemaName","schema_name","templateId","template_id","ramPayer","ram_payer","backedTokens","backed_tokens","symbol","split","Number","immutableSerializedData","immutable_serialized_data","mutableSerializedData","mutable_serialized_data","asset","collection","find","template","templates","schema","schemas","templateImmutableData","templateSchema","serializedData","assetImmutableData","immutableData","assetMutableData","omit","push","saleGroups","isMatch","waxPrice","buySettings","maxPrice","action","message","info","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/atomicassets/buyAssetsCalcNextActions.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchSalesWaxData = require('./api/fetchSalesWaxData');\nconst ACCOUNT_CAPABILITIES = require('../configs/ACCOUNT_CAPABILITIES');\nconst fetchAllWaxData2 = require('../core/fetchAllWaxData2');\nconst CONTRACTS = require('./consts/CONTRACTS');\nconst fetchCollectionsWaxData = require('./api/fetchCollectionsWaxData');\nconst deserializeData = require('./utils/deserializeData');\n\n// const START_SALE_ID = 37170154;\nconst START_SALE_ID = 129579380;\nlet lowerBound = START_SALE_ID;\nlet collections = [];\n\nconst buyAssetsCalcNextActions = async ({\n    accountName,\n    gameSettings,\n}) => {\n    const buyAssetsList = ACCOUNT_CAPABILITIES[accountName].atomichub_buy_assets_list || [];\n    const selectedCollectionNames = _(buyAssetsList)\n        .map(settings => settings.params.collectionName)\n        .compact()\n        .uniq()\n        .value();\n    if (collections.length === 0) {\n        for (let i = 0; i < selectedCollectionNames.length; i++) {\n            const nextCollections = await fetchCollectionsWaxData({\n                collectionName: selectedCollectionNames[i],\n            });\n            collections = [\n                ...collections,\n                ...nextCollections,\n            ];\n        }\n    }\n\n    const {\n        sales: nextSales,\n        lowerBound: nextlowerBound,\n    } = await fetchSalesWaxData({\n        lowerBound,\n    });\n    lowerBound = nextlowerBound;\n    const selectedNextSales = _(nextSales)\n        .filter(sale => selectedCollectionNames.includes(sale.collectionName))\n        .filter(sale => sale.assetIds.length === 1)\n        .filter(sale => sale.sellerAccountName !== accountName)\n        .value();\n    const sales = [];\n    for (let i = 0; i < selectedNextSales.length; i++) {\n        const sale = selectedNextSales[i];\n        const assetId = sale.assetIds[0];\n        let assets = _(await fetchAllWaxData2({\n            params: {\n                code: CONTRACTS.ATOMIC_ASSETS,\n                scope: sale.sellerAccountName,\n                table: 'assets',\n                lower_bound: assetId,\n                upper_bound: assetId,\n            },\n            customProcessor: ({row}) => {\n                return {\n                    id: row.asset_id,\n                    collectionName: row.collection_name,\n                    schemaName: row.schema_name,\n                    templateId: row.template_id,\n                    ramPayer: row.ram_payer,\n                    backedTokens: _(row.backed_tokens)\n                        .map(row => {\n                            const [\n                                value,\n                                symbol,\n                            ] = row.split(' ');\n    \n                            return {\n                                value: Number(value),\n                                symbol,\n                            };\n                        })\n                        .value(),\n                    immutableSerializedData: row.immutable_serialized_data,\n                    mutableSerializedData: row.mutable_serialized_data,\n                    params: {\n                        collectionName: row.collection_name,\n                        schemaName: row.schema_name,\n                        templateId: row.template_id,\n                    },\n                };\n            },\n        }))\n            .map(asset => {\n                const collection = collections\n                    .find(collection => collection.collectionName === asset.collectionName);\n                const template = collection.templates\n                    .find(template => template.id === asset.templateId);\n                const schema = collection.schemas\n                    .find(schema => schema.schemaName === asset.schemaName);\n                const templateImmutableData = deserializeData({\n                    schema: schema.templateSchema,\n                    serializedData: asset.immutableSerializedData,\n                });\n                const assetImmutableData = template.immutableData;\n                const assetMutableData = deserializeData({\n                    schema: schema.templateSchema,\n                    serializedData: asset.mutableSerializedData,\n                });\n\n                return {\n                    ...sale,\n                    asset: {\n                        ..._.omit(asset, [\n                            'immutableSerializedData',\n                            'mutableSerializedData',\n                        ]),\n                        params: {\n                            ...templateImmutableData,\n                            ...assetImmutableData,\n                            ...assetMutableData,\n                            ...asset.params,\n                        },\n                    },\n                };\n            })\n            .value();\n        sales.push(assets[0]);\n    }\n\n    const saleGroups = _(buyAssetsList)\n        .map(settings => {\n            return {\n                settings,\n                sales: _(sales)\n                    .filter(sale => _.isMatch(sale.asset.params, settings.params))\n                    .filter(sale => sale.waxPrice <= settings.buySettings.maxPrice)\n                    .value(),\n            };\n        })\n        .filter(sales => sales.sales.length > 0)\n        .value();\n    \n    return {\n        action: 'wait',\n        message: `New sales: ${nextSales.length}, target sales ${sales.length}, target sale groups: ${saleGroups.length}`,\n        info: saleGroups,\n    };\n};\n\n// buyAssetsCalcNextActions({\n//     accountName: '5oyiw.wam',\n// });\n\nmodule.exports = buyAssetsCalcNextActions;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}