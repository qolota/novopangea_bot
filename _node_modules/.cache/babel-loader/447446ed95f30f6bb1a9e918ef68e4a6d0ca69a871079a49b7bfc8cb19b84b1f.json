{"ast":null,"code":"const _ = require('lodash');\nconst fetchAllWaxData = require('../../core/fetchAllWaxData');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst convertDex = (dex, min) => {\n  const [precision, symbol] = dex.sym.split(',');\n  const [minValue] = min.split(' ');\n  return {\n    precision: Number(precision),\n    symbol,\n    contract: dex.contract,\n    fullTokenName: `${symbol}+${dex.contract}`,\n    min: Number(minValue)\n  };\n};\nconst groupDexs = (dexs, index) => _(dexs).groupBy(dex => `${dex.symbols[index].symbol}+${dex.symbols[index].contract}`).value();\nconst fetchDEXs = async () => {\n  const dexs = await fetchAllWaxData({\n    params: {\n      code: CONTRACTS.DEX,\n      scope: CONTRACTS.DEX,\n      table: \"markets\"\n    },\n    customProcessor: async ({\n      row\n    }) => {\n      const dex = {\n        id: row.id,\n        fee: row.fee / 100 / 100,\n        isFrozen: row.frozen,\n        symbols: [convertDex(row.base_token, row.min_buy), convertDex(row.quote_token, row.min_sell)]\n      };\n      return dex;\n    }\n  });\n  const groupedDexs = _.mergeWith(groupDexs(dexs, 0), groupDexs(dexs, 1), (objValue, srcValue) => {\n    if (_.isArray(objValue)) {\n      return objValue.concat(srcValue);\n    }\n  });\n  return groupedDexs;\n};\nmodule.exports = fetchDEXs;","map":{"version":3,"names":["_","require","fetchAllWaxData","CONTRACTS","convertDex","dex","min","precision","symbol","sym","split","minValue","Number","contract","fullTokenName","groupDexs","dexs","index","groupBy","symbols","value","fetchDEXs","params","code","DEX","scope","table","customProcessor","row","id","fee","isFrozen","frozen","base_token","min_buy","quote_token","min_sell","groupedDexs","mergeWith","objValue","srcValue","isArray","concat","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/api/fetchDEXs.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchAllWaxData = require('../../core/fetchAllWaxData');\nconst CONTRACTS = require('../consts/CONTRACTS');\n\nconst convertDex = (dex, min) => {\n    const [precision, symbol] = dex.sym.split(',');\n    const [minValue] = min.split(' ');\n\n    return {\n        precision: Number(precision),\n        symbol,\n        contract: dex.contract,\n        fullTokenName: `${symbol}+${dex.contract}`,\n        min: Number(minValue),\n    };\n};\n\nconst groupDexs = (dexs, index) => _(dexs)\n    .groupBy(dex => `${dex.symbols[index].symbol}+${dex.symbols[index].contract}`)\n    .value();\n\nconst fetchDEXs = async () => {\n  const dexs = await fetchAllWaxData({\n    params: {\n        code: CONTRACTS.DEX,\n        scope: CONTRACTS.DEX,\n        table: \"markets\",\n    },\n    customProcessor: async ({row}) => {\n        const dex = {\n          id: row.id,\n          fee: row.fee/100/100,\n          isFrozen: row.frozen,\n          symbols: [\n              convertDex(row.base_token, row.min_buy),\n              convertDex(row.quote_token, row.min_sell),\n          ],\n        };\n\n        return dex;\n    },\n  });\n\n  const groupedDexs = _.mergeWith(\n      groupDexs(dexs, 0),\n      groupDexs(dexs, 1),\n      (objValue, srcValue) => {\n        if (_.isArray(objValue)) {\n        return objValue.concat(srcValue);\n        }\n      }\n    );\n\n   return groupedDexs;\n};\n\nmodule.exports = fetchDEXs;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,eAAe,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAC7D,MAAME,SAAS,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAEhD,MAAMG,UAAU,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7B,MAAM,CAACC,SAAS,EAAEC,MAAM,CAAC,GAAGH,GAAG,CAACI,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC;EAC9C,MAAM,CAACC,QAAQ,CAAC,GAAGL,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;EAEjC,OAAO;IACHH,SAAS,EAAEK,MAAM,CAACL,SAAS,CAAC;IAC5BC,MAAM;IACNK,QAAQ,EAAER,GAAG,CAACQ,QAAQ;IACtBC,aAAa,EAAG,GAAEN,MAAO,IAAGH,GAAG,CAACQ,QAAS,EAAC;IAC1CP,GAAG,EAAEM,MAAM,CAACD,QAAQ;EACxB,CAAC;AACL,CAAC;AAED,MAAMI,SAAS,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAKjB,CAAC,CAACgB,IAAI,CAAC,CACrCE,OAAO,CAACb,GAAG,IAAK,GAAEA,GAAG,CAACc,OAAO,CAACF,KAAK,CAAC,CAACT,MAAO,IAAGH,GAAG,CAACc,OAAO,CAACF,KAAK,CAAC,CAACJ,QAAS,EAAC,CAAC,CAC7EO,KAAK,CAAC,CAAC;AAEZ,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAML,IAAI,GAAG,MAAMd,eAAe,CAAC;IACjCoB,MAAM,EAAE;MACJC,IAAI,EAAEpB,SAAS,CAACqB,GAAG;MACnBC,KAAK,EAAEtB,SAAS,CAACqB,GAAG;MACpBE,KAAK,EAAE;IACX,CAAC;IACDC,eAAe,EAAE,MAAAA,CAAO;MAACC;IAAG,CAAC,KAAK;MAC9B,MAAMvB,GAAG,GAAG;QACVwB,EAAE,EAAED,GAAG,CAACC,EAAE;QACVC,GAAG,EAAEF,GAAG,CAACE,GAAG,GAAC,GAAG,GAAC,GAAG;QACpBC,QAAQ,EAAEH,GAAG,CAACI,MAAM;QACpBb,OAAO,EAAE,CACLf,UAAU,CAACwB,GAAG,CAACK,UAAU,EAAEL,GAAG,CAACM,OAAO,CAAC,EACvC9B,UAAU,CAACwB,GAAG,CAACO,WAAW,EAAEP,GAAG,CAACQ,QAAQ,CAAC;MAE/C,CAAC;MAED,OAAO/B,GAAG;IACd;EACF,CAAC,CAAC;EAEF,MAAMgC,WAAW,GAAGrC,CAAC,CAACsC,SAAS,CAC3BvB,SAAS,CAACC,IAAI,EAAE,CAAC,CAAC,EAClBD,SAAS,CAACC,IAAI,EAAE,CAAC,CAAC,EAClB,CAACuB,QAAQ,EAAEC,QAAQ,KAAK;IACtB,IAAIxC,CAAC,CAACyC,OAAO,CAACF,QAAQ,CAAC,EAAE;MACzB,OAAOA,QAAQ,CAACG,MAAM,CAACF,QAAQ,CAAC;IAChC;EACF,CACF,CAAC;EAEF,OAAOH,WAAW;AACrB,CAAC;AAEDM,MAAM,CAACC,OAAO,GAAGvB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}