{"ast":null,"code":"const _ = require('lodash');\nconst fetchWaxData = require('./fetchWaxData');\nconst DEFAULT_LIMIT = 1000;\nconst START_ID = 1;\nconst fetchAllWaxData = async ({\n  params,\n  customProcessor = async ({\n    row\n  }) => row\n}) => {\n  if (params.limit === null) {\n    throw new Error(`limit cannot be 'null'`);\n  }\n  const limit = params.limit || DEFAULT_LIMIT;\n  let nextId = params.lower_bound || START_ID;\n  let rows = [];\n  while (true) {\n    console.log(`Loading wax data ${params.code}:${params.table} from ${nextId} +${DEFAULT_LIMIT}`);\n    const nextRows = await fetchWaxData({\n      limit,\n      lower_bound: nextId,\n      upper_bound: null,\n      show_payer: false,\n      reverse: false,\n      json: true,\n      key_type: \"\",\n      index_position: 1,\n      ...params\n    });\n    if (nextRows.length === 0) {\n      return rows;\n    }\n    const processedNextRows = [];\n    for (let rowIndex = 0; rowIndex < nextRows.length; rowIndex++) {\n      const nextRow = nextRows[rowIndex];\n      const processedNextRow = await customProcessor({\n        row: nextRow\n      });\n      processedNextRows.push(processedNextRow);\n    }\n    rows = [...rows, ...processedNextRows];\n    const lastRow = nextRows[nextRows.length - 1];\n    nextId = lastRow.id + 1;\n  }\n};\nmodule.exports = fetchAllWaxData;","map":{"version":3,"names":["_","require","fetchWaxData","DEFAULT_LIMIT","START_ID","fetchAllWaxData","params","customProcessor","row","limit","Error","nextId","lower_bound","rows","console","log","code","table","nextRows","upper_bound","show_payer","reverse","json","key_type","index_position","length","processedNextRows","rowIndex","nextRow","processedNextRow","push","lastRow","id","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/core/fetchAllWaxData.js"],"sourcesContent":["const _ = require('lodash');\nconst fetchWaxData = require('./fetchWaxData');\n\nconst DEFAULT_LIMIT = 1000;\nconst START_ID = 1;\n\nconst fetchAllWaxData = async ({\n    params,\n    customProcessor = async ({row}) => row,\n}) => {\n    if (params.limit === null) {\n        throw new Error(`limit cannot be 'null'`);\n    }\n\n    const limit = params.limit || DEFAULT_LIMIT;\n    let nextId = params.lower_bound || START_ID;\n    let rows = [];\n\n    while (true) {\n        console.log(`Loading wax data ${params.code}:${params.table} from ${nextId} +${DEFAULT_LIMIT}`);\n        const nextRows = await fetchWaxData({\n            limit,\n            lower_bound: nextId,\n            upper_bound: null,\n            show_payer: false,\n            reverse: false,\n            json: true,\n            key_type: \"\",\n            index_position: 1,\n            ...params,\n        });\n\n        if (nextRows.length === 0) {\n            return rows;\n        }\n        const processedNextRows = [];\n\n        for (let rowIndex = 0; rowIndex < nextRows.length; rowIndex++) {\n            const nextRow = nextRows[rowIndex];\n            const processedNextRow = await customProcessor({row: nextRow});\n            processedNextRows.push(processedNextRow);\n        }\n        \n        rows = [\n            ...rows,\n            ...processedNextRows,\n        ];\n\n        const lastRow = nextRows[nextRows.length - 1];\n        nextId = lastRow.id + 1;\n    }\n};\n\nmodule.exports = fetchAllWaxData;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAE9C,MAAME,aAAa,GAAG,IAAI;AAC1B,MAAMC,QAAQ,GAAG,CAAC;AAElB,MAAMC,eAAe,GAAG,MAAAA,CAAO;EAC3BC,MAAM;EACNC,eAAe,GAAG,MAAAA,CAAO;IAACC;EAAG,CAAC,KAAKA;AACvC,CAAC,KAAK;EACF,IAAIF,MAAM,CAACG,KAAK,KAAK,IAAI,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAE,wBAAuB,CAAC;EAC7C;EAEA,MAAMD,KAAK,GAAGH,MAAM,CAACG,KAAK,IAAIN,aAAa;EAC3C,IAAIQ,MAAM,GAAGL,MAAM,CAACM,WAAW,IAAIR,QAAQ;EAC3C,IAAIS,IAAI,GAAG,EAAE;EAEb,OAAO,IAAI,EAAE;IACTC,OAAO,CAACC,GAAG,CAAE,oBAAmBT,MAAM,CAACU,IAAK,IAAGV,MAAM,CAACW,KAAM,SAAQN,MAAO,KAAIR,aAAc,EAAC,CAAC;IAC/F,MAAMe,QAAQ,GAAG,MAAMhB,YAAY,CAAC;MAChCO,KAAK;MACLG,WAAW,EAAED,MAAM;MACnBQ,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,KAAK;MACjBC,OAAO,EAAE,KAAK;MACdC,IAAI,EAAE,IAAI;MACVC,QAAQ,EAAE,EAAE;MACZC,cAAc,EAAE,CAAC;MACjB,GAAGlB;IACP,CAAC,CAAC;IAEF,IAAIY,QAAQ,CAACO,MAAM,KAAK,CAAC,EAAE;MACvB,OAAOZ,IAAI;IACf;IACA,MAAMa,iBAAiB,GAAG,EAAE;IAE5B,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGT,QAAQ,CAACO,MAAM,EAAEE,QAAQ,EAAE,EAAE;MAC3D,MAAMC,OAAO,GAAGV,QAAQ,CAACS,QAAQ,CAAC;MAClC,MAAME,gBAAgB,GAAG,MAAMtB,eAAe,CAAC;QAACC,GAAG,EAAEoB;MAAO,CAAC,CAAC;MAC9DF,iBAAiB,CAACI,IAAI,CAACD,gBAAgB,CAAC;IAC5C;IAEAhB,IAAI,GAAG,CACH,GAAGA,IAAI,EACP,GAAGa,iBAAiB,CACvB;IAED,MAAMK,OAAO,GAAGb,QAAQ,CAACA,QAAQ,CAACO,MAAM,GAAG,CAAC,CAAC;IAC7Cd,MAAM,GAAGoB,OAAO,CAACC,EAAE,GAAG,CAAC;EAC3B;AACJ,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG7B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}