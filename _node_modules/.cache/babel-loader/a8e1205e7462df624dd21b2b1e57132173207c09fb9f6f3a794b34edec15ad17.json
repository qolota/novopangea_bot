{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchWaxData = require('../../core/fetchWaxData');\nconst fetchMarketSellOrders = require('./fetchMarketSellOrders');\nconst fetchMarketBuyOrders = require('./fetchMarketBuyOrders');\nconst formatMarketOrder = require('../utils/formatMarketOrder');\nconst fetchAccountBalance = require('./fetchAccountBalance');\nconst fetchMarkets = require('./fetchMarkets');\nconst fetchMarketAccount = async ({\n  accountName\n}) => {\n  const markets = await fetchMarkets({\n    accountName\n  });\n  const balance = await fetchAccountBalance({\n    accountName\n  });\n  const balanceWithAvailableMarkets = _(balance).map(balance => ({\n    ...balance,\n    ...markets[balance.fullTokenName]\n  })).value();\n  const rows = await fetchWaxData({\n    code: CONTRACTS.DEX,\n    index_position: 1,\n    json: true,\n    key_type: \"\",\n    limit: 1,\n    reverse: false,\n    scope: CONTRACTS.DEX,\n    show_payer: false,\n    table: \"account\",\n    table_key: \"\",\n    lower_bound: accountName,\n    upper_bound: accountName\n  });\n  const accountRaw = rows[0];\n  if (accountRaw == null) {\n    return {\n      sellOrders: [],\n      buyOrders: [],\n      ordersTotal: 0,\n      ordersLimit: 100,\n      balance: balanceWithAvailableMarkets\n    };\n  }\n  const account = {\n    sellOrders: [],\n    buyOrders: [],\n    ordersTotal: accountRaw.orders_total,\n    ordersLimit: accountRaw.orders_limit,\n    balance: balanceWithAvailableMarkets\n  };\n  for (let i = 0; i < accountRaw.sellorders.length; i++) {\n    const dexId = accountRaw.sellorders[i].key;\n    const sellOrders = await fetchMarketSellOrders({\n      accountName,\n      dexId\n    });\n    account.sellOrders = [...account.sellOrders, ..._(sellOrders).map(order => formatMarketOrder({\n      order,\n      dexId\n    })).value()];\n  }\n  for (let i = 0; i < accountRaw.buyorders.length; i++) {\n    const dexId = accountRaw.buyorders[i].key;\n    const buyOrders = await fetchMarketBuyOrders({\n      accountName,\n      dexId\n    });\n    account.buyOrders = [...account.buyOrders, ..._(buyOrders).map(order => formatMarketOrder({\n      order,\n      dexId\n    })).value()];\n  }\n  return account;\n};\nmodule.exports = fetchMarketAccount;","map":{"version":3,"names":["_","require","CONTRACTS","fetchWaxData","fetchMarketSellOrders","fetchMarketBuyOrders","formatMarketOrder","fetchAccountBalance","fetchMarkets","fetchMarketAccount","accountName","markets","balance","balanceWithAvailableMarkets","map","fullTokenName","value","rows","code","DEX","index_position","json","key_type","limit","reverse","scope","show_payer","table","table_key","lower_bound","upper_bound","accountRaw","sellOrders","buyOrders","ordersTotal","ordersLimit","account","orders_total","orders_limit","i","sellorders","length","dexId","key","order","buyorders","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/api/fetchAccount.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchWaxData = require('../../core/fetchWaxData');\nconst fetchMarketSellOrders = require('./fetchMarketSellOrders');\nconst fetchMarketBuyOrders = require('./fetchMarketBuyOrders');\nconst formatMarketOrder = require('../utils/formatMarketOrder');\nconst fetchAccountBalance = require('./fetchAccountBalance');\nconst fetchMarkets = require('./fetchMarkets');\n\nconst fetchMarketAccount = async ({accountName}) => {\n    const markets = await fetchMarkets({accountName});\n    const balance = await fetchAccountBalance({accountName});\n    const balanceWithAvailableMarkets = _(balance)\n        .map(balance => ({\n            ...balance,\n            ...markets[balance.fullTokenName],    \n        }))\n        .value();\n    \n    const rows = await fetchWaxData({\n        code: CONTRACTS.DEX,\n        index_position: 1,\n        json: true,\n        key_type: \"\",\n        limit: 1,\n        reverse: false,\n        scope: CONTRACTS.DEX,\n        show_payer: false,\n        table: \"account\",\n        table_key: \"\",\n        lower_bound: accountName,\n        upper_bound: accountName,\n    });\n\n    const accountRaw = rows[0];\n\n    if (accountRaw == null) {\n        return {\n            sellOrders: [],\n            buyOrders: [],    \n            ordersTotal: 0,\n            ordersLimit: 100,\n            balance: balanceWithAvailableMarkets,\n        };\n    }\n\n    const account = {\n        sellOrders: [],\n        buyOrders: [],\n        ordersTotal: accountRaw.orders_total,\n        ordersLimit: accountRaw.orders_limit,\n        balance: balanceWithAvailableMarkets,\n    };\n\n    for (let i = 0; i < accountRaw.sellorders.length; i++) {\n        const dexId = accountRaw.sellorders[i].key;\n        const sellOrders = await fetchMarketSellOrders({\n            accountName,\n            dexId,\n        });\n        account.sellOrders = [\n            ...account.sellOrders,\n            ..._(sellOrders)\n                .map(order => formatMarketOrder({\n                    order,\n                    dexId,\n                }))\n                .value(),\n        ];\n    }\n\n    for (let i = 0; i < accountRaw.buyorders.length; i++) {\n        const dexId = accountRaw.buyorders[i].key;\n        const buyOrders = await fetchMarketBuyOrders({\n            accountName,\n            dexId,\n        });\n        account.buyOrders = [\n            ...account.buyOrders,\n            ..._(buyOrders)\n                .map(order => formatMarketOrder({\n                    order,\n                    dexId,\n                }))\n                .value(),\n        ];\n    }\n\n    return account;\n};\n\nmodule.exports = fetchMarketAccount;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}