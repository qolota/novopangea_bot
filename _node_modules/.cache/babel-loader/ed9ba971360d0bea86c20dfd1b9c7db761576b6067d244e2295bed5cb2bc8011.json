{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* based on npm base-x module (removed buffer, added class structure) */\nclass BaseCoder {\n  constructor(ALPHABET) {\n    this.ALPHABET = ALPHABET;\n    if (ALPHABET.length >= 255) {\n      throw new TypeError('Alphabet too long');\n    }\n    this.BASE_MAP = new Uint8Array(256);\n    for (let j = 0; j < this.BASE_MAP.length; j++) {\n      this.BASE_MAP[j] = 255;\n    }\n    for (let i = 0; i < ALPHABET.length; i++) {\n      const x = ALPHABET.charAt(i);\n      const xc = x.charCodeAt(0);\n      if (this.BASE_MAP[xc] !== 255) {\n        throw new TypeError(x + ' is ambiguous');\n      }\n      this.BASE_MAP[xc] = i;\n    }\n    this.BASE = ALPHABET.length;\n    this.LEADER = ALPHABET.charAt(0);\n    this.FACTOR = Math.log(this.BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n    this.iFACTOR = Math.log(256) / Math.log(this.BASE); // log(256) / log(BASE), rounded up\n  }\n\n  encode(source) {\n    if (source.length === 0) {\n      return '';\n    }\n    // Skip & count leading zeroes.\n    let zeroes = 0;\n    let length = 0;\n    let pbegin = 0;\n    const pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    // Allocate enough space in big-endian base58 representation.\n    const size = (pend - pbegin) * this.iFACTOR + 1 >>> 0;\n    const b58 = new Uint8Array(size);\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin];\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0;\n      for (let it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % this.BASE >>> 0;\n        carry = carry / this.BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    // Skip leading zeroes in base58 result.\n    let it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    // Translate the result into a string.\n    let str = this.LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += this.ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  decode(source) {\n    const buffer = this.decodeUnsafe(source);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error('Non-base' + this.BASE + ' character');\n  }\n  decodeUnsafe(source) {\n    if (source.length === 0) {\n      return new Uint8Array(0);\n    }\n    let psz = 0;\n    // Skip leading spaces.\n    if (source[psz] === ' ') {\n      return new Uint8Array(0);\n    }\n    // Skip and count leading '1's.\n    let zeroes = 0;\n    let length = 0;\n    while (source[psz] === this.LEADER) {\n      zeroes++;\n      psz++;\n    }\n    // Allocate enough space in big-endian base256 representation.\n    const size = (source.length - psz) * this.FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size);\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = this.BASE_MAP[source.charCodeAt(psz)];\n      // Invalid character\n      if (carry === 255) {\n        return new Uint8Array(0);\n      }\n      let i = 0;\n      for (let it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += this.BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    // Skip trailing spaces.\n    if (source[psz] === ' ') {\n      return new Uint8Array(0);\n    }\n    // Skip leading zeroes in b256.\n    let it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    const vch = new Uint8Array(zeroes + (size - it4));\n    vch.fill(0x00, 0, zeroes);\n    let j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n}\nexports.default = BaseCoder;","map":{"version":3,"names":["Object","defineProperty","exports","value","BaseCoder","constructor","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","encode","source","zeroes","pbegin","pend","size","b58","carry","it1","Error","it2","str","repeat","decode","buffer","decodeUnsafe","psz","b256","it3","it4","vch","fill","default"],"sources":["/Users/germangurov/projects/wax_bot/node_modules/atomicassets/build/Serialization/Coders/Base.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* based on npm base-x module (removed buffer, added class structure) */\nclass BaseCoder {\n    constructor(ALPHABET) {\n        this.ALPHABET = ALPHABET;\n        if (ALPHABET.length >= 255) {\n            throw new TypeError('Alphabet too long');\n        }\n        this.BASE_MAP = new Uint8Array(256);\n        for (let j = 0; j < this.BASE_MAP.length; j++) {\n            this.BASE_MAP[j] = 255;\n        }\n        for (let i = 0; i < ALPHABET.length; i++) {\n            const x = ALPHABET.charAt(i);\n            const xc = x.charCodeAt(0);\n            if (this.BASE_MAP[xc] !== 255) {\n                throw new TypeError(x + ' is ambiguous');\n            }\n            this.BASE_MAP[xc] = i;\n        }\n        this.BASE = ALPHABET.length;\n        this.LEADER = ALPHABET.charAt(0);\n        this.FACTOR = Math.log(this.BASE) / Math.log(256); // log(BASE) / log(256), rounded up\n        this.iFACTOR = Math.log(256) / Math.log(this.BASE); // log(256) / log(BASE), rounded up\n    }\n    encode(source) {\n        if (source.length === 0) {\n            return '';\n        }\n        // Skip & count leading zeroes.\n        let zeroes = 0;\n        let length = 0;\n        let pbegin = 0;\n        const pend = source.length;\n        while (pbegin !== pend && source[pbegin] === 0) {\n            pbegin++;\n            zeroes++;\n        }\n        // Allocate enough space in big-endian base58 representation.\n        const size = ((pend - pbegin) * this.iFACTOR + 1) >>> 0;\n        const b58 = new Uint8Array(size);\n        // Process the bytes.\n        while (pbegin !== pend) {\n            let carry = source[pbegin];\n            // Apply \"b58 = b58 * 256 + ch\".\n            let i = 0;\n            for (let it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n                carry += (256 * b58[it1]) >>> 0;\n                b58[it1] = (carry % this.BASE) >>> 0;\n                carry = (carry / this.BASE) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            pbegin++;\n        }\n        // Skip leading zeroes in base58 result.\n        let it2 = size - length;\n        while (it2 !== size && b58[it2] === 0) {\n            it2++;\n        }\n        // Translate the result into a string.\n        let str = this.LEADER.repeat(zeroes);\n        for (; it2 < size; ++it2) {\n            str += this.ALPHABET.charAt(b58[it2]);\n        }\n        return str;\n    }\n    decode(source) {\n        const buffer = this.decodeUnsafe(source);\n        if (buffer) {\n            return buffer;\n        }\n        throw new Error('Non-base' + this.BASE + ' character');\n    }\n    decodeUnsafe(source) {\n        if (source.length === 0) {\n            return new Uint8Array(0);\n        }\n        let psz = 0;\n        // Skip leading spaces.\n        if (source[psz] === ' ') {\n            return new Uint8Array(0);\n        }\n        // Skip and count leading '1's.\n        let zeroes = 0;\n        let length = 0;\n        while (source[psz] === this.LEADER) {\n            zeroes++;\n            psz++;\n        }\n        // Allocate enough space in big-endian base256 representation.\n        const size = (((source.length - psz) * this.FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.\n        const b256 = new Uint8Array(size);\n        // Process the characters.\n        while (source[psz]) {\n            // Decode character\n            let carry = this.BASE_MAP[source.charCodeAt(psz)];\n            // Invalid character\n            if (carry === 255) {\n                return new Uint8Array(0);\n            }\n            let i = 0;\n            for (let it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n                carry += (this.BASE * b256[it3]) >>> 0;\n                b256[it3] = (carry % 256) >>> 0;\n                carry = (carry / 256) >>> 0;\n            }\n            if (carry !== 0) {\n                throw new Error('Non-zero carry');\n            }\n            length = i;\n            psz++;\n        }\n        // Skip trailing spaces.\n        if (source[psz] === ' ') {\n            return new Uint8Array(0);\n        }\n        // Skip leading zeroes in b256.\n        let it4 = size - length;\n        while (it4 !== size && b256[it4] === 0) {\n            it4++;\n        }\n        const vch = new Uint8Array(zeroes + (size - it4));\n        vch.fill(0x00, 0, zeroes);\n        let j = zeroes;\n        while (it4 !== size) {\n            vch[j++] = b256[it4++];\n        }\n        return vch;\n    }\n}\nexports.default = BaseCoder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}