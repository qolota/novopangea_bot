{"ast":null,"code":"const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData = require('../../core/fetchAllWaxData');\nconst convertPool = pool => {\n  const [quantity, symbol] = pool.quantity.split(' ');\n  return {\n    quantity: Number(quantity),\n    symbol,\n    contract: pool.contract,\n    fullTokenName: `${symbol}+${pool.contract}`\n  };\n};\nconst groupPools = (pools, index) => _(pools).groupBy(pool => `${pool.symbols[index].symbol}+${pool.symbols[index].contract}`).value();\nconst fetchSwapPools = async () => {\n  const pools = await fetchAllWaxData({\n    params: {\n      code: CONTRACTS.SWAP2,\n      scope: CONTRACTS.SWAP2,\n      table: \"pools\"\n    },\n    customProcessor: async ({\n      row\n    }) => {\n      const pool = {\n        id: row.id,\n        fee: row.fee / 100,\n        symbols: [convertPool(row.tokenA), convertPool(row.tokenB)]\n      };\n      pool.symbols = [{\n        ...pool.symbols[0],\n        price: pool.symbols[1].quantity / pool.symbols[0].quantity\n      }, {\n        ...pool.symbols[1],\n        price: pool.symbols[0].quantity / pool.symbols[1].quantity\n      }];\n      return pool;\n    }\n  });\n  const groupedPools = _.mergeWith(groupPools(pools, 0), groupPools(pools, 1), (objValue, srcValue) => {\n    if (_.isArray(objValue)) {\n      return objValue.concat(srcValue);\n    }\n  });\n  return groupedPools;\n};\nmodule.exports = fetchSwapPools;","map":{"version":3,"names":["_","require","CONTRACTS","fetchAllWaxData","convertPool","pool","quantity","symbol","split","Number","contract","fullTokenName","groupPools","pools","index","groupBy","symbols","value","fetchSwapPools","params","code","SWAP2","scope","table","customProcessor","row","id","fee","tokenA","tokenB","price","groupedPools","mergeWith","objValue","srcValue","isArray","concat","module","exports"],"sources":["/Users/germangurov/projects/wax_bot/src/alcor/api/fetchSwapPools.js"],"sourcesContent":["const _ = require('lodash');\nconst CONTRACTS = require('../consts/CONTRACTS');\nconst fetchAllWaxData = require('../../core/fetchAllWaxData');\n\nconst convertPool = (pool) => {\n    const [quantity, symbol] = pool.quantity.split(' ');\n\n    return {\n        quantity: Number(quantity),\n        symbol,\n        contract: pool.contract,\n        fullTokenName: `${symbol}+${pool.contract}`,\n    };\n};\n\nconst groupPools = (pools, index) => _(pools)\n    .groupBy(pool => `${pool.symbols[index].symbol}+${pool.symbols[index].contract}`)\n    .value();\n\nconst fetchSwapPools = async () => {\n    const pools = await fetchAllWaxData({\n      params: {\n          code: CONTRACTS.SWAP2,\n          scope: CONTRACTS.SWAP2,\n          table: \"pools\",\n      },\n      customProcessor: async ({row}) => {\n          const pool = {\n              id: row.id,\n              fee: row.fee/100,\n              symbols: [\n                  convertPool(row.tokenA),\n                  convertPool(row.tokenB),\n              ],\n          };\n  \n          pool.symbols = [\n              {\n                  ...pool.symbols[0],\n                  price: pool.symbols[1].quantity/pool.symbols[0].quantity,\n              },\n              {\n                  ...pool.symbols[1],\n                  price: pool.symbols[0].quantity/pool.symbols[1].quantity,\n              },\n          ];\n  \n          return pool;\n      },\n    });\n  \n    const groupedPools = _.mergeWith(\n        groupPools(pools, 0),\n        groupPools(pools, 1),\n        (objValue, srcValue) => {\n          if (_.isArray(objValue)) {\n            return objValue.concat(srcValue);\n          }\n        }\n      );\n  \n    return groupedPools;\n  };\n\nmodule.exports = fetchSwapPools;\n"],"mappings":"AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC3B,MAAMC,SAAS,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAChD,MAAME,eAAe,GAAGF,OAAO,CAAC,4BAA4B,CAAC;AAE7D,MAAMG,WAAW,GAAIC,IAAI,IAAK;EAC1B,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAGF,IAAI,CAACC,QAAQ,CAACE,KAAK,CAAC,GAAG,CAAC;EAEnD,OAAO;IACHF,QAAQ,EAAEG,MAAM,CAACH,QAAQ,CAAC;IAC1BC,MAAM;IACNG,QAAQ,EAAEL,IAAI,CAACK,QAAQ;IACvBC,aAAa,EAAG,GAAEJ,MAAO,IAAGF,IAAI,CAACK,QAAS;EAC9C,CAAC;AACL,CAAC;AAED,MAAME,UAAU,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAKd,CAAC,CAACa,KAAK,CAAC,CACxCE,OAAO,CAACV,IAAI,IAAK,GAAEA,IAAI,CAACW,OAAO,CAACF,KAAK,CAAC,CAACP,MAAO,IAAGF,IAAI,CAACW,OAAO,CAACF,KAAK,CAAC,CAACJ,QAAS,EAAC,CAAC,CAChFO,KAAK,CAAC,CAAC;AAEZ,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAML,KAAK,GAAG,MAAMV,eAAe,CAAC;IAClCgB,MAAM,EAAE;MACJC,IAAI,EAAElB,SAAS,CAACmB,KAAK;MACrBC,KAAK,EAAEpB,SAAS,CAACmB,KAAK;MACtBE,KAAK,EAAE;IACX,CAAC;IACDC,eAAe,EAAE,MAAAA,CAAO;MAACC;IAAG,CAAC,KAAK;MAC9B,MAAMpB,IAAI,GAAG;QACTqB,EAAE,EAAED,GAAG,CAACC,EAAE;QACVC,GAAG,EAAEF,GAAG,CAACE,GAAG,GAAC,GAAG;QAChBX,OAAO,EAAE,CACLZ,WAAW,CAACqB,GAAG,CAACG,MAAM,CAAC,EACvBxB,WAAW,CAACqB,GAAG,CAACI,MAAM,CAAC;MAE/B,CAAC;MAEDxB,IAAI,CAACW,OAAO,GAAG,CACX;QACI,GAAGX,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC;QAClBc,KAAK,EAAEzB,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACV,QAAQ,GAACD,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACV;MACpD,CAAC,EACD;QACI,GAAGD,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC;QAClBc,KAAK,EAAEzB,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACV,QAAQ,GAACD,IAAI,CAACW,OAAO,CAAC,CAAC,CAAC,CAACV;MACpD,CAAC,CACJ;MAED,OAAOD,IAAI;IACf;EACF,CAAC,CAAC;EAEF,MAAM0B,YAAY,GAAG/B,CAAC,CAACgC,SAAS,CAC5BpB,UAAU,CAACC,KAAK,EAAE,CAAC,CAAC,EACpBD,UAAU,CAACC,KAAK,EAAE,CAAC,CAAC,EACpB,CAACoB,QAAQ,EAAEC,QAAQ,KAAK;IACtB,IAAIlC,CAAC,CAACmC,OAAO,CAACF,QAAQ,CAAC,EAAE;MACvB,OAAOA,QAAQ,CAACG,MAAM,CAACF,QAAQ,CAAC;IAClC;EACF,CACF,CAAC;EAEH,OAAOH,YAAY;AACrB,CAAC;AAEHM,MAAM,CAACC,OAAO,GAAGpB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}